% Encoding: UTF-8
@String{acta     = {Acta Informatica}}
@String{addison  = {Addison-Wesley Professional}}
@String{aosd     = {International Conference on Aspect-Oriented Software Development}}
@String{ase      = {International Conference on Automated Software Engineering}}
@String{cav      = {International Conference on Computer Aided Verification}}
@String{cc       = {International Conference on Compiler Construction}}
@String{ecoop    = {European Conference on Object-Oriented Programming}}
@String{fase     = {International Conference on Fundamental Aspects of Software Engineering}}
@String{foal     = {International Workshop on Foundations of Aspect-Oriented Languages}}
@String{fse      = {ACM SIGSOFT Symposium on the Foundations of Software Engineering}}
@String{icse     = {International Conference on Software Engineering}}
@String{icsm     = {International Conference on Software Maintenance}}
@String{issre    = {International Symposium on Software Reliability Engineering}}
@String{issta    = {International Symposium on Software Testing and Analysis}}
@String{joop     = {Journal of Object-Oriented Programming}}
@String{late     = {International Conference on Linking Aspect Technology and Evolution}}
@String{oopsla   = {International Conference on Object-Oriented Programming, Systems, Languages, and Applications}}
@String{paste    = {ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering}}
@String{pldi     = {ACM SIGPLAN Conference on Programming Language Design and Implementation}}
@String{popl     = {Symposium on Principles of Programming Languages}}
@String{pppj     = {Principles and Practices of Programming on The Java Platform}}
@String{prentice = {Prentice Hall}}
@String{req      = {Requirements Engineering}}
@String{sas      = {Static Analysis Symposium}}
@String{scam     = {International Working Conference on Source Code Analysis and Manipulation}}
@String{siam     = {Society for Industrial and Applied Mathematics}}
@String{springer = {Springer-Verlag}}
@String{toplas   = {ACM Transactions on Programming Languages and Systems}}
@String{topm     = {ACM Transactions on Parallel Computing}}
@String{tosem    = {ACM Transactions on Software Engineering and Methodology}}
@String{tse      = {IEEE Transactions on Software Engineering}}

@InProceedings{rashid03,
  author        = {A.~Rashid and R.~Chitchyan},
  title         = {Persistence as an aspect},
  booktitle     = aosd,
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Misc{agarwal2017code,
  author        = {Agarwal, Shivali and Gupta, Monika and Katta, Naga Praveen Kumar},
  title         = {Code profiling of executable library for pipeline parallelization},
  note          = {US Patent 9,619,360},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2017-04},
  owner         = {Raffi Khatchadourian},
  publisher     = {Google Patents},
  timestamp     = {2017.12.08},
}

@Misc{agarwal2014code,
  author        = {Agarwal, Shivali and Gupta, Monika and Katta, Naga Praveen Kumar},
  title         = {Code profiling of executable library for pipeline parallelization},
  note          = {US Patent 8,910,137},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2014-12},
  owner         = {Raffi Khatchadourian},
  publisher     = {Google Patents},
  timestamp     = {2017.12.08},
}

@InProceedings{aldrich05,
  author        = {Aldrich, Jonathan},
  title         = {Open Modules: Modular Reasoning About Advice},
  booktitle     = ecoop,
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Alshara2015,
  author    = {Alshara, Zakarea and Seriai, Abdelhak-Djamel and Tibermacine, Chouki and Bouziane, Hinde Lilia and Dony, Christophe and Shatnawi, Anas},
  title     = {Migrating Large Object-oriented Applications into Component-based Ones: Instantiation and Inheritance Transformation},
  booktitle = {ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
  series    = {GPCE 2015},
  pages     = {55--64},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2814223},
  date      = {2015},
  doi       = {10.1145/2814204.2814223},
  isbn      = {978-1-4503-3687-1},
  keywords  = {Class Instantiation, Code Transformation, Component, Encapsulation, Inheritance, Java, OSGi, Object, Refactoring},
  location  = {Pittsburgh, PA, USA},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Article{anbalagan06,
  author        = {Anbalagan, Prasanth and Xie, Tao},
  title         = {Clamp: automated joinpoint clustering and pointcut mining in aspect-oriented refactoring},
  volume        = {31},
  number        = {6},
  pages         = {1--2},
  issn          = {0163-5948},
  abstract      = {Software refactoring consists of a set of techniques to reorganize code while preserving the external behavior. Aspect-Oriented Programming (AOP) provides new modularization of software systems by encapsulating crosscutting concerns. Based on these two techniques, Aspect-Oriented (AO) refactoring restructures crosscutting elements in code. AO refactoring includes two steps: aspect mining (identification of aspect candidates in code) and aspect refactoring (semantic-preserving transformation to migrate the aspect-candidate code to AO code). Aspect refactoring clusters the join points for the aspect candidates and encapsulates each cluster with an effective pointcut definition. With the increase in size of the code and crosscutting concerns, it is tedious to manually identify aspects and their corresponding join points, cluster the join points, and infer a pointcut expression. This paper proposes an automated framework that clusters join point candidates and infers a pointcut expression for each cluster.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIi4uLy4uLy4uL1BhcGVycy9BbmJhbGFnYW4vMjAwNi5wZGbSFwsYGVdOUy5kYXRhTxEBoAAAAAABoAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACptDCDIwMDYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm0TF4pE/AAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAlBbmJhbGFnYW4AABAACAAAxqt79gAAABEACAAAxeLJfwAAAAEAGAAKm0MACps+AAqRpwAKkaQACAChAACQ5wACAERNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOkFuYmFsYWdhbjoyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA3VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0FuYmFsYWdhbi8yMDA2LnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCzALgAwAJkAmYCawJ2An8CjQKRApgCoQKmArMCtgLIAssC0AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALS},
  bdsk-url-1    = {http://doi.acm.org.proxy.lib.ohio-state.edu/10.1145/1218776.1218795},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1218776.1218795},
  journaltitle  = {SIGSOFT Softw. Eng. Notes},
  location      = {New York, NY, USA},
  publisher     = {ACM},
}

@InProceedings{anbalagan06a,
  author        = {Anbalagan, Prasanth and Xie, Tao},
  title         = {APTE: automated pointcut testing for {A}spect{J} programs},
  booktitle     = {Workshop on Testing aspect-oriented programs},
  pages         = {27--32},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1146374.1146379},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1146374.1146379},
  isbn          = {1-59593-415-4},
  location      = {Portland, Maine},
}

@InProceedings{anbalagan07,
  author        = {Anbalagan, Prasanth and Xie, Tao},
  title         = {Automated Inference of Pointcuts in Aspect-Oriented Refactoring},
  booktitle     = icse,
  abstract      = {Software refactoring is the process of reorganizing the internal structure of code while preserving the external behavior. Aspect-Oriented Programming (AOP) provides new modularization of software systems by encapsulating crosscutting concerns. Based on these two techniques, aspect-oriented (AO) refactoring restructures crosscutting elements in code. AO refactoring includes two steps: aspect mining (identification of aspect candidates in code) and aspect refactoring (semantic-preserving transformation to migrate the aspect-candidate code to AO code). Aspect refactoring clusters similar join points together for the aspect candidates and encapsulates each cluster with an effective pointcut definition. 
With the increase in size of the code and crosscutting concerns, it is tedious to manually identify aspects and their corresponding join points, cluster the join points, and infer pointcut expressions. Therefore, there is a need to automate the process of AO refactoring. This paper proposes an automated approach that identifies aspect candidates in code and infers pointcut expressions for these aspects. Our approach mines for aspect candidates, identifies the join points for the aspect candidates, clusters the join points, and infers an effective pointcut expression for each cluster of join points. The approach also provides an additional testing mechanism to ensure that the inferred pointcut expressions are of correct strength. The empirical results show that our approach helps achieve a significant reduction in the total number of pointcut expressions to be used in the refactored code.},
  annotation    = {Summary: - Given a set of join points, clusters the join points based on common characteristics in the method names. - Based on lexical matching Pros: - Supplies a clustering algorithm. - interesting edit distance-like application Cons: - No dynamic pointcuts - Only lexical matching ==> No structural considerations - No considerations given to evolution Comments: - Could be used as a tool},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIi4uLy4uLy4uL1BhcGVycy9BbmJhbGFnYW4vMjAwNy5wZGbSFwsYGVdOUy5kYXRhTxEBoAAAAAABoAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACptDCDIwMDcucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm0bF4pE/AAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAlBbmJhbGFnYW4AABAACAAAxqt79gAAABEACAAAxeLJfwAAAAEAGAAKm0MACps+AAqRpwAKkaQACAChAACQ5wACAERNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOkFuYmFsYWdhbjoyMDA3LnBkZgAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA3VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0FuYmFsYWdhbi8yMDA3LnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCzALgAwAJkAmYCawJ2An8CjQKRApgCoQKmArMCtgLIAssC0AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALS},
  bdsk-url-1    = {http://dx.doi.org/10.1109/ICSE.2007.19},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/ICSE.2007.19},
  isbn          = {0-7695-2828-7},
}

@InProceedings{andion2014parallelizing,
  author        = {Andi{\'o}n, Jos{\'e} M and Arenaz, Manuel and Rodr{\'\i}guez, Gabriel and Touri{\~n}o, Juan},
  title         = {A parallelizing compiler for multicore systems},
  booktitle     = {Proceedings of the 17\textsuperscript{th} International Workshop on Software and Compilers for Embedded Systems},
  pages         = {138--141},
  organization  = {ACM},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2014},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@PhdThesis{apel07,
  author        = {Apel, Sven},
  title         = {The Role of Features and Aspects in Software Development},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHS4uLy4uLy4uL1BhcGVycy9BcGVsLzIwMDcucGRm0hcLGBlXTlMuZGF0YU8RAZAAAAAAAZAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbUwgyMDA3LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACptUxeKRPwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAEQXBlbAAQAAgAAMare/YAAAARAAgAAMXiyX8AAAABABgACptTAAqbPgAKkacACpGkAAgAoQAAkOcAAgA/TWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpBcGVsOjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAyVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0FwZWwvMjAwNy5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCuALMAuwJPAlECVgJhAmoCeAJ8AoMCjAKRAp4CoQKzArYCuwAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAK9},
  date          = {2007-03},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  institution   = {University of Magdeburg},
}

@Article{aryani09,
  author               = {Aryani, Amir and Peake, Ian D. and Hamilton, Margaret and Schmidt, Heinz and Winikoff, Michael},
  title                = {Change Propagation Analysis Using Domain Information},
  volume               = {0},
  pages                = {34--43},
  issn                 = {1530-0803},
  abstract             = {We propose a novel methodology for analysing change propagation in software using the domain-level behavioural model of a system. We hypothesize that change propagation analysis is feasible based purely on the information visible and understandable to domain experts, trading some accuracy for productivity. Such a method is independent of formal architectural representations and may be practical for applications with heterogeneous subsystems, or missing or undocumented source code. In this paper we introduce the first phase of the methodology: creating and evaluating a connection graph of conceptual relationships between user interface components. We provide results of case studies on two web-based systems which illustrate how our methodology can be applied, and how discovered conceptual relationships match the architectural dependencies.},
  bdsk-url-1           = {http://dx.doi.org/10.1109/ASWEC.2009.31},
  citeulike-article-id = {5208445},
  citeulike-linkout-0  = {http://doi.ieeecomputersociety.org/10.1109/ASWEC.2009.31},
  citeulike-linkout-1  = {http://dx.doi.org/10.1109/ASWEC.2009.31},
  date                 = {2009},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {10.1109/ASWEC.2009.31},
  journaltitle         = {Australian Software Engineering Conference},
  keywords             = {change, propagation},
  location             = {Los Alamitos, CA, USA},
  posted-at            = {2009-07-20 16:43:05},
  publisher            = {IEEE Computer Society},
}

@InProceedings{arzt2014,
  author        = {Arzt, Steven and Rasthofer, Siegfried and Fritz, Christian and Bodden, Eric and Bartel, Alexandre and Klein, Jacques and Le Traon, Yves and Octeau, Damien and McDaniel, Patrick},
  title         = {FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps},
  booktitle     = pldi,
  date          = {2014},
  date-added    = {2016-09-26 20:01:09 +0000},
  date-modified = {2016-09-26 20:01:31 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.06.23},
}

@Article{avgustinov06,
  author        = {Avgustinov, Pavel and Christensen, Aske and Hendren, Laurie and Kuzins, Sascha and Lhot\'{a}k, Jennifer and Lhot\'{a}k, Ond\v{r}ej and de Moor, Oege and Sereni, Damien and Sittampalam, Ganesh and Tibble, Julian},
  title         = {abc : An Extensible AspectJ Compiler},
  volume        = {1},
  pages         = {293--334},
  abstract      = {Research in the design of aspect-oriented programming languages requires a workbench that facilitates easy experimentation with new language features and implementation techniques. In particular, new features for AspectJ have been proposed that require extensions in many dimensions: syntax, type checking and code generation, as well as data flow and control flow analyses. The AspectBench Compiler (abc) is an implementation of such a workbench. The base version of abc implements the full AspectJ language. Its front end is built using the Polyglot framework, as a modular extension of the Java language. The use of Polyglot gives flexibility of syntax and type checking. The back end is built using the Soot framework, to give modular code generation and analyses. In this paper, we outline the design of abc, focusing mostly on how the design supports extensibility. We then provide a general overview of how to use abc to implement an extension. We illustrate the extension mechanisms of abc through a number of small, but nontrivial, examples. We then proceed to contrast the design goals of abc with those of the original AspectJ compiler, and how these different goals have led to different design decisions. Finally, we review a few examples of projects by others that extend abc in interesting ways.},
  bdsk-url-1    = {http://dx.doi.org/10.1007/11687061%5C_9},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Transactions on Aspect-Oriented Software Development},
  keywords      = {aspectj},
}

@InProceedings{avgustinov07,
  author        = {Avgustinov, Pavel and Hajiyev, Elnar and Ongkingco, Neil and de Moor, Oege and Sereni, Damien and Tibble, Julian and Verbaere, Mathieu},
  title         = {Semantics of Static Pointcuts in AspectJ},
  booktitle     = popl,
  abstract      = {In aspect-oriented programming, one can intercept events by writing patterns called pointcuts. The pointcut language of the most popular aspect-oriented programming language, AspectJ, allows the expression of highly complex properties of the static program structure. We present the first rigorous semantics of the AspectJ pointcut language, by translating static patterns into safe (i.e. range-restricted and stratified) Datalog queries. Safe Datalog is a logic language like Prolog, but it does not have data structures; consequently it has a straightforward least fixpoint semantics and all queries terminate. The translation from pointcuts to safe Datalog consists of a set of simple conditional rewrite rules, implemented using the Stratego system. The resulting queries are themselves executable with the CodeQuest system. We present experiments indicating that direct execution of our semantics is not prohibitively expensive.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIy4uLy4uLy4uL1BhcGVycy9Bdmd1c3Rpbm92LzIwMDcucGRm0hcLGBlXTlMuZGF0YU8RAaIAAAAAAaIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbVQgyMDA3LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACptWxeKRPwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAKQXZndXN0aW5vdgAQAAgAAMare/YAAAARAAgAAMXiyX8AAAABABgACptVAAqbPgAKkacACpGkAAgAoQAAkOcAAgBFTWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpBdmd1c3Rpbm92OjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA4VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0F2Z3VzdGlub3YvMjAwNy5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgC0ALkAwQJnAmkCbgJ5AoICkAKUApsCpAKpArYCuQLLAs4C0wAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALV},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Ayewah2010,
  author    = {Ayewah, Nathaniel and Pugh, William},
  title     = {Null Dereference Analysis in Practice},
  booktitle = paste,
  series    = {PASTE '10},
  pages     = {65--72},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1806686},
  date      = {2010},
  doi       = {10.1145/1806672.1806686},
  isbn      = {978-1-4503-0082-7},
  keywords  = {null pointer dereference, static analysis},
  location  = {Toronto, Ontario, Canada},
  numpages  = {8},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.11},
}

@Online{Bach2017,
  author       = {Jordan Bach},
  title        = {The Most Popular Programming Languages for 2017},
  year         = {2017},
  date         = {2017-01-10},
  journaltitle = {AppDynamics Engineering Blog},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.05.30},
  url          = {http://blog.appdynamics.com/engineering/the-most-popular-programming-languages-for-2017},
  urldate      = {2018-05-30},
}

@InProceedings{balaban05,
  author        = {Balaban, Ittai and Tip, Frank and Fuhrer, Robert},
  title         = {Refactoring support for class library migration},
  booktitle     = {OOPSLA '05: Proceedings of the 20\textsuperscript{th} annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
  pages         = {265--279},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1094811.1094832},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1094811.1094832},
  isbn          = {1-59593-031-0},
  location      = {San Diego, CA, USA},
}

@Article{Banerjee1993,
  author        = {Banerjee, Utpal and Eigenmann, Rudolf and Nicolau, Alexandru and Padua, David A},
  title         = {Automatic program parallelization},
  volume        = {81},
  number        = {2},
  pages         = {211--243},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {1993},
  journaltitle  = {Proceedings of the IEEE},
  owner         = {Raffi Khatchadourian},
  publisher     = {IEEE},
  timestamp     = {2017.12.08},
}

@InProceedings{baniassad02,
  author        = {Baniassad, Elisa L. A. and Murphy, Gail C. and Schwanninger, Christa and Kircher, Michael},
  title         = {Managing crosscutting concerns during software evolution tasks: an inquisitive study},
  booktitle     = aosd,
  pages         = {120--126},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  abstract      = {Code is modularized, for many reasons, including making it easier to understand, change, and verify. Aspect-oriented programming approaches extend the kind of code that can be modularized, enabling the modularization of crosscutting code. We conducted an inquisitive study to better understand the kinds of crosscutting code that software developers encounter and to better understand how the developers manage this code. We tracked eight participants: four from industry and four from academia. Each participant was currently evolving a non-trivial software system. We interviewed these participants three times about crosscutting concerns they had encountered and the strategies they used to deal with the concerns. We found that crosscutting concerns tended to emerge as obstacles that the developer had to consider to make the desired change. The strategy used by the developer to manage the concern depended on the form of the obstacle code. The results of this study provide empirical evidence to support the problems identified by the aspect-oriented programming community, and provide a basis on which to further assess aspect-oriented programming.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIi4uLy4uLy4uL1BhcGVycy9CYW5pYXNzYWQvMjAwMi5wZGbSFwsYGVdOUy5kYXRhTxEBoAAAAAABoAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACptXCDIwMDIucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm1jF4pE/AAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAlCYW5pYXNzYWQAABAACAAAxqt79gAAABEACAAAxeLJfwAAAAEAGAAKm1cACps+AAqRpwAKkaQACAChAACQ5wACAERNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOkJhbmlhc3NhZDoyMDAyLnBkZgAOABIACAAyADAAMAAyAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA3VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0Jhbmlhc3NhZC8yMDAyLnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCzALgAwAJkAmYCawJ2An8CjQKRApgCoQKmArMCtgLIAssC0AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALS},
  bdsk-url-1    = {http://doi.acm.org/10.1145/508386.508401},
  date          = {2002},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/508386.508401},
  isbn          = {1-58113-469-X},
  location      = {Enschede, The Netherlands},
}

@InProceedings{baumer01,
  author        = {B{\"a}umer, Dirk and Gamma, Erich and Kiezun, Adam},
  title         = {Integrating refactoring support into a {J}ava development tool},
  booktitle     = oopsla,
  date          = {2001},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Biboudis2015,
  author     = {Aggelos Biboudis and Nick Palladinos and George Fourtounis and Yannis Smaragdakis},
  title      = {Streams {\`{a}} la carte: Extensible Pipelines with Object Algebras},
  booktitle  = ecoop,
  editor     = {John Tang Boyland},
  volume     = {37},
  series     = {Leibniz International Proceedings in Informatics (LIPIcs)},
  pages      = {591--613},
  publisher  = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  annotation = {Keywords: object algebras, streams, extensibility, domain-specific languages, expression problem, library design},
  date       = {2015},
  year       = {2015},
  doi        = {10.4230/LIPIcs.ECOOP.2015.591},
  isbn       = {978-3-939897-86-6},
  issn       = {1868-8969},
  keywords   = {object algebras, streams, extensibility, domain-specific languages, expression problem, library design},
  location   = {Dagstuhl, Germany},
  owner      = {Raffi Khatchadourian},
  timestamp  = {2018.05.30},
  urn        = {urn:nbn:de:0030-drops-52392},
}

@InProceedings{Bissyande2013,
  author    = {Tegawende F. Bissyande and Ferdian Thung and David Lo and Lingxiao Jiang and Laurent Reveillere},
  title     = {Popularity, Interoperability, and Impact of Programming Languages in 100,000 Open Source Projects},
  booktitle = {Computer Software and Applications Conference},
  publisher = {IEEE},
  date      = {2013-07},
  doi       = {10.1109/compsac.2013.55},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.30},
}

@Book{Bloch2008,
  title     = {Effective Java},
  publisher = {Prentice Hall PTR},
  author    = {Bloch, Joshua},
  edition   = {2},
  isbn      = {9780321356680},
  date      = {2008},
  location  = {Upper Saddle River, NJ, USA},
  timestamp = {2018.05.30},
}

@Article{blum2007cultural,
  author        = {Blum, Lenore and Frieze, Carol and Hazzan, Orit and Dias, M Bernardine},
  title         = {A cultural perspective on gender diversity in computing},
  pages         = {109},
  date          = {2007},
  date-added    = {2015-09-24 14:11:58 +0000},
  date-modified = {2015-09-24 14:12:02 +0000},
  journaltitle  = {Reconfiguring the Firewall: Recruiting Women to Information Technology across Cultures and Continents},
  publisher     = {CRC Press},
}

@Book{bodden07,
  title         = {Most commonly advised join points in practise?},
  publisher     = {Aosd-discuss Mailing List},
  author        = {Bodden, Eric},
  note          = {\url{http://aosd.net/pipermail/discuss_aosd.net/2007-October/002262.html}},
  bdsk-url-1    = {ftp://ftp.isi.edu/end2end/end2end-interest-1990.mail},
  date          = {2007-10},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Bodden2010,
  author    = {Bodden, Eric},
  title     = {Efficient Hybrid Typestate Analysis by Determining Continuation-equivalent States},
  booktitle = icse,
  series    = {ICSE '10},
  pages     = {5--14},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Typestate analysis determines whether a program violates a set of finite-state properties. Because the typestate-analysis problem is statically undecidable, researchers have proposed a hybrid approach that uses residual monitors to signal property violations at runtime.

We present an efficient novel static typestate analysis that is flow-sensitive, partially context-sensitive, and that generates residual runtime monitors. To gain efficiency, our analysis uses precise, flow-sensitive information on an intra-procedural level only, and models the remainder of the program using a flow-insensitive pointer abstraction. Unlike previous flow-sensitive analyses, our analysis uses an additional backward analysis to partition states into equivalence classes. Code locations that transition between equivalent states are irrelevant and require no monitoring. As we show in this work, this notion of equivalent states is crucial to obtaining sound runtime monitors.

We proved our analysis correct, implemented the analysis in the Clara framework for typestate analysis, and applied it to the DaCapo benchmark suite. In half of the cases, our analysis determined exactly the property-violating program points. In many other cases, the analysis reduced the number of instrumentation points by large amounts, yielding significant speed-ups during runtime monitoring.},
  acmid     = {1806805},
  date      = {2010},
  doi       = {10.1145/1806799.1806805},
  isbn      = {978-1-60558-719-6},
  keywords  = {runtime monitoring, static analysis, typestate analysis},
  location  = {Cape Town, South Africa},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
}

@InProceedings{bodden08,
  author        = {Bodden, Eric and Havelund, Klaus},
  title         = {Racer: effective race detection using {A}spect{J}},
  booktitle     = issta,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1390630.1390650},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1390630.1390650},
  isbn          = {978-1-60558-050-0},
}

@Book{bodkin07,
  title         = {Most commonly advised join points in practise?},
  publisher     = {Aosd-discuss Mailing List},
  author        = {Bodkin, Ron},
  note          = {\url{http://aosd.net/pipermail/discuss_aosd.net/2007-October/002263.html}},
  bdsk-url-1    = {ftp://ftp.isi.edu/end2end/end2end-interest-1990.mail},
  date          = {2007-10},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{boehm76,
  author        = {Boehm, B. W.},
  title         = {Software engineering},
  volume        = {C-25},
  pages         = {1226--1241},
  date          = {1976-12},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {IEEE Transactions on Computers},
}

@InProceedings{Bono2014,
  author    = {Bono, Viviana and Mensa, Enrico and Naddeo, Marco},
  title     = {Trait-oriented Programming in Java 8},
  booktitle = pppj,
  series    = {PPPJ '14},
  pages     = {181--186},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Java 8 was released recently. Along with lambda expressions, a new language construct is introduced: default methods in interfaces. The intent of this feature is to allow interfaces to be extended over time preserving backward compatibility. In this paper, we show a possible, different use of these interfaces: we introduce a trait-oriented programming style based on an interface-as-trait idea, with the aim of improving code modularity. Starting from the most common operators on traits, we introduce some programming patterns mimicking such operators and discuss this approach.},
  acmid     = {2647520},
  date      = {2014},
  doi       = {10.1145/2647508.2647520},
  isbn      = {978-1-4503-2926-2},
  keywords  = {Java 8, code modularity, default method, programming pattern, trait},
  location  = {Cracow, Poland},
  numpages  = {6},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Article{Borba2004,
  author       = {Borba, Paulo and Sampaio, Augusto and Cavalcanti, Ana and Corn{\'e}lio, M\'{a}rcio},
  title        = {Algebraic Reasoning for Object-oriented Programming},
  volume       = {52},
  number       = {1-3},
  pages        = {53--100},
  issn         = {0167-6423},
  acmid        = {1034994},
  date         = {2004-08},
  doi          = {10.1016/j.scico.2004.03.003},
  issue_date   = {August 2004},
  journaltitle = {Science of Computer Programming},
  location     = {Amsterdam, The Netherlands, The Netherlands},
  numpages     = {48},
  owner        = {Raffi Khatchadourian},
  publisher    = {Elsevier North-Holland, Inc.},
  timestamp    = {2017.07.06},
}

@TechReport{bracha03,
  author        = {Bracha, G. and Cohen, N. and Kemper, C. and Odersky, M. and Stoutamire, D. and Thorup, K. and Wadler, P.},
  title         = {Adding generics to the {J}ava programming language: Public draft specification, version 2.0.},
  institution   = {Java Community Process},
  number        = {JSR 014},
  date          = {2003-06},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{braem06,
  author        = {Braem, Mathieu and Gybels, Kris and Kellens, Andy and Vanderperren, Wim},
  title         = {Inducing evolution-robust pointcuts},
  booktitle     = {International Workshop on Software Evolution (ERCIM)},
  abstract      = {One of the problems in Aspect-Oriented Software Development is specifying pointcuts that are robust with respect to evolution of the base program. We propose to use Inductive Logic Programming, and more specifically the FOIL algorithm, to automatically discover intensional pattern-based pointcuts. In this paper we demonstrate this approach using several experiments in Java, where we successfully induce a pointcut from a given set of joinpoints. Furthermore, we present the tool chain and IDE that supports our approach.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHi4uLy4uLy4uL1BhcGVycy9CcmFlbS8yMDA2LnBkZtIXCxgZV05TLmRhdGFPEQGUAAAAAAGUAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm2MIMjAwNi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqbZMXikT8AAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAABUJyYWVtAAAQAAgAAMare/YAAAARAAgAAMXiyX8AAAABABgACptjAAqbPgAKkacACpGkAAgAoQAAkOcAAgBATWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpCcmFlbToyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0JyYWVtLzIwMDYucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAK8AtAC8AlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  date          = {2006-10},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Paris, France},
}

@InProceedings{braem06a,
  author        = {Braem, Mathieu and Gybels, Kris and Kellens, Andy and Vanderperren, Wim},
  title         = {Automated Pattern-Based Pointcut Generation},
  booktitle     = {SC},
  abstract      = {One of the main problems in Aspect-Oriented Software Development is the so-called fragile pointcut problem. Uncovering and specifying a good robust pointcut is not an easy task. In this paper we propose to use Inductive Logic Programming, and more specifically the FOIL algorithm, to automatically identify intensional (or ``pattern-based'') pointcuts. We present the tool chain we implemented to induce a pointcut given a set of identified joinpoints. Using several realistic medium-scale experiments, we show that our approach is able to automatically induce robust pointcuts for a set of joinpoints.},
  annotation    = {Summary: Pros: Cons: - Applicability is questionable as it doesn't use AspectJ join point model - Claim is pointcuts withstand evolution but there's no evaluation of this Comments:},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QKC4uLy4uLy4uLy4uLy4uLy4uL1BhcGVycy9CcmFlbS8yMDA2YS5wZGbSFwsYGVdOUy5kYXRhTxEBhAAAAAABhAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxGcFMkgrAAAAEaRLCTIwMDZhLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARpE7Dz3nRUERGIAAAAAAABgADAAAJIAAAAAAAAAAAAAAAAAAAAAVCcmFlbQAAEAAIAADEZz1yAAAAEQAIAADDz8AhAAAAAQAUABGkSwARpDwAEX1QABFjEQARXggAAgA5TWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRvY3VtZW50czpQYXBlcnM6QnJhZW06MjAwNmEucGRmAAAOABQACQAyADAAMAA2AGEALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASACxVc2Vycy9yYWZmaS9Eb2N1bWVudHMvUGFwZXJzL0JyYWVtLzIwMDZhLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALkAvgDGAk4CUAJVAmACaQJ3AnsCggKLApACnQKgArICtQK6AAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAArw=},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{brandes1997hpfit,
  author        = {Brandes, Thomas and Chaumette, Serge and Counilh, Marie Christine and Roman, Jean and Darte, Alain and Desprez, Fr{\'e}d{\'e}ric and Mignot, Jean-Christophe},
  title         = {HPFIT: A set of integrated tools for the parallelization of applications using High Performance Fortran. Part I: HPFIT and the TransTOOL environment},
  volume        = {23},
  number        = {1-2},
  pages         = {71--87},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {1997},
  journaltitle  = {Parallel Computing},
  owner         = {Raffi Khatchadourian},
  publisher     = {Elsevier},
  timestamp     = {2017.12.08},
}

@InProceedings{Brodu2016,
  author        = {Brodu, Etienne and Fr{\'e}not, St{\'e}phane and Obl{\'e}, Fr{\'e}d{\'e}ric},
  title         = {Transforming {JavaScript} Event-loop into a Pipeline},
  booktitle     = {Symposium on Applied Computing},
  pages         = {1906--1911},
  publisher     = {ACM},
  abstract      = {The development of a real-time web application often starts with a feature-driven approach allowing to quickly react to users feedbacks. However, this approach poorly scales in performance. Yet, the user-base can increase by an order of magnitude in a matter of hours. This first approach is unable to deal with the highest connections spikes. It leads the development team to shift to a scalable approach often linked to new development paradigm such as dataflow programming. This shift of technology is disruptive and continuity-threatening. To avoid it, we propose to abstract the feature-driven development into a more scalable high-level language. Indeed, reasoning on this high-level language allows to dynamically cope with user-base size evolutions.

We propose a compilation approach that transforms a JavaScript, single-threaded real-time web application into a network of small independent parts communicating by message streams. We named these parts uxions, by contraction between a flow and a function. The independence of these parts allows their execution to be parallel, and to organize an application on several processors to cope with its load, in a similar way network routers do with IP traffic. We test this approach by applying the compiler to a real web application. We transform this application to parallelize the execution of an independent part and present the result.},
  acmid         = {2851745},
  date          = {2016},
  date-added    = {2016-10-10 21:40:47 +0000},
  date-modified = {2016-10-10 21:41:03 +0000},
  doi           = {10.1145/2851613.2851745},
  isbn          = {978-1-4503-3739-7},
  keywords      = {JavaScript, Web, flow programming},
  location      = {Pisa, Italy},
  numpages      = {6},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
}

@Article{Bu2010,
  author       = {Bu, Yingyi and Howe, Bill and Balazinska, Magdalena and Ernst, Michael D.},
  title        = {HaLoop: Efficient Iterative Data Processing on Large Clusters},
  volume       = {3},
  number       = {1-2},
  pages        = {285--296},
  issn         = {2150-8097},
  acmid        = {1920881},
  date         = {2010-09},
  doi          = {10.14778/1920841.1920881},
  issue_date   = {September 2010},
  journaltitle = {Proc. VLDB Endow.},
  numpages     = {12},
  owner        = {Raffi Khatchadourian},
  publisher    = {VLDB Endowment},
  timestamp    = {2017.12.14},
}

@InProceedings{cacho08,
  author        = {Cacho, Nelio and Filho, Fernando Castor and Garcia, Alessandro and Figueiredo, Eduardo},
  title         = {EJFlow: taming exceptional control flows in aspect-oriented programming},
  booktitle     = aosd,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1353482.1353492},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1353482.1353492},
  isbn          = {978-1-60558-044-9},
}

@InProceedings{Campanoni2012,
  author        = {Campanoni, Simone and Jones, Timothy and Holloway, Glenn and Reddi, Vijay Janapa and Wei, Gu-Yeon and Brooks, David},
  title         = {HELIX: automatic parallelization of irregular programs for chip multiprocessing},
  booktitle     = {Proceedings of the Tenth International Symposium on Code Generation and Optimization},
  pages         = {84--93},
  organization  = {ACM},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2012},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Book{card83,
  title         = {The Psychology of Human-computer Interaction},
  publisher     = {Lawrence Erlbaum Associates},
  author        = {Card, Stuart K. and Moran, Thomas P. and Newell, Allen},
  date          = {1983},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Proceedings{DBLP:conf/ecoop/2006ramse,
  title         = {RAM-SE'06-ECOOP'06 Workshop on Reflection, AOP, and Meta-Data for Software Evolution, Proceedings, Nantes, France, July 4, 2006},
  editor        = {Cazzola, Walter and Chiba, Shigeru and Coady, Yvonne and Saake, Gunter},
  publisher     = {Fakult{\"a}t f{\"u}r Informatik, Universit{\"a}t Magdeburg},
  bibsource     = {DBLP, http://dblp.uni-trier.de},
  booktitle     = {RAM-SE},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Proceedings{DBLP:conf/ecoop/2004ramse,
  title         = {RAM-SE'04-ECOOP'04 Workshop on Reflection, AOP, and Meta-Data for Software Evolution, Proceedings, Oslo, June 15, 2004},
  editor        = {Cazzola, Walter and Chiba, Shigeru and Saake, Gunter},
  publisher     = {Fakult{\"a}t f{\"u}r Informatik, Universit{\"a}t Magdeburg},
  bibsource     = {DBLP, http://dblp.uni-trier.de},
  booktitle     = {RAM-SE},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{cazzola07,
  author        = {Cazzola, Walter and Pini, Sonia},
  title         = {AOP vs Software Evolution: a Score in Favor of the Blueprint},
  booktitle     = {International Workshop on Reflection, AOP and Meta-Data for Software Evolution},
  editor        = {Cazzola, Walter and Chiba, Shigeru and Coady, Yvonne and Ducasse, St\'ephane and Kniesel, G\"unter and Oriol, Manuel and Saake, Gunter},
  pages         = {81--91},
  abstract      = {All software systems are subject to evolution, independently by the developing technique. Aspect oriented software in addition to separate the different concerns during the software development, must be ``not fragile'' against software evolution. Otherwise, the benefit of disentangling the code will be burred by the extra complication in maintaining the code. To obtain this goal, the aspect-oriented languages/tools must evolve, they have to be less coupled to the base program. In the last years, a few attempts have been proposed, the Blueprint is our proposal based on behavioral patterns. In this paper we test the robustness of the Blueprint aspect-oriented language against software evolution.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9DYXp6b2xhLzIwMDcucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbbAgyMDA3LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACptwxeKRPwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHQ2F6em9sYQAAEAAIAADGq3v2AAAAEQAIAADF4sl/AAAAAQAYAAqbbAAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6Q2F6em9sYToyMDA3LnBkZgAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0NhenpvbGEvMjAwNy5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  date          = {2007-07},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Berlin, Germany},
}

@InProceedings{cazzola04,
  author        = {Cazzola, Walter and Pini, Sonia and Ancona, Massimo},
  title         = {Evolving Pointcut Definition to Get Software Evolution},
  booktitle     = {RAM-SE},
  pages         = {83--88},
  abstract      = {In this paper, we have briefly analyzed the aspect-oriented approach with respect to the software evolution topic. The aim of this analysis is to highlight the aspect-oriented potentiality for software evolution and its limits. From our analysis, we can state that actual pointcut definition mechanisms are not enough expressive to pick out from design information where software evolution should be applied. We will also give some suggestions about how to improve the pointcut definition mechanism.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9DYXp6b2xhLzIwMDQucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbbAgyMDA0LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpttxeKRPwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHQ2F6em9sYQAAEAAIAADGq3v2AAAAEQAIAADF4sl/AAAAAQAYAAqbbAAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6Q2F6em9sYToyMDA0LnBkZgAOABIACAAyADAAMAA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0NhenpvbGEvMjAwNC5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  bibsource     = {DBLP, http://dblp.uni-trier.de},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  ee            = {http://www.disi.unige.it/person/CazzolaW/RAM-SE04\%20Proceedings/Cazzola\%2C\%20Pini\%20and\%20Ancona.pdf},
}

@InProceedings{cazzola05,
  author        = {Cazzola, Walter and Pini, Sonia and Ancona, Massimo},
  title         = {AOP for software evolution: a design oriented approach},
  booktitle     = {SAC '05: Proceedings of the 2005 ACM symposium on Applied computing},
  pages         = {1346--1350},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  abstract      = {In this paper, we have briefly explored the aspect-oriented approach as a tool for supporting the software evolution. The aim of this analysis is to highlight the potentiality and the limits of the aspect-oriented development for software evolution. From our analysis follows that in general (and in particular for AspectJ) the approach to join points, pointcuts and advices definition are not enough intuitive, abstract and expressive to support all the requirements for carrying out the software evolution. We have also examined how a mechanism for specifying pointcuts and advices based on design information, in particular on the use of UML diagrams, can better support the software evolution through aspect oriented programming. Our analysis and proposal are presented through an example.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9DYXp6b2xhLzIwMDUucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbbAgyMDA1LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACptuxeKRPwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHQ2F6em9sYQAAEAAIAADGq3v2AAAAEQAIAADF4sl/AAAAAQAYAAqbbAAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6Q2F6em9sYToyMDA1LnBkZgAOABIACAAyADAAMAA1AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0NhenpvbGEvMjAwNS5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1066677.1066982},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1066677.1066982},
  isbn          = {1-58113-964-0},
  location      = {Santa Fe, New Mexico},
}

@InProceedings{cazzola06,
  author        = {Cazzola, Walter and Pini, Sonia and Ancona, Massimo},
  title         = {Design-Based Pointcuts Robustness Against Software Evolution},
  booktitle     = {RAM-SE},
  abstract      = {Aspect-Oriented Programming (AOP) is a powerful technique to better modularize object-oriented programs by introducing crosscutting concerns in a safe and noninvasive way. Unfortunately, most of the current join point models are too coupled with the application code. This fact harms the evolvability of the program, hinders the concerns selection and reduces the aspect reusability. To overcome this problem is an hot topic. This work propose a possible solution to the limits of the current aspect-oriented techniques based on model- ing the join point selection mechanism at a higher level of abstraction to decoupling base program and aspects. In this paper, we will present by examples a novel join point model based on design information (e.g., ex- pressed through UML diagrams). Design information provides an high-level view on the application structure and behavior decoupled by base program. A design oriented join point model will render aspect definition more robust against base program evolution, reusable and independent of the base program.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9DYXp6b2xhLzIwMDYucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbbAgyMDA2LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACptvxeKRPwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHQ2F6em9sYQAAEAAIAADGq3v2AAAAEQAIAADF4sl/AAAAAQAYAAqbbAAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6Q2F6em9sYToyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0NhenpvbGEvMjAwNi5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{clifton07,
  author        = {C~Clifton and G~Leavens and J~Noble},
  title         = {{MAO}: Ownership and Effects for more Effective Reasoning about Aspects},
  booktitle     = ecoop,
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Chan2004,
  author        = {Chan, Bryan and Abdelrahman, Tarek S},
  title         = {Run-time support for the automatic parallelization of Java programs},
  volume        = {28},
  number        = {1},
  pages         = {91--117},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2004},
  journaltitle  = {The Journal of Supercomputing},
  owner         = {Raffi Khatchadourian},
  publisher     = {Springer},
  timestamp     = {2017.12.08},
}

@InProceedings{Chen2015,
  author    = {Chen, Yu-Fang and Hong, Chih-Duo and Sinha, Nishant and Wang, Bow-Yaw},
  title     = {Commutativity of Reducers},
  booktitle = {International Conference on Tools and Algorithms for the Construction and Analysis of Systems},
  acmid     = {2945598},
  date      = {2015},
  doi       = {10.1007/978-3-662-46681-0_9},
  numpages  = {16},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
}

@TechReport{Cheon2016,
  author      = {Cheon, Yoonsik and Cao, Zejing and Rahad, Khandoker},
  title       = {Writing JML Specifications Using Java 8 Streams},
  institution = {University of Texas at El Paso},
  number      = {UTEP-CS-16-83},
  abstract    = {JML is a formal behavioral interface specification language for Java to document Java program modules such as classes and interfaces. When composing JML specifications, one frequently writes assertions involving a collection of values. In this paper we propose to use Java 8 streams for writing more concise and cleaner assertions on a collection. The use of streams in JML can be minimal and non-invasive in the conventional style of writing assertions. It can also be holistic to write all assertions in the abstract state defined by streams. We perform a small case study to illustrate our approach and show its effectiveness as well. We then summarize our findings and the lessons that we learned from the case study.},
  date        = {2016-11},
  keywords    = {Assertions, formal specifications, lambda notations, streams, Java, JML},
  location    = {500 West University Avenue, El Paso, Texas 79968-0518, USA},
  owner       = {Raffi Khatchadourian},
  timestamp   = {2018.05.28},
  url         = {http://digitalcommons.utep.edu/cs_techrep/1095},
}

@InProceedings{chin88,
  author        = {Chin, John P. and Diehl, Virginia A. and Norman, Kent L.},
  title         = {Development of an instrument measuring user satisfaction of the human-computer interface},
  booktitle     = {CHI '88: Proceedings of the SIGCHI conference on Human factors in computing systems},
  pages         = {213--218},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  bdsk-url-1    = {http://portal.acm.org/ft_gateway.cfm?id=57203&type=pdf&coll=GUIDE&dl=GUIDE&CFID=58572828&CFTOKEN=25962487},
  bdsk-url-2    = {http://doi.acm.org/10.1145/57167.57203},
  date          = {1988},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/57167.57203},
  isbn          = {0-201-14237-6},
  location      = {Washington, D.C., United States},
}

@InProceedings{christensen03,
  author        = {Christensen, Aske Simon and M\o{}ller, Anders and Schwartzbach, Michael I.},
  title         = {Precise Analysis of String Expressions},
  booktitle     = sas,
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Book{clark00,
  title         = {Model Checking},
  publisher     = {MIT Press},
  author        = {Clarke, E.M. and Grumberg, O. and Peled, D.},
  date          = {2000},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InCollection{clarke05,
  author        = {Clarke, S. and Walker, R.},
  title         = {Generic aspect-oriented design with Theme/UML},
  booktitle     = {Aspect oriented software development},
  publisher     = addison,
  pages         = {425--458},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InCollection{clemente05,
  author        = {Clemente, P. and Hern\'andez, J. and Herrero, J. and Murillo, J. and S\'anchez, F.},
  title         = {Aspect-Orientation in the Software Lifecycle: Fact and Fiction},
  booktitle     = {Aspect-oriented software development},
  publisher     = addison,
  editor        = {Filman, Robert E. and Elrad, Tzilla and Clarke, Siobh\'an and {Ak{\c s}it}, Mehmet},
  pages         = {407--423},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Boston},
}

@InProceedings{clifton02,
  author        = {Clifton, C. and Leavens, G.},
  title         = {Observers and assistants: A proposal for modular aspect-oriented reasoning},
  booktitle     = foal,
  date          = {2002},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{clifton05,
  author        = {Clifton, C. and Leavens, G.},
  title         = {Mini{MAO}: Investigating the semantics of proceed},
  booktitle     = foal,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QRy4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL2NsaWZ0b24wNW1pbmltYW8ucGRm0hcLGBlXTlMuZGF0YU8RAeYAAAAAAeYAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAANBcCSdIKwAAACa/+xRjbGlmdG9uMDVtaW5pbWFvLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ2n7xeKRYAAAAAAAAAAAAAMABgAACSAAAAAAAAAAAAAAAAAAAAAHcmVsYXRlZAAAEAAIAADQXEFnAAAAEQAIAADF4smgAAAAAQAcACa/+wAmk3gAJoZBABvjmAAb3BoAG8oLAAKT1QACAF5NYWNpbnRvc2ggSEQ6VXNlcnM6AHJhZmZpOgBEcm9wYm94OgBEb2N1bWVudHM6AHNjaG9vbDoANzg4X2F1MDc6AHJlbGF0ZWQ6AGNsaWZ0b24wNW1pbmltYW8ucGRmAA4AKgAUAGMAbABpAGYAdABvAG4AMAA1AG0AaQBuAGkAbQBhAG8ALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAEpVc2Vycy9yYWZmaS9Ecm9wYm94L0RvY3VtZW50cy9zY2hvb2wvNzg4X2F1MDcvcmVsYXRlZC9jbGlmdG9uMDVtaW5pbWFvLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOANgA3QDlAs8C0QLWAuEC6gL4AvwDAwMMAxEDHgMhAzMDNgM7AAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAz0=},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/clifton05minimao.pdf},
}

@InProceedings{coelho08,
  author        = {Coelho, Roberta and Rashid, Awais and Garcia, Alessandro and Ferrari, Fabiano Cutigi and Cacho, N{\'e}lio and Kulesza, Uir{\'a} and von Staa, Arndt and de Lucena, Carlos Jos{\'e} Pereira},
  title         = {Assessing the Impact of Aspects on Exception Flows: An Exploratory Study},
  booktitle     = ecoop,
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Www{Hunter2017,
  author    = {{Hunter College, City University of New York}},
  title     = {{Hunter College Undergraduate Research Initiative}},
  abstract  = {The mission of the Undergraduate Research Initiative is to provide Hunter students with the opportunity to conduct research alongside Hunter's outstanding faculty and to encourage and support those faculty who provide Hunter's undergraduates with research experiences outside the classroom.},
  date      = {2017},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-13},
  url       = {http://www.hunter.cuny.edu/ugresearch/initiative},
  urldate   = {2017-07-07},
}

@Misc{College2017,
  author       = {{Hunter College, City University of New York}},
  title        = {{Hunter College Facts \& Statistics}},
  note         = {(Accessed on 07/11/2017)},
  date         = {2017},
  organization = {{Hunter College, City University of New York}},
  owner        = {rk1424},
  timestamp    = {2017.07.11},
  url          = {http://www.hunter.cuny.edu/communications/media-relations/facts},
}

@Electronic{EclipseContributors2017,
  author       = {{Eclipse Contributors}},
  year         = {2017},
  title        = {{ASTRewrite (Eclipse JDT API Specification)}},
  organization = {{Eclipse Foundation}},
  url          = {http://help.eclipse.org/oxygen/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.html},
  date         = {2017-06-08},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.06},
}

@Electronic{EclipseContributors2017a,
  author       = {{Eclipse Contributors}},
  year         = {2017},
  title        = {{Refactoring (Eclipse Platform API Specification)}},
  organization = {{Eclipse Foundation}},
  url          = {http://help.eclipse.org/oxygen/topic/org.eclipse.platform.doc.isv/reference/api/org/eclipse/ltk/core/refactoring/Refactoring.html#checkInitialConditions-org.eclipse.core.runtime.IProgressMonitor-},
  date         = {2017-06-08},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.06},
  urldate      = {2017-07-02},
}

@Electronic{EclipseContributors2017c,
  author       = {{Eclipse Contributors}},
  year         = {2017},
  title        = {{ITypeHierarchy (Eclipse JDT API Specification)}},
  organization = {{Eclipse Foundation}},
  url          = {http://help.eclipse.org/oxygen/topic/org.eclipse.jdt.doc.isv/reference/api/org/eclipse/jdt/core/ITypeHierarchy.html},
  date         = {2017-06-08},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.06},
}

@Article{conway63,
  author        = {Conway, Melvin E.},
  title         = {Design of a separable transition-diagram compiler},
  volume        = {6},
  number        = {7},
  pages         = {396--408},
  issn          = {0001-0782},
  bdsk-url-1    = {http://doi.acm.org/10.1145/366663.366704},
  date          = {1963},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/366663.366704},
  journaltitle  = {Commun. ACM},
  location      = {New York, NY, USA},
  publisher     = {ACM},
}

@Online{oracle-defaultmethods,
  author  = {{Oracle Corporation}},
  title   = {{Default Methods (The Java{\texttrademark} Tutorials, Learning the Java Language, Interfaces and Inheritance)}},
  date    = {2015},
  url     = {http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html},
  urldate = {2015-08-20},
}

@Online{oracle,
  author        = {{Oracle Corporation}},
  title         = {{J}ava {P}rogramming {L}anguage: {E}nhancements in {JDK} 5},
  bdsk-url-1    = {http://java.sun.com/j2se/1.5.0/docs/guide/language},
  date          = {Last checked: April 15, 2015},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  url           = {http://docs.oracle.com/javase/1.5.0/docs/guide/language},
}

@Misc{oracle-jdk-enhancements,
  author        = {{Oracle Corporation}},
  title         = {{J}ava {P}rogramming {L}anguage {E}nhancements},
  note          = {\url{http://docs.oracle.com/javase/8/docs/technotes/guides/language/enhancements.html}},
  bdsk-url-1    = {http://java.sun.com/j2se/1.5.0/docs/guide/language},
  date          = {Last checked: December 5, 2014},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 17:27:22 +0000},
  lastchecked   = {December 5, 2014},
  owner         = {rkhatchadourian},
  timestamp     = {2014.12.05},
  url           = {http://docs.oracle.com/javase/8/docs/technotes/guides/language/enhancements.html},
}

@Misc{chashmap,
  author    = {{Oracle Corporation}},
  title     = {ConcurrentHashMap (Java Platform SE 8)},
  note      = {(Accessed on 12/06/2016)},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.06.23},
  url       = {https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html},
}

@Misc{concat,
  author    = {{Oracle Corporation}},
  title     = {Stream (Java Platform SE 8)},
  note      = {(Accessed on 12/06/2016)},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.06.23},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#concat-java.util.stream.Stream-java.util.stream.Stream-},
}

@Online{hashset,
  author    = {{Oracle Corporation}},
  title     = {{HashSet (Java Platform SE 8)}},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html},
  urldate   = {2016-12-02},
}

@Misc{supplier,
  author    = {{Oracle Corporation}},
  title     = {Supplier (Java Platform SE 8)},
  note      = {Represents a supplier of results (accessed on 12/05/2016).},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.06.23},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html},
}

@Online{OracleCorporation2015,
  author    = {{Oracle Corporation}},
  title     = {{Lambda Expressions (The Java\texttrademark~Tutorials $>$ Learning the Java Language $>$ Classes and Objects)}},
  abstract  = {This beginner Java tutorial describes fundamentals of programming in the Java programming language.},
  date      = {2015},
  keywords  = {java programming, learn java, java sample code, java objects, java classes, java inheritance, interfaces, variables, arrays, data types, operators, control flow, number, string},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.05},
  url       = {http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html},
  urldate   = {2017-07-05},
}

@Misc{OracleCorporation2015a,
  author    = {{Oracle Corporation}},
  title     = {{Parallelism (The Java\texttrademark~Tutorials $>$ Collections $>$ Aggregate Operations)}},
  note      = {(Accessed on 07/05/2017)},
  abstract  = {This collections Java tutorial describes interfaces, implementations, and algorithms in the Java Collections framework.},
  date      = {2015},
  keywords  = {java programming, learn java, java sample code, java collections, set, list, queue, map, array, arraylist},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
  url       = {http://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html},
}

@Misc{OracleCorporation2016,
  author        = {{Oracle Corporation}},
  title         = {Java\texttrademark~Platform, Standard Edition 8 API},
  date          = {2016},
  date-added    = {2016-02-23 17:00:24 +0000},
  date-modified = {2016-08-01 17:57:03 +0000},
  keywords      = {java, api, documentation},
  lastchecked   = {August 1, 2016},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
  url           = {http://docs.oracle.com/javase/8/docs/api},
  urldate       = {August 1, 2016},
}

@Misc{Corporation2016,
  author    = {Oracle Corporation},
  title     = {ConcurrentHashMap (Java Platform SE 8)},
  note      = {(Accessed on 12/06/2016)},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
  url       = {https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html},
}

@Misc{Corporation2016a,
  author    = {{Oracle Corporation}},
  title     = {Stream (Java Platform SE 8)},
  note      = {(Accessed on 12/06/2016)},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-17},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#concat-java.util.stream.Stream-java.util.stream.Stream-},
}

@Misc{Corporation2016b,
  author    = {Oracle Corporation},
  title     = {{HashSet (Java Platform SE 8)}},
  note      = {(Accessed on 12/02/2016)},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html},
}

@Misc{Corporation2016d,
  author    = {{Oracle Corporation}},
  title     = {java.util.stream (Java Platform SE 8)--Classes to support functional-style operations on streams of elements, such as map-reduce transformations on collections.},
  note      = {(Accessed on 11/04/2016)},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-17},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html},
}

@Misc{Corporation2016e,
  author    = {Oracle Corporation},
  title     = {Supplier (Java Platform SE 8)},
  note      = {Represents a supplier of results (accessed on 12/05/2016).},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html},
}

@Misc{OracleCorporation,
  author      = {{Oracle Corporation}},
  title       = {Java Programming Language Enhancements},
  bdsk-url-1  = {http://java.sun.com/j2se/1.5.0/docs/guide/language},
  date        = {2016},
  lastchecked = {July 6, 2017},
  owner       = {Raffi Khatchadourian},
  timestamp   = {2017.07.06},
  url         = {http://docs.oracle.com/javase/8/docs/technotes/guides/language/enhancements.html},
}

@Misc{OracleCorporation2016a,
  author    = {{Oracle Corporation}},
  title     = {{Optional (Java Platform SE 8)}},
  note      = {(Accessed on 11/14/2016)},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html},
}

@Misc{linkedhashset,
  author    = {{Oracle Corporation}},
  title     = {{LinkedHashSet (Java Platform SE 8)}},
  note      = {(Accessed on 12/02/2016)},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.07},
  url       = {http://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html},
}

@Misc{OracleCorporation2016b,
  author    = {{Oracle Corporation}},
  title     = {Annotations},
  note      = {{(Accessed on 07/18/2017)}},
  date      = {2016},
  owner     = {rk1424},
  timestamp = {2017.07.18},
  url       = {http://docs.oracle.com/javase/8/docs/technotes/guides/language/annotations.html},
}

@Www{OracleCorporation2018,
  author    = {{Oracle Corporation}},
  title     = {{String (Java SE 10 \& JDK 10)}},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-14},
  url       = {http://docs.oracle.com/javase/10/docs/api/java/lang/String.html},
  urldate   = {2018-07-14},
}

@Article{Cortes2003,
  author        = {Cortes, Mariela and Fontoura, Marcus and Lucena, Carlos},
  title         = {Using refactoring and unification rules to assist framework evolution},
  volume        = {28},
  number        = {6},
  pages         = {1--1},
  abstract      = {Although object-oriented software development has experienced the benefits of using frameworks, a thorough understanding of how to change them to meet evolving requirement needs is still object of research. Therefore framework development is very expensive, not only because of the intrinsic difficulty related to capturing the domain theory, but also because of the lack of appropriate methods and techniques to support the evolution and redesign of the framework architecture. This paper proposes the use of refactoring and unification rules to assist framework evolution. The approach is illustrated through the JUnit testing framework.},
  date          = {2003-11},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/966221.966234},
  journaltitle  = {SIGSOFT Softw. Eng. Notes},
  owner         = {Raffi Khatchadourian},
  publisher     = {ACM},
  timestamp     = {2017.07.06},
}

@InProceedings{cottenier07,
  author        = {Cottenier, Thomas and van den Berg, Aswin and Elrad, Tzilla},
  title         = {Joinpoint Inference from Behavioral Specification to Implementation},
  booktitle     = ecoop,
  pages         = {476--500},
  abstract      = {Aspect-Oriented Programming languages allow pointcut descriptors to directly quantify over the implementation points of a system. Such pointcuts introduce strong mutual coupling between base modules and aspects and are problematic with respect to independent development. This paper introduces a new joinpoint selection mechanism based on state machine specifications. The interfaces of a system include a specification of the effects of method invocations on the state of the module instance. This specification is not defined with respect to potential aspects, but unambiguously describes the observable behavior of the module. We show how a smart joinpoint selection mechanism is able to infer points that might be located deep inside the implementation of a module, given pointcuts that are expressed entirely in terms of its specification elements. We present a tool, the Motorola WEAVR, which implements this technique in a Model-Driven Engineering environment.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIi4uLy4uLy4uL1BhcGVycy9Db3R0ZW5pZXIvMjAwNy5wZGbSFwsYGVdOUy5kYXRhTxEBoAAAAAABoAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpuGCDIwMDcucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm4fF4pE/AAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAlDb3R0ZW5pZXIAABAACAAAxqt79gAAABEACAAAxeLJfwAAAAEAGAAKm4YACps+AAqRpwAKkaQACAChAACQ5wACAERNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOkNvdHRlbmllcjoyMDA3LnBkZgAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA3VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0NvdHRlbmllci8yMDA3LnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCzALgAwAJkAmYCawJ2An8CjQKRApgCoQKmArMCtgLIAssC0AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALS},
  bibsource     = {DBLP, http://dblp.uni-trier.de},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1007/978-3-540-73589-2_23},
}

@InProceedings{Csallner2011,
  author    = {Csallner, Christoph and Fegaras, Leonidas and Li, Chengkai},
  title     = {New Ideas Track: Testing {MapReduce}-style Programs},
  booktitle = fse,
  publisher = {ACM},
  acmid     = {2025204},
  date      = {2011},
  doi       = {10.1145/2025113.2025204},
  isbn      = {978-1-4503-0443-6},
  keywords  = {dynamic symbolic execution, mapreduce, test generation},
  location  = {Szeged, Hungary},
  numpages  = {4},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
}

@Article{Czarnul2003,
  author        = {Czarnul, Pawel},
  title         = {Programming, tuning and automatic parallelization of irregular divide-and-conquer applications in DAMPVM/DAC},
  volume        = {17},
  number        = {1},
  pages         = {77--93},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2003},
  journaltitle  = {The International Journal of High Performance Computing Applications},
  owner         = {Raffi Khatchadourian},
  publisher     = {Sage Publications},
  timestamp     = {2017.12.08},
}

@InProceedings{dantas06,
  author        = {D.~Dantas and D.~Walker},
  title         = {Harmless advice},
  booktitle     = popl,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QPS4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3BvcGwwNi5wZGbSFwsYGVdOUy5kYXRhTxEBvgAAAAABvgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAA0FwJJ0grAAAAJr/7CnBvcGwwNi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAm+GnF4pFgAAAAAAAAAAAAAwAGAAAJIAAAAAAAAAAAAAAAAAAAAAdyZWxhdGVkAAAQAAgAANBcQWcAAAARAAgAAMXiyaAAAAABABwAJr/7ACaTeAAmhkEAG+OYABvcGgAbygsAApPVAAIAVE1hY2ludG9zaCBIRDpVc2VyczoAcmFmZmk6AERyb3Bib3g6AERvY3VtZW50czoAc2Nob29sOgA3ODhfYXUwNzoAcmVsYXRlZDoAcG9wbDA2LnBkZgAOABYACgBwAG8AcABsADAANgAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAQFVzZXJzL3JhZmZpL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3BvcGwwNi5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgDOANMA2wKdAp8CpAKvArgCxgLKAtEC2gLfAuwC7wMBAwQDCQAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAML},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/popl06.pdf},
}

@InProceedings{dagenais07,
  author        = {Dagenais, Barth\'{e}l\'{e}my and Breu, Silvia and Warr, Fr\'{e}d\'{e}ric Weigand and Robillard, Martin P.},
  title         = {Inferring structural patterns for concern traceability in evolving software},
  booktitle     = ase,
  abstract      = {As part of the evolution of software systems, effort is often invested to discover in what parts of the source code a feature (or other concern) is implemented. Unfortunately, knowledge about a concern's implementation can become invalid as the system evolves. We propose to mitigate this problem by automatically inferring structural patterns among the elements identified as relevant to a concern's implementation. We then document the inferred patterns as rules that can be checked as the source code evolves. Checking whether structural patterns hold across different versions of a system enables the automatic identification of new elements related to a documented concern. We implemented our technique for Java in an Eclipse plug-in called ISIS4J and applied it to a number of concerns. With a case study spanning 34 versions of the development history of an open-source system, we show how our approach supports the tracking of a concern's implementation through modifications such as extensions and refactorings.},
  annotation    = {Summary: Pros: Cons: Comments:},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIS4uLy4uLy4uL1BhcGVycy9EYWdlbmFpcy8yMDA3LnBkZtIXCxgZV05TLmRhdGFPEQGcAAAAAAGcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm4gIMjAwNy5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqbicYt/5RQREYgAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAACERhZ2VuYWlzABAACAAAxqt79gAAABEACAAAxi431AAAAAEAGAAKm4gACps+AAqRpwAKkaQACAChAACQ5wACAENNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOkRhZ2VuYWlzOjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0RhZ2VuYWlzLzIwMDcucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsgC3AL8CXwJhAmYCcQJ6AogCjAKTApwCoQKuArECwwLGAssAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACzQ==},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1321631.1321669},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Daniel2007,
  author    = {Daniel, Brett and Dig, Danny and Garcia, Kely and Marinov, Darko},
  title     = {Automated Testing of Refactoring Engines},
  booktitle = fse,
  series    = {ESEC-FSE '07},
  pages     = {185--194},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1287651},
  date      = {2007},
  doi       = {10.1145/1287624.1287651},
  isbn      = {978-1-59593-811-4},
  keywords  = {automated testing, bounded-exhaustive testing, imperative generators, refactoring engines, test data generation},
  location  = {Dubrovnik, Croatia},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Online{RefsnesData2015,
  author    = {{Refsnes Data}},
  title     = {{JavaScript} Array map() Method},
  date      = {2015},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
  url       = {http://www.w3schools.com/jsref/jsref_map.asp},
  urldate   = {2018-05-30},
}

@InProceedings{DeLucia1997,
  author        = {De Lucia, A. and Di Lucca, G.A. and Fasolino, A.R. and Guerra, P. and Petruzzelli, S.},
  title         = {Migrating legacy systems towards object-oriented platforms},
  booktitle     = icsm,
  pages         = {122},
  publisher     = {IEEE},
  abstract      = {Presents an approach to migrate legacy systems to object-oriented platforms. The process consists of six sequential phases and encompasses reverse engineering and re-engineering activities. The aim of the reverse engineering phases is to decompose programs into components implementing user interface management and components implementing application domain objects. The identification of objects is centred around a persistent data store and exploits object-oriented design metrics. Wrapping techniques are the core of the re-engineering activities. They make new systems able to exploit existing resources, thus allowing an incremental and selective translation of the identified objects},
  bdsk-url-1    = {http://doi.ieeecomputersociety.org/10.1109/ICSM.1997.624238},
  date          = {1997},
  date-added    = {2016-02-24 03:34:34 +0000},
  date-modified = {2016-02-24 03:35:20 +0000},
  journaltitle  = icsm,
  location      = {Los Alamitos, CA, USA},
  owner         = {rk1424},
  timestamp     = {2017.07.18},
}

@InProceedings{DeSutter2004,
  author    = {De Sutter, Bjorn and Tip, Frank and Dolby, Julian},
  title     = {Customization of {Java} Library Classes Using Type Constraints and Profile Information},
  booktitle = ecoop,
  pages     = {584--608},
  publisher = {Springer Berlin Heidelberg},
  date      = {2004},
  doi       = {10.1007/978-3-540-24851-4_27},
  isbn      = {978-3-540-24851-4},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.15},
}

@Article{Dean2008,
  author       = {Dean, Jeffrey and Ghemawat, Sanjay},
  title        = {{MapReduce}: Simplified Data Processing on Large Clusters},
  pages        = {107--113},
  acmid        = {1327492},
  date         = {2008},
  year         = {2008},
  doi          = {10.1145/1327452.1327492},
  issue_date   = {January 2008},
  journaltitle = {Commun. ACM},
  journal      = {Commun. ACM},
  location     = {New York, NY, USA},
  numpages     = {7},
  publisher    = {ACM},
  timestamp    = {2017.12.14},
}

@InProceedings{Dean1995,
  author        = {Dean, Jeffrey and Grove, David and Chambers, Craig},
  title         = {Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis},
  booktitle     = ecoop,
  pages         = {77--101},
  date          = {1995},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{deursen98,
  author        = {Deursen, A. Van and Moonen, L.},
  title         = {Type Inference for {COBOL} Systems},
  booktitle     = {Working Conference on Reverse Engineering},
  pages         = {220},
  publisher     = {IEEE Computer Society},
  date          = {1998},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-8186-8967-6},
  location      = {Washington, DC, USA},
}

@InProceedings{deursen99,
  author        = {Deursen, Arie Van and Moonen, Leon},
  title         = {Understanding COBOL Systems using Inferred Types},
  booktitle     = {International Workshop on Program Comprehension},
  pages         = {74},
  publisher     = {IEEE Computer Society},
  date          = {1999},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-7695-0179-6},
  location      = {Washington, DC, USA},
}

@InProceedings{devereux03,
  author        = {Devereux, B.},
  title         = {Compositional Reasoning About Aspects Using Alternating-Time Logic},
  booktitle     = foal,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QPy4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL2RldmVyZXV4LnBkZtIXCxgZV05TLmRhdGFPEQHGAAAAAAHGAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADQXAknSCsAAAAmv/sMZGV2ZXJldXgucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACb/o8XikWAAAAAAAAAAAAADAAYAAAkgAAAAAAAAAAAAAAAAAAAAB3JlbGF0ZWQAABAACAAA0FxBZwAAABEACAAAxeLJoAAAAAEAHAAmv/sAJpN4ACaGQQAb45gAG9waABvKCwACk9UAAgBWTWFjaW50b3NoIEhEOlVzZXJzOgByYWZmaToARHJvcGJveDoARG9jdW1lbnRzOgBzY2hvb2w6ADc4OF9hdTA3OgByZWxhdGVkOgBkZXZlcmV1eC5wZGYADgAaAAwAZABlAHYAZQByAGUAdQB4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBCVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvc2Nob29sLzc4OF9hdTA3L3JlbGF0ZWQvZGV2ZXJldXgucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4A0ADVAN0CpwKpAq4CuQLCAtAC1ALbAuQC6QL2AvkDCwMOAxMAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADFQ==},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/devereux.pdf},
}

@InProceedings{Dig2018,
  author       = {Danny Dig},
  title        = {The Changing Landscape of Refactoring Research in the Last Decade},
  booktitle    = {International Workshop on API Usage and Evolution},
  series       = {WAPI '18},
  pages        = {1},
  organization = {ACM/IEEE},
  publisher    = {IEEE},
  date         = {2018-06},
  doi          = {10.1145/3194793.3194800},
  eventdate    = {2018-06-02},
  isbn         = {978-1-4503-5754-8/18/06},
  location     = {Gothenburg, Sweden},
  owner        = {Raffi Khatchadourian},
  subtitle     = {Keynote},
  timestamp    = {2018.07.11},
  url          = {https://w-api.github.io/resources/wapi18_dig_refactoring.pdf},
}

@InProceedings{Dig2009,
  author        = {Dig, Danny and Marrero, John and Ernst, Michael D.},
  title         = {Refactoring sequential Java code for concurrency via concurrent libraries},
  booktitle     = icse,
  pages         = {397--407},
  publisher     = {IEEE},
  date          = {2009},
  year          = {2009},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/icse.2009.5070539},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
}

@Book{dijkstra76,
  title         = {A Discipline of Programming},
  publisher     = {Prentice-Hall},
  author        = {Dijkstra, Edsger Wybe},
  date          = {1976},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{dincklage04,
  author        = {von Dincklage, Daniel and Diwan, Amer},
  title         = {Converting {J}ava classes to use generics},
  booktitle     = oopsla,
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{donovan04,
  author        = {Donovan, Alan and Kie{\.z}un, Adam and Tschantz, Matthew S. and Ernst, Michael D.},
  title         = {Converting {Java} programs to use generic libraries},
  booktitle     = oopsla,
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Online{Downs2015,
  author    = {Tim Downs},
  title     = {{log4javascript - a JavaScript logging framework}},
  abstract  = {log4javascript, a logging framework for JavaScript based on log4j},
  date      = {2015},
  keywords  = {log4javascript, logging, JavaScript, DHTML, Ajax, log4j, debug, framework, tool, library},
  owner     = {rk1424},
  timestamp = {2018.05.30},
  url       = {http://log4javascript.org},
  urldate   = {2017-07-17},
}

@InProceedings{dufour04,
  author        = {Dufour, Bruno and Goard, Christopher and Hendren, Laurie and Moor, Oege De and Sittampalam, Ganesh and Verbrugge, Clark},
  title         = {Measuring the dynamic behaviour of {A}spect{J} programs},
  booktitle     = oopsla,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9EdWZvdXIvMjAwNC5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpuRCDIwMDQucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm5LF4pE/AAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZEdWZvdXIAEAAIAADGq3v2AAAAEQAIAADF4sl/AAAAAQAYAAqbkQAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6RHVmb3VyOjIwMDQucGRmAAAOABIACAAyADAAMAA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0R1Zm91ci8yMDA0LnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{durr05,
  author        = {Durr, Pascal and Staijen, Tom and Bergmans, Lodewijk and Aksit, Mehmet},
  title         = {Reasoning About Semantic Conflicts Between Aspects},
  booktitle     = {European Interactive Workshop on Aspects in Software},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Dyer2013,
  author    = {Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N.},
  title     = {Boa: A Language and Infrastructure for Analyzing Ultra-large-scale Software Repositories},
  booktitle = icse,
  series    = {ICSE '13},
  pages     = {422--431},
  address   = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  acmid     = {2486844},
  date      = {2013},
  isbn      = {978-1-4673-3076-3},
  location  = {San Francisco, CA, USA},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-14},
}

@InProceedings{dyer2014,
  author        = {Dyer, Robert and Rajan, Hridesh and Nguyen, Hoan Anh and Nguyen, Tien N.},
  title         = {Mining Billions of AST Nodes to Study Actual and Potential Usage of Java Language Features},
  booktitle     = icse,
  series        = {ICSE 2014},
  pages         = {779--790},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  acmid         = {2568295},
  bdsk-url-1    = {http://doi.acm.org/10.1145/2568225.2568295},
  bdsk-url-2    = {http://dx.doi.org/10.1145/2568225.2568295},
  date          = {2014},
  date-added    = {2015-09-24 12:12:05 +0000},
  date-modified = {2015-09-24 12:12:05 +0000},
  isbn          = {978-1-4503-2756-5},
  keywords      = {Java, empirical study, language feature use, software mining},
  location      = {Hyderabad, India},
  numpages      = {12},
}

@Www{EclipseFoundation2018,
  author    = {{Eclipse Foundation, Inc.}},
  title     = {{Eclipse Buildship: Eclipse Plug-ins for Gradle}},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-13},
  url       = {http://projects.eclipse.org/projects/tools.buildship},
  urldate   = {2018-07-13},
}

@InProceedings{eden03,
  author        = {Eden, Amnon H. and Kazman, Rick},
  title         = {Architecture, design, implementation},
  booktitle     = {ICSE '03: Proceedings of the 25\textsuperscript{th} International Conference on Software Engineering},
  pages         = {149--159},
  address       = {Washington, DC, USA},
  publisher     = {IEEE Computer Society},
  abstract      = {The terms architecture, design, and implementation are typically used informally in partitioning software specifications into three coarse strata of abstraction. Yet these strata are not well-defined in either research or practice, causing miscommunication and needless debate.To remedy this problem we formalize the Intension and the Locality criteria, which imply that the distinction between architecture, design, and implementation is qualitative and not merely quantitative. We demonstrate that architectural styles are intensional and non-local; that design patterns are intensional and local; and that implementations are extensional and local.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHS4uLy4uLy4uL1BhcGVycy9FZGVuLzIwMDMucGRm0hcLGBlXTlMuZGF0YU8RAZAAAAAAAZAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbkwgyMDAzLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpuUxeKRPwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAERWRlbgAQAAgAAMare/YAAAARAAgAAMXiyX8AAAABABgACpuTAAqbPgAKkacACpGkAAgAoQAAkOcAAgA/TWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpFZGVuOjIwMDMucGRmAAAOABIACAAyADAAMAAzAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAyVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0VkZW4vMjAwMy5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCuALMAuwJPAlECVgJhAmoCeAJ8AoMCjAKRAp4CoQKzArYCuwAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAK9},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-7695-1877-X},
  location      = {Portland, Oregon},
}

@Misc{DoE2016,
  author       = {{US Department of Education Office of Postsecondary Education}},
  title        = {List of {FY} 2016 Eligible {Hispanic-Serving Institutions}},
  note         = {(Accessed 7/7/2017)},
  date         = {2016},
  organization = {US Department of Education},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.11},
  url          = {http://www2.ed.gov/about/offices/list/ope/idues/hsi-eligibles-2016.pdf},
}

@InProceedings{eichberg04,
  author        = {Eichberg, Michael and Mezini, Mira and Ostermann, Klaus},
  title         = {Pointcuts as Functional Queries},
  booktitle     = {APLAS},
  abstract      = {Most aspect-oriented languages provide only a fixed, built-in set of pointcut designators whose denotation is only described informally. As a consequence, these languages do not provide operations to manipulate or reason about pointcuts beyond weaving. In this paper, we investigate the usage of the functional query language XQuery for the specification of pointcuts. Due to its abstraction and module facilities, XQuery enables powerful composition and reusability mechanisms for pointcuts.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIS4uLy4uLy4uL1BhcGVycy9FaWNoYmVyZy8yMDA0LnBkZtIXCxgZV05TLmRhdGFPEQGcAAAAAAGcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm5UIMjAwNC5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqblsXikT8AAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAACEVpY2hiZXJnABAACAAAxqt79gAAABEACAAAxeLJfwAAAAEAGAAKm5UACps+AAqRpwAKkaQACAChAACQ5wACAENNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOkVpY2hiZXJnOjIwMDQucGRmAAAOABIACAAyADAAMAA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0VpY2hiZXJnLzIwMDQucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsgC3AL8CXwJhAmYCcQJ6AogCjAKTApwCoQKuArECwwLGAssAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACzQ==},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{eidorff99,
  author        = {Eidorff, Peter Harry and Henglein, Fritz and Mossin, Christian and Niss, Henning and S{\o}rensen, Morten Heine and Tofte, Mads},
  title         = {AnnoDomini: From Type Theory to Year 2000 Conversion Tool},
  booktitle     = popl,
  pages         = {1--14},
  address       = {New York, NY, USA},
  publisher     = {ACM Press},
  bdsk-url-1    = {http://doi.acm.org/10.1145/292540.292543},
  date          = {1999},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/292540.292543},
  isbn          = {1-58113-095-3},
  location      = {San Antonio, Texas, United States},
}

@Article{Eigenmann1998,
  author        = {Eigenmann, Rudolf and Hoeflinger, Jay and Padua, David},
  title         = {On the automatic parallelization of the Perfect Benchmarks (R)},
  volume        = {9},
  number        = {1},
  pages         = {5--23},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {1998},
  journaltitle  = {IEEE Transactions on Parallel and Distributed Systems},
  owner         = {Raffi Khatchadourian},
  publisher     = {IEEE},
  timestamp     = {2017.12.08},
}

@InProceedings{Ernst2003,
  author    = {Ernst, Michael D},
  title     = {Static and dynamic analysis: Synergy and duality},
  booktitle = {WODA 2003: ICSE Workshop on Dynamic Analysis},
  pages     = {24--27},
  date      = {2003},
  owner     = {rk1424},
  timestamp = {2017.07.13},
}

@InProceedings{Faehndrich2003,
  author    = {F\"{a}hndrich, Manuel and Leino, K. Rustan M.},
  title     = {Declaring and Checking Non-null Types in an Object-oriented Language},
  booktitle = oopsla,
  series    = {OOPSLA '03},
  pages     = {302--312},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {949332},
  date      = {2003},
  doi       = {10.1145/949305.949332},
  file      = {:Faehndrich2003.pdf:PDF},
  isbn      = {1-58113-712-5},
  keywords  = {Java, c\#, non-null types, null references, type system},
  location  = {Anaheim, California, USA},
  numpages  = {11},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.15},
}

@Misc{Fasoli2016,
  author    = {Fasoli, Gianpaolo and Farrugia, Augustin and Govind, Apoorva and Khatchadourian, Raffi},
  title     = {Controlling use of shared content items based on client device},
  date      = {2016-01},
  number    = {20160019375},
  owner     = {rk1424},
  timestamp = {2017.07.18},
  url       = {https://www.google.com/patents/US20160019375},
}

@Article{fawcett06,
  author        = {Fawcett, T.},
  title         = {An introduction to ROC analysis},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Pattern Recognition Letters},
}

@InProceedings{feng09,
  author               = {Feng, Xinyu},
  title                = {Local rely-guarantee reasoning},
  booktitle            = popl,
  pages                = {315--327},
  address              = {New York, NY, USA},
  publisher            = {ACM},
  abstract             = {Rely-Guarantee reasoning is a well-known method for verification of shared-variable concurrent programs. However, it is difficult for users to define rely/guarantee conditions, which specify threads' behaviors over the whole program state. Recent efforts to combine Separation Logic with Rely-Guarantee reasoning have made it possible to hide thread-local resources, but the shared resources still need to be globally known and specified. This greatly limits the reuse of verified program modules.},
  bdsk-file-1          = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHS4uLy4uLy4uL1BhcGVycy9GZW5nLzIwMDkucGRm0hcLGBlXTlMuZGF0YU8RAZAAAAAAAZAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqblwgyMDA5LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpuZxeKRQAAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAERmVuZwAQAAgAAMare/YAAAARAAgAAMXiyYAAAAABABgACpuXAAqbPgAKkacACpGkAAgAoQAAkOcAAgA/TWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpGZW5nOjIwMDkucGRmAAAOABIACAAyADAAMAA5AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAyVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0ZlbmcvMjAwOS5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCuALMAuwJPAlECVgJhAmoCeAJ8AoMCjAKRAp4CoQKzArYCuwAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAK9},
  bdsk-url-1           = {http://dx.doi.org/10.1145/1480881.1480922},
  citeulike-article-id = {4036239},
  date                 = {2009},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {10.1145/1480881.1480922},
  isbn                 = {978-1-60558-379-2},
  keywords             = {concurrent, guarantee, logic, rely, separation},
  location             = {Savannah, GA, USA},
  posted-at            = {2009-02-11 16:58:07},
}

@Article{fickas92,
  author        = {Fickas, Stephen and Helm, B. Robert},
  title         = {Knowledge Representation and Reasoning in the Design of Composite Systems},
  abstract      = {The design process that spans the gap between the requirements acquisition process and the implementation process, in which the basic architecture of a system is defined, and functions are allocated to software, hardware, and human agents. is studied. The authors call this process composite system design. The goal is an interactive model of composite system design incorporating deficiency-driven design, formal analysis, incremental design and rationalization, and design reuse. They discuss knowledge representations and reasoning techniques that support these goals for the product (composite system) that they are designing, and for the design process. To evaluate the model, the authors report on its use to reconstruct the design of two existing composite systems rationally.},
  bdsk-url-1    = {http://dx.doi.org.proxy.lib.ohio-state.edu/10.1109/32.142870},
  date          = {1992},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {IEEE Trans. Softw. Eng.},
}

@InProceedings{figueiredo08,
  author        = {Figueiredo, Eduardo and Cacho, Nelio and Sant'Anna, Claudio and Monteiro, Mario and Kulesza, Uira and Garcia, Alessandro and Soares, Sergio and Ferrari, Fabiano and Khan, Safoora and Filho, Fernando Castor and Dantas, Francisco},
  title         = {Evolving software product lines with aspects: an empirical study on design stability},
  booktitle     = icse,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1368088.1368124},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1368088.1368124},
  isbn          = {978-1-60558-079-1},
}

@InProceedings{figueiredo08_abv,
  author        = {Figueiredo, Eduardo and et al.},
  title         = {Evolving software product lines with aspects: an empirical study on design stability},
  booktitle     = icse,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1368088.1368124},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1368088.1368124},
  isbn          = {978-1-60558-079-1},
}

@InProceedings{filman00,
  author        = {Filman, R. and Friedman, D.},
  title         = {Aspect-Oriented Programming is Quantification and Obliviousness},
  booktitle     = {Advanced Separation of Concerns},
  bdsk-url-1    = {citeseer.ist.psu.edu/filman00aspectoriented.html},
  date          = {2000},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Fink2008,
  author       = {Fink, Stephen J. and Yahav, Eran and Dor, Nurit and Ramalingam, G. and Geay, Emmanuel},
  title        = {Effective Typestate Verification in the Presence of Aliasing},
  volume       = {17},
  number       = {2},
  pages        = {91--934},
  issn         = {1049-331X},
  acmid        = {1348255},
  articleno    = {9},
  date         = {2008-05},
  doi          = {10.1145/1348250.1348255},
  issue_date   = {April 2008},
  journaltitle = tosem,
  keywords     = {Alias analysis, program verification, typestate},
  location     = {New York, NY, USA},
  numpages     = {34},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2017.12.14},
}

@InProceedings{flanagan-qadeer-02,
  author    = {Flanagan, Cormac and Qadeer, Shaz},
  title     = {Predicate Abstraction for Software Verification},
  booktitle = popl,
  date      = {2002},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.06.23},
}

@Article{Fluri2007,
  author       = {Fluri, Beat and Wuersch, Michael and PInzger, Martin and Gall, Harald},
  title        = {Change Distilling: Tree Differencing for Fine-Grained Source Code Change Extraction},
  volume       = {33},
  number       = {11},
  pages        = {725--743},
  issn         = {0098-5589},
  acmid        = {1314081},
  date         = {2007-11},
  doi          = {10.1109/TSE.2007.70731},
  issue_date   = {November 2007},
  journaltitle = tse,
  keywords     = {Source code change extraction, Source code change extraction, tree differencing algorithms, software repositories, software evolution analysis, software evolution analysis, software repositories, tree differencing algorithms},
  location     = {Piscataway, NJ, USA},
  numpages     = {19},
  owner        = {Raffi Khatchadourian},
  publisher    = {IEEE Press},
  timestamp    = {2017.07.06},
}

@Article{forgy82,
  author        = {Forgy, Charles L.},
  title         = {Rete: a fast algorithm for the many pattern/many object pattern match problem},
  pages         = {324--341},
  date          = {1982},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Artificial Intelligence},
  keywords      = {Rete algorithm matching pattern},
}

@Online{EclipseFoundation2016,
  author       = {{Eclipse Foundation}},
  title        = {{eclipse.jdt.ui/RefactoringTest.java at master~\textbullet~eclipse/eclipse.jdt.ui~\textbullet~GitHub}},
  year         = {2016},
  date         = {2016-12-19},
  organization = {{Eclipse Foundation}},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.15},
  url          = {http://github.com/eclipse/eclipse.jdt.ui/blob/master/org.eclipse.jdt.ui.tests.refactoring/test%20cases/org/eclipse/jdt/ui/tests/refactoring/RefactoringTest.java},
  urldate      = {2017-07-02},
}

@Online{EclipseFoundation2017a,
  author    = {{Eclipse Foundation}},
  title     = {Eclipse desktop and web {IDEs}},
  date      = {2017-07},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.15},
  url       = {http://eclipse.org/ide},
  urldate   = {2017-07-15},
}

@Article{foundation2012,
  author        = {{National Science Foundation}},
  title         = {Women, Minorities, and Persons with Disabilities in Science and Engineering},
  number        = {NSF 13-304},
  date          = {2014-05},
  date-added    = {2015-09-24 14:05:59 +0000},
  date-modified = {2015-09-29 21:16:58 +0000},
  journaltitle  = {Division of Science Resource Statistics, special tabulations of IPEDS Completion Survey},
  location      = {Arlington, VA},
}

@Url{NSF2018,
  author    = {{National Science Foundation}},
  title     = {NSF Award Search on Refactoring},
  year      = {2018},
  date      = {2018-07-11},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.07.11},
  url       = {https://www.nsf.gov/awardsearch/simpleSearchResult?queryText=refactoring&ActiveAwards=true&ExpiredAwards=true},
  urldate   = {2018-07-11},
}

@Online{ASF2015,
  author    = {{The Apache Software Foundation}},
  title     = {Collections},
  date      = {2015},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
  url       = {http://commons.apache.org/proper/commons-collections},
  urldate   = {2016-11-15},
}

@Online{ASF2015a,
  author    = {{The Apache Software Foundation}},
  title     = {IterableUtils (Apache Commons Collections 4.1 API)},
  date      = {2015},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
  url       = {http://commons.apache.org/proper/commons-collections/apidocs/org/apache/commons/collections4/IterableUtils.html#find(java.lang.Iterable,%20org.apache.commons.collections4.Predicate)},
  urldate   = {2018-05-30},
}

@Online{ASF2016a,
  author    = {{The Apache Software Foundation}},
  title     = {Apache {S}park\texttrademark--Lightning-Fast Cluster Computing},
  date      = {2017},
  owner     = {rk1424},
  timestamp = {2017.07.12},
  url       = {http://spark.apache.org},
  urldate   = {2017-06-23},
}

@Online{ASF2016,
  author    = {{The Apache Software Foundation}},
  title     = {Apache\texttrademark~{H}adoop\textsuperscript{\textregistered}},
  date      = {2016},
  owner     = {rk1424},
  timestamp = {2017.07.12},
  url       = {http://hadoop.apache.org},
  urldate   = {2016-11-04},
}

@Online{ASF2017,
  author    = {{The Apache Software Foundation}},
  title     = {{Apache Log4j 2}},
  date      = {2017-04},
  owner     = {rk1424},
  timestamp = {2017.07.17},
  url       = {http://logging.apache.org/log4j/2.x},
  urldate   = {2017-07-17},
}

@Online{ASF2017a,
  author    = {{The Apache Software Foundation}},
  title     = {{Logger (Apache Log4j API 2.8.2 API)}},
  date      = {2017-04},
  owner     = {rk1424},
  timestamp = {2017.07.17},
  url       = {http://logging.apache.org/log4j/2.x/log4j-api/apidocs/org/apache/logging/log4j/Logger.html#info-org.apache.logging.log4j.Marker-org.apache.logging.log4j.util.MessageSupplier-},
  urldate   = {2017-07-17},
}

@Misc{EclipseFoundation2017,
  author    = {{The Eclipse Foundation}},
  title     = {{Eclipse} desktop \& web {IDE}s},
  note      = {(Accessed on 07/06/2017)},
  abstract  = {Eclipse is probably best known as a Java IDE, but it is more: it is an IDE framework, a tools framework, an open source project, a community, an eco-system, and a foundation.},
  date      = {2017},
  keywords  = {eclipse,project,plug-ins,plugins,java,ide,swt,refactoring,free java ide,tools,platform,open source,development environment,development,ide},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
  url       = {http://eclipse.org/ide},
}

@Book{Fowler1999,
  title     = {Refactoring: Improving the Design of Existing Code},
  publisher = addison,
  author    = {Martin Fowler},
  isbn      = {0-201-48567-2},
  date      = {1999},
  year      = {1999},
  location  = {Boston, MA, USA},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
}

@Online{Fowler2008,
  author    = {Martin Fowler},
  title     = {CodeSmell},
  year      = {2008},
  date      = {2008-02-09},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-09},
  url       = {http://martinfowler.com/bliki/CodeSmell.html},
  urldate   = {2018-07-09},
}

@Book{Fox2013,
  title     = {Engineering Software as a Service: An Agile Approach Using Cloud Computing},
  publisher = {Strawberry Canyon LLC},
  year      = {2013},
  author    = {Armando Fox and David Patterson},
  editor    = {Samuel Joseph},
  edition   = {1},
  isbn      = {978-0984881246},
  date      = {2013-04-16},
  owner     = {Raffi Khatchadourian},
  pagetotal = {500},
  timestamp = {2018-07-13},
}

@Book{Fox2014,
  title     = {Parallel computing works!},
  publisher = {Morgan Kaufmann},
  author    = {Fox, Geoffrey C and Williams, Roy D and Messina, Guiseppe C},
  date      = {2014},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.08},
}

@InProceedings{Franklin2013,
  author        = {Franklin, Lyle and Gyori, Alex and Lahoda, Jan and Dig, Danny},
  title         = {LAMBDAFICATOR: from imperative to functional programming through automated refactoring},
  booktitle     = icse,
  pages         = {1287--1290},
  organization  = {IEEE Press},
  date          = {2013},
  date-added    = {2015-09-24 12:12:05 +0000},
  date-modified = {2015-09-24 12:12:05 +0000},
}

@Article{freisleben1995automated,
  author        = {Freisleben, Bernd and Kielmann, Thilo},
  title         = {Automated transformation of sequential divide-and-conquer algorithms into parallel programs},
  volume        = {14},
  pages         = {579--596},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {1995},
  journaltitle  = {Computers and Artificial Intelligence},
  owner         = {Raffi Khatchadourian},
  publisher     = {TRANSLIBRIS},
  timestamp     = {2017.12.08},
}

@InProceedings{Fuhrer2005,
  author        = {Fuhrer, Robert and Tip, Frank and Kie{\.z}un, Adam and Dolby, Julian and Keller, Markus},
  title         = {Efficiently refactoring {J}ava applications to use generic libraries},
  booktitle     = ecoop,
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Gaitani2015,
  author       = {Gaitani, Maria Anna G. and Zafeiris, Vassilis E. and Diamantidis, N.A. and Giakoumakis, E.A.},
  title        = {Automated Refactoring to the Null Object Design Pattern},
  volume       = {59},
  number       = {C},
  pages        = {33--52},
  issn         = {0950-5849},
  acmid        = {2729408},
  date         = {2015-03},
  doi          = {10.1016/j.infsof.2014.10.010},
  issue_date   = {March 2015},
  journaltitle = {Inf. Softw. Technol.},
  keywords     = {Design patterns, Null Object, Null checks, Optional fields, Refactoring},
  location     = {Newton, MA, USA},
  numpages     = {20},
  owner        = {Raffi Khatchadourian},
  publisher    = {Butterworth-Heinemann},
  timestamp    = {2017.07.06},
}

@Book{Gamma1995,
  title         = {Design patterns: elements of reusable object-oriented software},
  publisher     = addison,
  author        = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
  date          = {1995},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Boston, MA, USA},
}

@Article{Garcia2014,
  author       = {Garcia, Ronald and Tanter, \'{E}ric and Wolff, Roger and Aldrich, Jonathan},
  title        = {Foundations of Typestate-Oriented Programming},
  volume       = {36},
  number       = {4},
  pages        = {12:1--12:44},
  issn         = {0164-0925},
  acmid        = {2629609},
  articleno    = {12},
  date         = {2014-10},
  doi          = {10.1145/2629609},
  issue_date   = {October 2014},
  journaltitle = toplas,
  keywords     = {Access permissions, gradual typing, types, typestates},
  location     = {New York, NY, USA},
  numpages     = {44},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2018.05.28},
}

@InProceedings{Ge2014,
  author    = {Ge, Xi and Murphy-Hill, Emerson},
  title     = {Manual Refactoring Changes with Automated Refactoring Validation},
  booktitle = icse,
  series    = {ICSE 2014},
  pages     = {1095--1105},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2568280},
  date      = {2014},
  doi       = {10.1145/2568225.2568280},
  isbn      = {978-1-4503-2756-5},
  keywords  = {IDE, Refactoring, Restructuring, Tool},
  location  = {Hyderabad, India},
  numpages  = {11},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Online{GitHub2017,
  author    = {{GitHub, Inc.}},
  title     = {{GitHub}: The world's leading software development platform},
  date      = {2017-07},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.15},
  url       = {http://github.com},
  urldate   = {2017-07-15},
}

@Online{GitHub2017a,
  author    = {{GitHub, Inc.}},
  title     = {Search~\textbullet~``import java.util.stream''},
  date      = {2017-12},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
  url       = {http://git.io/vbV2V},
  urldate   = {2017-12-09},
}

@Online{Goers2017,
  author       = {Ralph Goers and Gary Gregory},
  title        = {{Log4j} 2 {API} -- {Java} 8 lambda support for lazy logging},
  year         = {2017},
  date         = {2017-04-02},
  organization = {{The Apache Software Foundation}},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.06},
  url          = {http://logging.apache.org/log4j/2.0/manual/api.html#Java_8_lambda_support_for_lazy_logging},
  urldate      = {2017-07-06},
}

@TechReport{Goetz2011,
  author        = {Goetz, Brian},
  title         = {Interface evolution via virtual extensions methods},
  institution   = {Oracle Corporation},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QKC4uLy4uL0dvb2dsZSBEcml2ZS9QYXBlcnMvR29ldHovMjAxMS5wZGbSFwsYGVdOUy5kYXRhTxEBigAAAAABigACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAA0FwJJ0grAAAEnO4kCDIwMTEucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASgQpPT48DBAAAAAAAAAAAAAgAEAAAJIAAAAAAAAAAAAAAAAAAAAAVHb2V0egAAEAAIAADQXEFnAAAAEQAIAADT4/kBAAAAAQAUBJzuJAAr8cMAG+Z5ABvKCwACk9UAAgBATWFjaW50b3NoIEhEOlVzZXJzOgByYWZmaToAR29vZ2xlIERyaXZlOgBQYXBlcnM6AEdvZXR6OgAyMDExLnBkZgAOABIACAAyADAAMQAxAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAuVXNlcnMvcmFmZmkvR29vZ2xlIERyaXZlL1BhcGVycy9Hb2V0ei8yMDExLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALkAvgDGAlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  date          = {2011-06},
  date-added    = {2016-06-15 14:04:02 +0000},
  date-modified = {2016-06-15 14:06:05 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
  url           = {http://cr.openjdk.java.net/~briangoetz/lambda/Defender%20Methods%20v4.pdf},
}

@TechReport{Goetz2012,
  author        = {Goetz, Brian and Field, R},
  title         = {Featherweight Defenders: A formal model for virtual extension methods in Java},
  institution   = {Oracle Corporation},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QKC4uLy4uL0dvb2dsZSBEcml2ZS9QYXBlcnMvR29ldHovMjAxMi5wZGbSFwsYGVdOUy5kYXRhTxEBigAAAAABigACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAA0FwJJ0grAAAEnO4kCDIwMTIucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASc7OXT2PmsAAAAAAAAAAAAAgAEAAAJIAAAAAAAAAAAAAAAAAAAAAVHb2V0egAAEAAIAADQXEFnAAAAEQAIAADT2THsAAAAAQAUBJzuJAAr8cMAG+Z5ABvKCwACk9UAAgBATWFjaW50b3NoIEhEOlVzZXJzOgByYWZmaToAR29vZ2xlIERyaXZlOgBQYXBlcnM6AEdvZXR6OgAyMDEyLnBkZgAOABIACAAyADAAMQAyAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAuVXNlcnMvcmFmZmkvR29vZ2xlIERyaXZlL1BhcGVycy9Hb2V0ei8yMDEyLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALkAvgDGAlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  date          = {2012},
  date-added    = {2016-06-15 13:59:48 +0000},
  date-modified = {2016-08-26 20:31:08 +0000},
  owner         = {Raffi Khatchadourian},
  pages         = {9},
  timestamp     = {2017.07.05},
  url           = {http://cr.openjdk.java.net/~briangoetz/lambda/featherweight-defenders.pdf},
  volume        = {27},
}

@InBook{Goetz2006,
  chapter       = {2.4},
  title         = {Java Concurrency in Practice},
  publisher     = addison,
  author        = {Goetz, Brian and Peierls, Tim and Bloch, Joshua and Bowbeer, Joseph and David Holmes and, Doug Lea},
  date          = {2006},
  date-added    = {2016-07-28 19:46:35 +0000},
  date-modified = {2016-07-28 19:51:58 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
}

@InProceedings{goldman06,
  author        = {Goldman, M. and Katz, S.},
  title         = {Modular Generic verification of {LTL} Properties for Aspects},
  booktitle     = foal,
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Book{Gosling2014,
  title     = {The Java Language Specification},
  publisher = addison,
  year      = {2014},
  author    = {Gosling, James and Joy, Bill and Jr., Guy L. Steele and Bracha, Gilad and Buckley, Alex},
  edition   = {8},
  isbn      = {9780133900699},
  date      = {2014-05-06},
  ean       = {9780133900699},
  owner     = {Raffi Khatchadourian},
  pagetotal = {792},
  timestamp = {2017.07.06},
}

@Book{gosling05,
  title         = {Java\texttrademark Language Specification (3\textsuperscript{rd} Edition)},
  publisher     = addison,
  author        = {Gosling, James and Joy, Bill and Steele, Guy and Bracha, Gilad},
  isbn          = {0321246780},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{gotel94,
  author        = {Gotel, O.C.Z. and Finkelstein, C.W.},
  title         = {An analysis of the requirements traceability problem},
  booktitle     = req,
  abstract      = {Investigates and discusses the underlying nature of the requirements traceability problem. Our work is based on empirical studies, involving over 100 practitioners, and an evaluation of current support. We introduce the distinction between pre-requirements specification (pre-RS) traceability and post-requirements specification (post-RS) traceability to demonstrate why an all-encompassing solution to the problem is unlikely, and to provide a framework through which to understand its multifaceted nature. We report how the majority of the problems attributed to poor requirements traceability are due to inadequate pre-RS traceability and show the fundamental need for improvements. We present an analysis of the main barriers confronting such improvements in practice, identify relevant areas in which advances have been (or can be) made, and make recommendations for research},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHi4uLy4uLy4uL1BhcGVycy9Hb3RlbC8xOTk0LnBkZtIXCxgZV05TLmRhdGFPEQGUAAAAAAGUAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm5oIMTk5NC5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqbm8XikUAAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAABUdvdGVsAAAQAAgAAMare/YAAAARAAgAAMXiyYAAAAABABgACpuaAAqbPgAKkacACpGkAAgAoQAAkOcAAgBATWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpHb3RlbDoxOTk0LnBkZgAOABIACAAxADkAOQA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0dvdGVsLzE5OTQucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAK8AtAC8AlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  bdsk-url-1    = {http://dx.doi.org/10.1109/ICRE.1994.292398},
  date          = {1994},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/ICRE.1994.292398},
  keywords      = {systems analysispost-requirements specification traceability, pre-requirements specification traceability, requirements engineering practice, requirements traceability problem analysis, requirements traceability tools},
}

@InProceedings{gravley96,
  author        = {Gravley, John M. and Lakhotia, Arun},
  title         = {Identifying Enumeration Types Modeled with Symbolic Constants},
  booktitle     = {Working Conference on Reverse Engineering},
  pages         = {227},
  publisher     = {IEEE Computer Society},
  date          = {1996},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-8186-7674-4},
  location      = {Washington, DC, USA},
}

@InProceedings{Gravley1996,
  author        = {Gravley, John M. and Lakhotia, Arun},
  title         = {Identifying Enumeration Types Modeled with Symbolic Constants},
  booktitle     = {Working Conference on Reverse Engineering},
  pages         = {227},
  publisher     = {IEEE Computer Society},
  date          = {1996},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-8186-7674-4},
  location      = {Washington, DC, USA},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2018.05.28},
}

@InProceedings{greenwood07,
  author        = {Greenwood, Phil and Bartolomei, Thiago T. and Figueiredo, Eduardo and D{\'o}sea, Marcos and Garcia, Alessandro F. and Cacho, N{\'e}lio and Sant'Anna, Cl{\'a}udio and Soares, S{\'e}rgio and Borba, Paulo and Kulesza, Uir{\'a} and Rashid, Awais},
  title         = {On the Impact of Aspectual Decompositions on Design Stability: An Empirical Study},
  booktitle     = ecoop,
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Greenwood2009,
  author    = {Greenwood, Phil and Rashid, Awais and Khatchadourian, Raffi},
  title     = {Contributing Factors to Pointcut Fragility},
  booktitle = {Proceedings of the 3\textsuperscript{rd} International Workshop on Assessment of Contemporary Modularization Techniques (ACoM '09) at the 24\textsuperscript{th} ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA '09)},
  pages     = {19--24},
  publisher = {ACM},
  date      = {2009-10},
  location  = {Orlando, Florida, USA},
  owner     = {rk1424},
  timestamp = {2017.07.18},
}

@Book{Griebl2004,
  title         = {Automatic parallelization of loop programs for distributed memory architectures},
  publisher     = {Univ. Passau},
  author        = {Griebl, Martin},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2004},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Article{griswold06,
  author        = {Griswold, W. and Sullivan, Kevin and Song, Y. and Shonle, M. and Tewari, N. and Cai, Y. and Rajan, H.},
  title         = {Modular Software Design with Crosscutting Interfaces},
  volume        = {23},
  number        = {1},
  pages         = {51--60},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {IEEE Softw.},
}

@Misc{NYJSIG2017,
  author    = {{New York Java Special Interest Group}},
  title     = {{New York Java User Group}},
  note      = {(Accessed 07/07/2017)},
  date      = {2017},
  keywords  = {Java, JUG, NYJavaSIG, nyjava, javasig},
  timestamp = {2017.07.07},
  url       = {http://www.javasig.com},
}

@Www{GSTEM2018,
  author    = {NYU GSTEM},
  title     = {NYU GSTEM--The NYU Courant Institute Girls' Science, Technology, Engineering, and Mathematics Summer Program},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-13},
  url       = {http://cims.nyu.edu/gstem},
  urldate   = {2018-07-13},
}

@Article{Gu2014,
  author        = {Gu, Rong and Yang, Xiaoliang and Yan, Jinshuang and Sun, Yuanhao and Wang, Bing and Yuan, Chunfeng and Huang, Yihua},
  title         = {{SHadoop}: Improving {MapReduce} performance by optimizing job execution mechanism in {Hadoop} clusters},
  volume        = {74},
  number        = {3},
  pages         = {2166--2179},
  issn          = {0743-7315},
  abstract      = {Abstract As a widely-used parallel computing framework for big data processing today, the Hadoop MapReduce framework puts more emphasis on high-throughput of data than on low-latency of job execution. However, today more and more big data applications developed with MapReduce require quick response time. As a result, improving the performance of MapReduce jobs, especially for short jobs, is of great significance in practice and has attracted more and more attentions from both academia and industry. A lot of efforts have been made to improve the performance of Hadoop from job scheduling or job parameter optimization level. In this paper, we explore an approach to improve the performance of the Hadoop MapReduce framework by optimizing the job and task execution mechanism. First of all, by analyzing the job and task execution mechanism in MapReduce framework we reveal two critical limitations to job execution performance. Then we propose two major optimizations to the MapReduce job and task execution mechanisms: first, we optimize the setup and cleanup tasks of a MapReduce job to reduce the time cost during the initialization and termination stages of the job; second, instead of adopting the loose heartbeat-based communication mechanism to transmit all messages between the JobTracker and TaskTrackers, we introduce an instant messaging communication mechanism for accelerating performance-sensitive task scheduling and execution. Finally, we implement SHadoop, an optimized and fully compatible version of Hadoop that aims at shortening the execution time cost of MapReduce jobs, especially for short jobs. Experimental results show that compared to the standard Hadoop, \{SHadoop\} can achieve stable performance improvement by around 25\% on average for comprehensive benchmarks without losing scalability and speedup. Our optimization work has passed a production-level test in Intel and has been integrated into the Intel Distributed Hadoop (IDH). To the best of our knowledge, this work is the first effort that explores on optimizing the execution mechanism inside map/reduce tasks of a job. The advantage is that it can complement job scheduling optimizations to further improve the job execution performance.},
  date          = {2014},
  date-added    = {2016-10-18 16:24:17 +0000},
  date-modified = {2016-10-18 16:24:20 +0000},
  doi           = {10.1016/j.jpdc.2013.10.003},
  journaltitle  = {Journal of Parallel and Distributed Computing},
  keywords      = {Cloud computing},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
}

@InProceedings{gudmundson01,
  author        = {Gudmundson, S. and Kiczales, Gregor},
  title         = {Addressing Practical Software Development Issues in AspectJ with a Pointcut Interface},
  booktitle     = {Advanced Separation of Concerns},
  date          = {2001},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Gupta2000,
  author        = {Gupta, Manish and Mukhopadhyay, Sayak and Sinha, Navin},
  title         = {Automatic parallelization of recursive procedures},
  volume        = {28},
  number        = {6},
  pages         = {537--562},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2000},
  journaltitle  = {International Journal of Parallel Programming},
  owner         = {Raffi Khatchadourian},
  publisher     = {Springer},
  timestamp     = {2017.12.08},
}

@InProceedings{gybels03,
  author        = {Gybels, Kris and Brichau, Johan},
  title         = {Arranging language features for more robust pattern-based crosscuts},
  booktitle     = aosd,
  abstract      = {A crosscut language is used to describe at which points an aspect crosscuts a program. An important issue is how these points can be captured using the crosscut language without introducing tight coupling between the aspect and the program. Such tight coupling harms the evolvability of the program and the reusability of the aspect. Current pattern-based capturing already offers a certain decoupling between aspects and the program but it may still suffer from what we call the arranged pattern problem. In this paper, we discuss this problem and present a logic-based crosscut language from which we distill what language features are beneficial to avoid this problem.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9HeWJlbHMvMjAwMy5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpueCDIwMDMucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm5/F4pFAAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZHeWJlbHMAEAAIAADGq3v2AAAAEQAIAADF4smAAAAAAQAYAAqbngAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6R3liZWxzOjIwMDMucGRmAAAOABIACAAyADAAMAAzAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0d5YmVscy8yMDAzLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  bdsk-url-1    = {http://doi.acm.org/10.1145/643603.643610},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{gybels04,
  author        = {Gybels, Kris and Kellens, Andy},
  title         = {An Experiment in Using Inductive Logic Programming to Uncover Pointcuts},
  booktitle     = {First European Interactive Workshop on Aspects in Software},
  abstract      = {The subject of this paper is the transformation from pre-AOP legacy software to aspect-oriented software. To factor out crosscutting concerns from such software we propose the use of techniques to automate the task of uncovering pointcuts. We discuss problems inherent in this task and propose the use of inductive reasoning techniques for the automation. We apply such a technique to one kind of aspects: unique methods which can be found in a standard Smalltalk image.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9HeWJlbHMvMjAwNC5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpueCDIwMDQucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm6DF4pFAAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZHeWJlbHMAEAAIAADGq3v2AAAAEQAIAADF4smAAAAAAQAYAAqbngAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6R3liZWxzOjIwMDQucGRmAAAOABIACAAyADAAMAA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0d5YmVscy8yMDA0LnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  description   = {Some references related to aspect mining},
  keywords      = {imported},
}

@InProceedings{Gyori2013,
  author        = {Gyori, Alex and Franklin, Lyle and Dig, Danny and Lahoda, Jan},
  title         = {Crossing the Gap from Imperative to Functional Programming Through Refactoring},
  booktitle     = fse,
  series        = {ESEC/FSE 2013},
  pages         = {543--553},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  acmid         = {2491461},
  date          = {2013},
  date-added    = {2015-09-24 12:12:05 +0000},
  date-modified = {2015-09-24 12:12:05 +0000},
  doi           = {10.1145/2491411.2491461},
  isbn          = {978-1-4503-2237-9},
  keywords      = {Fucntional Programming, Imperative Programming, Java 8, Lambda Expressions},
  location      = {Saint Petersburg, Russia},
  numpages      = {11},
}

@Article{Harrison1989,
  author        = {Harrison, Williams Ludwell},
  title         = {The interprocedural analysis and automatic parallelization of Scheme programs},
  volume        = {2},
  number        = {3-4},
  pages         = {179--396},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {1989},
  journaltitle  = {Lisp and Symbolic Computation},
  owner         = {Raffi Khatchadourian},
  publisher     = {Springer},
  timestamp     = {2017.12.08},
}

@InProceedings{hassan04,
  author               = {Hassan, Ahmed E. and Holt, Richard C.},
  title                = {Predicting Change Propagation in Software Systems},
  booktitle            = icsm,
  pages                = {284--293},
  publisher            = {IEEE Computer Society},
  abstract             = {Software systems contain entities, such as functions and variables, which are related to each other. As a software system evolves to accommodate new features and repair bugs, changes occur to these entities. Developers must ensure that related entities are updated to be consistent with these changes. This paper addresses the question: How does a change in one source code entity propagate to other entities? We propose several heuristics to predict change propagation. We present a framework to measure the performance of our proposed heuristics. We validate our results empirically using data obtained by analyzing the development history for five large open source software systems.},
  bdsk-url-1           = {http://portal.acm.org/citation.cfm?id=1021436},
  citeulike-article-id = {5208331},
  citeulike-linkout-0  = {http://portal.acm.org/citation.cfm?id=1021436},
  date                 = {2004},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  isbn                 = {0-7695-2213-0},
  keywords             = {change, propagation},
  location             = {Washington, DC, USA},
  posted-at            = {2009-07-20 16:31:29},
}

@Article{havelund2000,
  author        = {Havelund, Klaus and Pressburger, Thomas},
  title         = {Model checking java programs using java pathfinder},
  volume        = {2},
  number        = {4},
  pages         = {366--381},
  date          = {2000},
  date-added    = {2016-09-27 17:01:25 +0000},
  date-modified = {2016-09-27 17:01:25 +0000},
  journaltitle  = {International Journal on Software Tools for Technology Transfer},
  owner         = {Raffi Khatchadourian},
  publisher     = {Springer},
  timestamp     = {2017.06.23},
}

@InProceedings{Hayashi2015,
  author    = {Hayashi, Akihiro and Ishizaki, Kazuaki and Koblents, Gita and Sarkar, Vivek},
  title     = {Machine-Learning-based Performance Heuristics for Runtime CPU/GPU Selection},
  booktitle = pppj,
  series    = {PPPJ '15},
  pages     = {27--36},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2807429},
  date      = {2015},
  doi       = {10.1145/2807426.2807429},
  isbn      = {978-1-4503-3712-0},
  keywords  = {GPU, JIT Compiler, Java, Performance heuristics, Runtime, Supervised machine-learning},
  location  = {Melbourne, FL, USA},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
}

@InProceedings{henzinger98,
  author        = {Henzinger, T. and Qadeer, S. and Rajamani, S.},
  title         = {You Assume, We Guarantee: Methodology and Case Studies},
  booktitle     = cav,
  pages         = {440--451},
  publisher     = {Springer-Verlag},
  date          = {1998},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{highsmith01,
  author        = {Highsmith, J. and Cockburn, A.},
  title         = {Agile software development: the business of innovation},
  volume        = {34},
  number        = {9},
  pages         = {120--127},
  issn          = {0018-9162},
  abstract      = {The rise and fall of the dotcom-driven Internet economy shouldn't distract us from seeing that the business environment continues to change at a dramatically increasing pace. To thrive in this turbulent environment, we must confront the business need for relentless innovation and forge the future workforce culture. Agile software development approaches, such as extreme programming, Crystal methods, lean development, Scrum, adaptive software development (ASD) and others, view change from a perspective that mirrors today's turbulent business and technology environment},
  bdsk-url-1    = {http://dx.doi.org/10.1109/2.947100},
  date          = {2001-09},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/2.947100},
  journaltitle  = {Computer},
  keywords      = {business data processing, management of change, software engineeringCrystal methods, Internet economy, Scrum, adaptive software development, agile software development approaches, changing business environment, extreme programming, innovation, lean development, software management, technology environment, workforce culture},
}

@InProceedings{hilsdale04,
  author        = {Hilsdale, Erik and Hugunin, Jim},
  title         = {Advice weaving in {A}spect{J}},
  booktitle     = aosd,
  bdsk-url-1    = {http://doi.acm.org/10.1145/976270.976276},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{hoare78,
  author        = {Hoare, C. A. R.},
  title         = {Communicating sequential processes},
  volume        = {21},
  number        = {8},
  pages         = {666--677},
  issn          = {0001-0782},
  bdsk-url-1    = {http://doi.acm.org/10.1145/359576.359585},
  date          = {1978},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/359576.359585},
  journaltitle  = {Commun. ACM},
  location      = {New York, NY, USA},
  publisher     = {ACM},
}

@Article{hoffman88,
  author        = {Hoffman, D. and Snodgrass, R.},
  title         = {Trace specifications: Methodology and models},
  volume        = {19},
  pages         = {1243--1252},
  date          = {1988},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = tse,
  optnumber     = {2},
}

@InProceedings{hoffman07a,
  author        = {Hoffman, Kevin and Eugster, Patrick},
  title         = {Bridging Java and AspectJ through explicit join points},
  booktitle     = {International Symposium on Principles and Practice of Programming in Java},
  pages         = {63--72},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1294325.1294335},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1294325.1294335},
  isbn          = {978-1-59593-672-1},
  location      = {Lisboa, Portugal},
}

@InProceedings{hoffman07,
  author        = {Hoffman, Kevin and Ramanathan, Murali Krishna and Eugster, Patrick and Jagannathan, Suresh},
  title         = {Aspect-Based Introspection and Change Analysis for Evolving Programs},
  booktitle     = {International Workshop on Reflection, AOP and Meta-Data for Software Evolution},
  editor        = {Cazzola, Walter and Chiba, Shigeru and Coady, Yvonne and Ducasse, St\'ephane and Kniesel, G\"unter and Oriol, Manuel and Saake, Gunter},
  pages         = {59--70},
  abstract      = {As new versions of software are developed bugs inevitably arise either due to regression or new functionality. Challenges arise in discovering, managing, and testing the impact of changes on software. These challenges are magnified in software systems that evolve, because the new functionality is piece-wise introduced into a live program with prior state produced by the prior component versions. If new functionality introduced into a live system induces bugs, it can be extremely difficult to analyze at run-time exactly which differences led to the incorrect behavior. In order to help programmers plan for evolution, understand the impact of specific evolutionary steps, and to diagnose evolution gone wrong, herein we propose combining the benefits of Aspect-Oriented Programming and reflection with impact analysis techniques from the OO and software engineering disciplines. We contribute a tool that assists with the deployment of new code to evolving software that gives insight as to precisely the behavioral changes between the new code and the code it is replacing within the running system. This tool is implemented using pure aspect-oriented and reflection techniques, and we discuss how to combine this tool with a load-time aspect weaver to allow precise determination of the cause of bugs introduced in live, evolving systems. We conclude by considering the challenges of implementing and deploying such a tool and outline our plans for future research and evaluation.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9Ib2ZmbWFuLzIwMDcucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbqggyMDA3LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACputxeKRQAAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHSG9mZm1hbgAAEAAIAADGq3v2AAAAEQAIAADF4smAAAAAAQAYAAqbqgAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6SG9mZm1hbjoyMDA3LnBkZgAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0hvZmZtYW4vMjAwNy5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  date          = {2007-07},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Berlin, Germany},
}

@Book{horstmann2014,
  title         = {Java SE 8 for the Really Impatient},
  publisher     = addison,
  author        = {Horstmann, Cay S.},
  edition       = {1\textsuperscript{st}},
  isbn          = {9780321927767},
  date          = {2014},
  date-added    = {2015-09-24 12:12:05 +0000},
  date-modified = {2015-09-24 12:12:05 +0000},
}

@InProceedings{Hu2000,
  author       = {Ying Hu and E. Merlo and M. Dagenais and B. Lague},
  title        = {{C/C++} conditional compilation analysis using symbolic execution},
  booktitle    = icsm,
  pages        = {196--206},
  organization = {IEEE},
  abstract     = {Conditional compilation is one of the most powerful parts of a C/C++ environment available for building software for different platforms with different feature sets. Although conditional compilation is powerful, it can be difficult to understand and is error-prone. In large software systems, file inclusion, conditional compilation and macro substitution are closely related and are often largely interleaved. Without adequate tools, understanding complex header files is a tedious task. This practice may even be complicated as the hierarchies of header files grow with projects. This paper presents our experiences of studying conditional compilation based on the symbolic execution of preprocessing directives. Our two concrete goals are: for any given preprocessor directive or C/C++ source code line, finding the simplest sufficient condition to reach/compile it, and finding the full condition to reach/compile that code line. Two different strategies were used to achieve these two goals. A series of experiments conducted on the Linux kernel are presented},
  date         = {2000},
  doi          = {10.1109/ICSM.2000.883045},
  issn         = {1063-6773},
  keywords     = {C language;C++ language;Unix;operating system kernels;program compilers;program diagnostics;reachability analysis;symbol manipulation;C language environment;C++ environment;Linux kernel;conditional compilation analysis;feature sets;file inclusion;header file hierarchies;large software systems;macro substitution;preprocessing directives;reachability;source code lines;sufficient condition;symbolic execution;C language},
  owner        = {rk1424},
  timestamp    = {2017.07.17},
}

@InProceedings{Huang2007,
  author    = {Huang, Shan Shan and Zook, David and Smaragdakis, Yannis},
  title     = {cJ: Enhancing Java with Safe Type Conditions},
  booktitle = aosd,
  series    = {AOSD '07},
  pages     = {185--198},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {cJ is an extension of Java that allows supertypes, fields, and methods of a class or interface to be provided only under some static subtyping condition. For instance, a cJ generic class, C$<$P$>$, may provide a member method m only when the type provided for parameter P is a subtype of a specific type Q.From a practical standpoint, cJ adds to generic Java classes and interfaces the ability to express case-specific code. Unlike conditional compilation techniques (e.g., the C/C++ "\#ifdef" construct) cJ is statically type safe and maintains the modular type-checking properties of Java generic classes: a cJ generic class can be checked independently of the code that uses it. Just like regular Java, checking a cJ class implies that all uses are safe, under the contract for type parameters specified in the class's signature.As a specific application, cJ addresses the well-known shortcomings of the Java Collections Framework (JCF). JCF data structures often throw run-time errors when an "optional" method is called upon an object that does not support it. Within the constraints of standard Java, the authors of the JCF had to either sacrifice static type safety or suffer a combinatorial explosion of the number of types involved. cJ avoids both problems, maintaining both static safety and conciseness.},
  acmid     = {1218584},
  date      = {2007},
  doi       = {10.1145/1218563.1218584},
  isbn      = {1-59593-615-7},
  keywords  = {aspect-oriented programming, language extensions, meta-programming},
  location  = {Vancouver, British Columbia, Canada},
  numpages  = {14},
  owner     = {rk1424},
  timestamp = {2017.07.17},
}

@Online{IBM2015,
  author    = {IBM},
  title     = {{T.J. Watson Libraries for Analysis (WALA)}},
  date      = {2015},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.30},
  url       = {http://wala.sf.net},
  urldate   = {2017-01-18},
}

@Article{Igarashi2001,
  author       = {Igarashi, Atsushi and Pierce, Benjamin C. and Wadler, Philip},
  title        = {Featherweight Java: A Minimal Core Calculus for Java and GJ},
  volume       = {23},
  number       = {3},
  pages        = {396--450},
  issn         = {0164-0925},
  acmid        = {503505},
  date         = {2001-05},
  doi          = {10.1145/503502.503505},
  issue_date   = {May 2001},
  journaltitle = toplas,
  keywords     = {Compilation, Java, generic classes, language design, language semantics},
  location     = {New York, NY, USA},
  numpages     = {55},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2017.07.06},
}

@Online{Google2015,
  author    = {{Google Inc.}},
  title     = {{ImmutableCollection (Guava: Google Core Libraries for Java 19.0 API)}},
  date      = {2015},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.14},
  url       = {http://google.github.io/guava/releases/19.0/api/docs/com/google/common/collect/ImmutableCollection.html},
  urldate   = {2017-07-14},
}

@Www{Gradle2018,
  author    = {{Gradle Inc.}},
  title     = {Gradle Build Tool},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-13},
  url       = {http://gradle.org},
  urldate   = {2018-07-13},
}

@InProceedings{ishizaki2015,
  author        = {Ishizaki, K. and Hayashi, A. and Koblents, G. and Sarkar, V.},
  title         = {Compiling and Optimizing Java 8 Programs for GPU Execution},
  booktitle     = {2015 International Conference on Parallel Architecture and Compilation (PACT)},
  pages         = {419--431},
  abstract      = {GPUs can enable significant performance improvements for certain classes of data parallel applications and are widely used in recent computer systems. However, GPU execution currently requires explicit low-level operations such as 1) managing memory allocations and transfers between the host system and the GPU, 2) writing GPU kernels in a low-level programming model such as CUDA or OpenCL, and 3) optimizing the kernels by utilizing appropriate memory types on the GPU. Because of this complexity, in many cases, only expert programmers can exploit the computational capabilities of GPUs through the CUDA/OpenCL languages. This is unfortunate since a large number of programmers use high-level languages, such as Java, due to their advantages of productivity, safety, and platform portability, but would still like to exploit the performance benefits of GPUs. Thus, one challenging problem is how to utilize GPUs while allowing programmers to continue to benefit from the productivity advantages of languages like Java. This paper presents a just-in-time (JIT) compiler that can generate and optimize GPU code from a pure Java program written using lambda expressions with the new parallel streams APIs in Java 8. These APIs allow Java programmers to express data parallelism at a higher level than threads and tasks. Our approach translates lambda expressions with parallel streams APIs in Java 8 into GPU code and automatically generates runtime calls that handle the low-level operations mentioned above. Additionally, our optimization techniques 1) allocate and align the starting address of the Java array body in the GPUs with the memory transaction boundary to increase memory bandwidth, 2) utilize read-only cache for array accesses to increase memory efficiency in GPUs, and 3) eliminate redundant data transfer between the host and the GPU. The compiler also performs loop versioning for eliminating redundant exception checks and for supporting virtual method invocations within GPU ke- nels. These features and optimizations are supported and automatically performed by a JIT compiler that is built on top of a production version of the IBM Java 8 runtime environment. Our experimental results on an NVIDIA Tesla GPU show significant performance improvements over sequential execution (127.9 ï¿½ geometric mean) and parallel execution (3.3 ï¿½ geometric mean) for eight Java 8 benchmark programs running on a 160-thread POWER8 machine. This paper also includes an in-depth analysis of GPU execution to show the impact of our optimization techniques by selectively disabling each optimization. Our experimental results show a geometric-mean speed-up of 1.15 ï¿½ in the GPU kernel over state-of-the-art approaches. Overall, our JIT compiler can improve the performance of Java 8 programs by automatically leveraging the computational capability of GPUs.},
  date          = {2015-10},
  date-added    = {2016-10-27 20:21:03 +0000},
  date-modified = {2016-10-27 20:21:23 +0000},
  doi           = {10.1109/PACT.2015.46},
  issn          = {1089-795X},
  keywords      = {Java;application program interfaces;cache storage;configuration management;graphics processing units;parallel processing;program compilers;CUDA/OpenCL languages;GPU code optimization;GPU execution;GPU kernels;IBM Java 8 runtime environment;JIT compiler;Java 8 programs;Java language;NVIDIA Tesla GPU;data parallel applications;data parallelism;graphics processing unit;just-in-time compiler;lambda expressions;loop versioning;memory bandwidth;memory efficiency;memory transaction boundary;parallel streams API;read-only cache;thread POWER8 machine;virtual method invocations;Arrays;Graphics processing units;Java;Kernel;Optimization;Semantics;GPU;JIT compiler;Java 8;Parallel streams},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.06.23},
}

@InProceedings{ishtiaq01,
  author               = {Ishtiaq, Samin S. and O'Hearn, Peter W.},
  title                = {BI as an assertion language for mutable data structures},
  booktitle            = popl,
  volume               = {36},
  number               = {3},
  pages                = {14--26},
  publisher            = {ACM Press},
  bdsk-url-1           = {http://dx.doi.org/10.1145/360204.375719},
  citeulike-article-id = {382148},
  date                 = {2001-03},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {10.1145/360204.375719},
  issn                 = {0362-1340},
  keywords             = {logic, separation},
  location             = {New York, NY, USA},
  posted-at            = {2009-01-05 15:23:33},
}

@Book{iso/iec1220708,
  title         = {Systems and software engineering -- Software life cycle processes},
  publisher     = {International Organizations for Standardization, Geneva, Switzerland},
  author        = {ISO/IEC{~}12207},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Book{iso/iec1476406,
  title         = {Software Engineering -- Software Life Cycle Processes -- Maintenance},
  publisher     = {International Organizations for Standardization, Geneva, Switzerland},
  author        = {ISO/IEC{~}14764},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Jahani2011,
  author       = {Jahani, Eaman and Cafarella, Michael J. and R{\'e}, Christopher},
  title        = {Automatic Optimization for {MapReduce} Programs},
  volume       = {4},
  number       = {6},
  pages        = {385--396},
  issn         = {2150-8097},
  acmid        = {1978670},
  date         = {2011-03},
  doi          = {10.14778/1978665.1978670},
  issue_date   = {March 2011},
  journaltitle = {Proc. VLDB Endow.},
  numpages     = {12},
  owner        = {Raffi Khatchadourian},
  publisher    = {VLDB Endowment},
  timestamp    = {2017.12.14},
}

@Article{janicki01,
  author        = {Janicki, R. and Sekerinski, E.},
  title         = {Foundations of the Trace Assertion Method of Module Interface Specification},
  date          = {2001},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = tse,
  optnumber     = {7},
}

@Misc{JetBrains2017,
  author       = {JetBrains},
  title        = {{IntelliJ IDEA}: the {Java IDE} for Professional Developers},
  howpublished = {\url{http://www.jetbrains.com/idea//#chooseYourEdition}},
  note         = {(Accessed on 07/06/2017)},
  date         = {2017},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.06},
}

@Book{jia01,
  title         = {{O}bject {O}riented {S}oftware {D}evelopment {U}sing {J}ava},
  publisher     = addison,
  author        = {Jia, Xiaoping},
  date          = {2001},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{johnson2012speculative,
  author        = {Johnson, Nick P and Kim, Hanjun and Prabhu, Prakash and Zaks, Ayal and August, David I},
  title         = {Speculative separation for privatization and reductions},
  booktitle     = {ACM SIGPLAN Notices},
  volume        = {47},
  number        = {6},
  pages         = {359--370},
  organization  = {ACM},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2012},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Book{jones03,
  title         = {Wanted: a compositional approach to concurrency},
  publisher     = {Springer-Verlag},
  author        = {Jones, C. B.},
  isbn          = {0-387-95349-3},
  book          = {Programming methodology},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {New York, NY, USA},
  pages         = {5--15},
}

@Article{jones83,
  author        = {Jones, C. B.},
  title         = {Tentative steps toward a development method for interfering programs},
  volume        = {5},
  number        = {4},
  pages         = {596--619},
  issn          = {0164-0925},
  bdsk-url-1    = {http://doi.acm.org/10.1145/69575.69577},
  date          = {1983},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/69575.69577},
  journaltitle  = toplas,
  location      = {New York, NY, USA},
  publisher     = {ACM},
}

@Www{Joseph2018,
  author    = {Sam Joseph},
  title     = {The esaas-instructors discussion forum},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-13},
  url       = {http://groups.google.com/group/esaas-instructors},
  urldate   = {2018-07-13},
}

@InProceedings{Kaestner2011,
  author    = {K\"{a}stner, Christian and Giarrusso, Paolo G. and Rendel, Tillmann and Erdweg, Sebastian and Ostermann, Klaus and Berger, Thorsten},
  title     = {Variability-aware Parsing in the Presence of Lexical Macros and Conditional Compilation},
  booktitle = oopsla,
  series    = {OOPSLA '11},
  pages     = {805--824},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {In many projects, lexical preprocessors are used to manage different variants of the project (using conditional compilation) and to define compile-time code transformations (using macros). Unfortunately, while being a simple way to implement variability, conditional compilation and lexical macros hinder automatic analysis, even though such analysis is urgently needed to combat variability-induced complexity. To analyze code with its variability, we need to parse it without preprocessing it. However, current parsing solutions use unsound heuristics, support only a subset of the language, or suffer from exponential explosion. As part of the TypeChef project, we contribute a novel variability-aware parser that can parse almost all unpreprocessed code without heuristics in practicable time. Beyond the obvious task of detecting syntax errors, our parser paves the road for further analysis, such as variability-aware type checking. We implement variability-aware parsers for Java and GNU C and demonstrate practicability by parsing the product line MobileMedia and the entire X86 architecture of the Linux kernel with 6065 variable features.},
  acmid     = {2048128},
  date      = {2011},
  doi       = {10.1145/2048066.2048128},
  isbn      = {978-1-4503-0940-0},
  keywords  = {\#ifdef, c, conditional compilation, linux, parsing, preprocessor, software product lines, variability},
  location  = {Portland, Oregon, USA},
  numpages  = {20},
  owner     = {rk1424},
  timestamp = {2017.07.17},
}

@InProceedings{katz08,
  author               = {Katz, Emilia and Katz, Shmuel},
  title                = {Incremental analysis of interference among aspects},
  booktitle            = foal,
  pages                = {29--38},
  address              = {New York, NY, USA},
  publisher            = {ACM},
  abstract             = {Often, insertion of several aspects into one system is desired and in that case the problem of interference among the different aspects might arise, even if each aspect individually woven is correct relative to its specification. In this type of interference, one aspect can prevent another from having the required effect on a woven system. Such interference is defined and specifications of aspects are described. An incremental proof strategy based on model checking pairs of aspects for a generic model expressing the specifications is defined. When an aspect is added to a library of noninterfering aspects, only its interaction with each of the aspects from the library needs to be checked. Such checks for each pair of aspects are proven sufficient to detect interference or establish interference freedom for any order of application of any collection of aspects in a library. Implemented examples of interfering aspects are analyzed and the results are described, showing the advantage of the incremental strategy over a direct proof in space needed for the model check. Early analysis and detection of such interference in libraries of aspects will enable informed choice of the aspects to be applied, and of the weaving order.},
  bdsk-url-1           = {http://dx.doi.org/10.1145/1394496.1394500},
  citeulike-article-id = {3519584},
  date                 = {2008},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {10.1145/1394496.1394500},
  isbn                 = {978-1-60558-110-1},
  keywords             = {checking, model},
  location             = {Brussels, Belgium},
  posted-at            = {2008-11-15 21:39:11},
}

@Article{katz06,
  author               = {Katz, Shmuel},
  title                = {Aspect Categories and Classes of Temporal Properties},
  volume               = {3880},
  pages                = {106--134},
  abstract             = {Generic categories of aspects are described, and their potential value is explained. For some categories, broad classes of syntactically identifiable temporal properties, such as safety, liveness, or existence properties, are guaranteed to hold for a system with any aspect of the category woven into it, if the property was true in the system without the aspect. Thus classes of properties preserved by the aspect are defined. Moreover, relatively simple verification techniques are shown to hold for some classes of temporal properties over systems augmented with some other categories of aspects. Verification of new properties added by the aspects is also considered. Each category is defined in terms of the semantic transformation it makes to the state graphs of underlying systems. A generic procedure to identify syntactically when an aspect belongs to a category is described and related to existing code analysis systems that use static code analysis and dataflow techniques. The definitions of categories, identification procedures, and lemmas about property classes provide the needed foundations that justify and motivate automatic code analysis modules to identify aspect categories. The categories enable simpler proofs of correctness than would otherwise be possible, and exploiting their characteristics can aid in software development.},
  bdsk-url-1           = {http://dx.doi.org/10.1007/11687061%5C_4},
  citeulike-article-id = {715399},
  citeulike-linkout-0  = {http://dx.doi.org/10.1007/11687061\_4},
  citeulike-linkout-1  = {http://www.springerlink.com/content/t5604m0783472287},
  date                 = {2006-02},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {10.1007/11687061\_4},
  journaltitle         = {Transactions on Aspect-Oriented Software Development I},
  keywords             = {aspect-oriented, categorization, programming},
  posted-at            = {2009-10-20 01:02:53},
}

@InProceedings{kegel08,
  author        = {Kegel, Hannes and Steimann, Friedrich},
  title         = {Systematically refactoring inheritance to delegation in {J}ava},
  booktitle     = icse,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1368088.1368147},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{kellens06,
  author        = {Kellens, Andy and Mens, Kim and Brichau, Johan and Gybels, Kris},
  title         = {Managing the Evolution of Aspect-Oriented Software with Model-based Pointcuts},
  booktitle     = ecoop,
  abstract      = {In spite of the more advanced modularisation mechanisms, aspect-oriented programs still suffer from evolution problems. Due to the fragile pointcut problem, seemingly safe modifications to the base code of an aspect-oriented program can have an unexpected impact on the semantics of the pointcuts defined in that program. This can lead to broken aspect functionality due to accidental join point misses and unintended join point captures. We tackle this problem by declaring pointcuts in terms of a conceptual model of the base program, rather than defining them directly in terms of how the base program is structured. As such, we achieve an effective decoupling of the pointcuts from the base program's structure. In addition, the conceptual model provides a means to verify where and why potential fragile pointcut conflicts occur, by imposing structural and semantic constraints on the conceptual model, that can be verified when the base program evolves. To validate our approach we implemented a model-based pointcut mechanism, which we used to define some aspects on SmallWiki, a medium-sized application, and subsequently detected and resolved occurrences of the fragile pointcut problem when this application evolved.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9LZWxsZW5zLzIwMDYucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbuAgyMDA2LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpu5xeKRQAAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHS2VsbGVucwAAEAAIAADGq3v2AAAAEQAIAADF4smAAAAAAQAYAAqbuAAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6S2VsbGVuczoyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0tlbGxlbnMvMjAwNi5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Book{kerievsky04,
  title         = {Refactoring to Patterns},
  publisher     = {Pearson Higher Education},
  author        = {Kerievsky, Joshua},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{kersten06,
  author               = {Kersten, Mik and Murphy, Gail C.},
  title                = {Using task context to improve programmer productivity},
  booktitle            = fse,
  pages                = {1--11},
  address              = {New York, NY, USA},
  publisher            = {ACM},
  abstract             = {When working on a large software system, a programmer typically spends an inordinate amount of time sifting through thousands of artifacts to find just the subset of information needed to complete an assigned task. All too often, before completing the task the programmer must switch to working on a different task. These task switches waste time as the programmer must repeatedly find and identify the information relevant to the task-at-hand. In this paper, we present a mechanism that captures, models, and persists the elements and relations relevant to a task. We show how our task context model reduces information overload and focuses a programmer's work by filtering and ranking the information presented by the development environment. A task context is created by monitoring a programmer's activity and extracting the structural relationships of program artifacts. Operations on task contexts integrate with development environment features, such as structure display, search, and change management. We have validated our approach with a longitudinal field study of Mylar, our implementation of task context for the Eclipse development environment. We report a statistically significant improvement in the productivity of 16 industry programmers who voluntarily used Mylar for their daily work.},
  bdsk-file-1          = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9LZXJzdGVuLzIwMDYucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqbuggyMDA2LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpu7xo5s1wAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHS2Vyc3RlbgAAEAAIAADGq3v2AAAAEQAIAADGjqUXAAAAAQAYAAqbugAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6S2Vyc3RlbjoyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0tlcnN0ZW4vMjAwNi5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  bdsk-url-1           = {http://dx.doi.org/10.1145/1181775.1181777},
  citeulike-article-id = {952369},
  citeulike-linkout-0  = {http://portal.acm.org/citation.cfm?id=1181775.1181777},
  citeulike-linkout-1  = {http://dx.doi.org/10.1145/1181775.1181777},
  date                 = {2006},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {10.1145/1181775.1181777},
  isbn                 = {1-59593-468-5},
  keywords             = {change, propagation},
  location             = {Portland, Oregon, USA},
  posted-at            = {2009-07-21 00:52:47},
}

@InProceedings{khan08,
  author        = {Khan, Safoora Shakil and Greenwood, Phil and Garcia, Alessandro and Rashid, Awais},
  title         = {On the Impact of Evolving Requirements-Architecture Dependencies: An Exploratory Study.},
  booktitle     = {CAiSE},
  year          = {2008},
  volume        = {5074},
  series        = {Lecture Notes in Computer Science},
  pages         = {243--257},
  publisher     = {Springer},
  bdsk-url-1    = {http://dblp.uni-trier.de/db/conf/caise/caise2008.html#KhanGGR08},
  date          = {2008-06-11},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  description   = {dblp},
  doi           = {10.1007/978-3-540-69534-9_19},
  isbn          = {978-3-540-69533-2},
  keywords      = {dblp},
  url           = {http://dblp.uni-trier.de/db/conf/caise/caise2008.html#KhanGGR08},
}

@Misc{Khatchadourian2016b,
  author       = {Raffi Khatchadourian},
  title        = {{CST1201 Programming Fundamentals Open Educational Resource (OER)}},
  year         = {2016},
  note         = {(Accessed on 07/07/2017)},
  date         = {2016-06-22},
  editor       = {Cailean Cooney},
  organization = {New York City College of Technology, City University of New York},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.07},
  url          = {http://openlab.citytech.cuny.edu/khatchadouriancst1201sp2016},
}

@PhdThesis{Khatchadourian2011,
  author        = {Raffi Khatchadourian},
  title         = {Techniques for Automated Software Evolution},
  bdsk-url-1    = {http://rave.ohiolink.edu/etdc/view.cgi?acc_num=osu1304885155},
  date          = {2011-04},
  date-added    = {2012-02-15 20:06:12 +0800},
  date-modified = {2012-02-16 00:08:55 +0000},
  institution   = {Ohio State University},
  location      = {247 University Hall, 230 North Oval Mall, Columbus, OH, USA 43210},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.10},
}

@Misc{Khatchadourian2015,
  author      = {Khatchadourian, Raffi},
  title       = {Why is the static java.util.Collections.fill() method declared in java.util.Collections rather than an instance method in java.util.AbstractList?},
  note        = {\url{http://stackoverflow.com/questions/32742871}},
  date        = {2015-09},
  keywords    = {23},
  lastchecked = {September 23, 2015},
  owner       = {rk1424},
  timestamp   = {2017.07.18},
  url         = {http://stackoverflow.com/questions/32742871},
  urldate     = {September 23, 2015},
}

@Article{Khatchadourian2016,
  author       = {Raffi Khatchadourian},
  title        = {Automated refactoring of legacy {Java} software to enumerated types},
  pages        = {1--31},
  issn         = {1573-7535},
  abstract     = {Modern Java languages introduce several new features that offer significant improvements over older Java technology. In this article we consider the new enum construct, which provides language support for enumerated types. Prior to recent Java languages, programmers needed to employ various patterns (e.g., the weak enum pattern) to compensate for the absence of enumerated types in Java. Unfortunately, these compensation patterns lack several highly-desirable properties of the enum construct, most notably, type safety. We present a novel fully-automated approach for transforming legacy Java code to use the new enumeration construct. This semantics-preserving approach increases type safety, produces code that is easier to comprehend, removes unnecessary complexity, and eliminates brittleness problems due to separate compilation. At the core of the proposed approach is an interprocedural type inferencing algorithm which tracks the flow of enumerated values. The algorithm was implemented as an open source, publicly available Eclipse plug-in and evaluated experimentally on 17 large Java benchmarks. Our results indicate that analysis cost is practical and the algorithm can successfully refactor a substantial number of fields to enumerated types. This work is a significant step towards providing automated tool support for migrating legacy Java software to modern Java technologies.},
  date         = {2016-12},
  doi          = {10.1007/s10515-016-0208-8},
  journaltitle = {Automated Software Engineering},
  keywords     = {software environments,software maintenance,software tools,enumerated types,java,automated refactoring},
  owner        = {Raffi Khatchadourian},
  publisher    = {Springer Nature},
  timestamp    = {2018.05.28},
  url          = {http://rdcu.be/nJcI},
}

@InProceedings{Khatchadourian2008c,
  author    = {Khatchadourian, Raffi and Dovland, Johan and Soundarajan, Neelam},
  title     = {Enforcing Behavioral Constraints in Evolving Aspect-oriented Programs},
  booktitle = {Proceedings of the 7\textsuperscript{th} International Workshop on Foundations of Aspect-Oriented Languages (FOAL '08) at the 7\textsuperscript{th} International Conference on Aspect-Oriented Software Development (AOSD '08)},
  series    = {FOAL '08},
  pages     = {19--28},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Reasoning, specification, and verification of Aspect-Oriented (AO) programs presents unique challenges especially as such programs evolve over time. Components, base-code and aspects alike, may be easily added, removed, interchanged, or presently unavailable at unpredictable frequencies. Consequently, modular reasoning of such programs is highly attractive as it enables tractable evolution, otherwise necessitating that the entire program be reexamined each time a component is changed. It is well known, however, that modular reasoning about AO programs is difficult. In this paper, we present our ongoing work in constructing a relyguarantee style reasoning system for the Aspect-Oriented Programming (AOP) paradigm, adopting a trace-based approach to deal with the plug-n-play nature inherent to these programs, thus easing AOP evolution.},
  acmid     = {1394499},
  date      = {2008-04},
  doi       = {10.1145/1394496.1394499},
  isbn      = {978-1-60558-110-1},
  keywords  = {aspect-oriented programming, modular reasoning, rely-guarantee},
  location  = {Brussels, Belgium},
  numpages  = {10},
  owner     = {rk1424},
  timestamp = {2017.07.18},
}

@InProceedings{Khatchadourian2008b,
  author        = {Khatchadourian, Raffi and Greenwood, Phil and Rashid, Awais},
  title         = {On the Assessment of Pointcut Design in Evolving Aspect-Oriented Software},
  booktitle     = {Proceedings of the 2\textsuperscript{nd} International Workshop on Assessment of Contemporary Modularization Techniques (ACoM '08) at the 23\textsuperscript{rd} ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA '08)},
  pages         = {9--10},
  organization  = {Lancaster University},
  publisher     = {ACM},
  date          = {2008-10},
  date-added    = {2009-10-18 21:19:37 -0400},
  date-modified = {2014-01-07 06:09:33 +0000},
  location      = {Nashville, Tennessee, USA},
  owner         = {rk1424},
  timestamp     = {2017.07.18},
}

@TechReport{khatchadourian08a,
  author        = {Khatchadourian, Raffi and Greenwood, Phil and Rashid, Awais and Xu, Guoqing},
  title         = {Pointcut Rejuvenation: Recovering Pointcut Expressions in Evolving Aspect-Oriented Software},
  institution   = {Lancaster University},
  number        = {COMP-001-2008},
  note          = {(rev Mar. 2009)},
  date          = {2008-08},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {UK},
}

@InProceedings{Khatchadourian2009,
  author    = {Khatchadourian, Raffi and Greenwood, Phil and Rashid, Awais and Xu, Guoqing},
  title     = {Pointcut Rejuvenation: Recovering Pointcut Expressions in Evolving Aspect-Oriented Software},
  booktitle = {International Conference on Automated Software Engineering},
  series    = {ASE '09},
  pages     = {575--579},
  address   = {Washington, DC, USA},
  publisher = {IEEE/ACM},
  acmid     = {1747559},
  date      = {2009-11},
  doi       = {10.1109/ASE.2009.37},
  isbn      = {978-0-7695-3891-4},
  keywords  = {Software development environments, Software maintenance, Software tools},
  location  = {Auckland, New Zealand},
  numpages  = {5},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.18},
  url       = {http://www.ics.uci.edu/~guoqingx/papers/khatchadourian-ase09.pdf},
}

@Article{Khatchadourian2012,
  author       = {Raffi Khatchadourian and Phil Greenwood and Awais Rashid and Guoqing Xu},
  title        = {Pointcut Rejuvenation: Recovering Pointcut Expressions in Evolving Aspect-Oriented Software},
  volume       = {38},
  number       = {3},
  pages        = {642--657},
  issn         = {0098-5589},
  abstract     = {Pointcut fragility is a well-documented problem in Aspect-Oriented Programming; changes to the base code can lead to join points incorrectly falling in or out of the scope of pointcuts. In this paper, we present an automated approach that limits fragility problems by providing mechanical assistance in pointcut maintenance. The approach is based on harnessing arbitrarily deep structural commonalities between program elements corresponding to join points selected by a pointcut. The extracted patterns are then applied to later versions to offer suggestions of new join points that may require inclusion. To illustrate that the motivation behind our proposal is well founded, we first empirically establish that join points captured by a single pointcut typically portray a significant amount of unique structural commonality by analyzing patterns extracted from 23 AspectJ programs. Then, we demonstrate the usefulness of our technique by rejuvenating pointcuts in multiple versions of three of these programs. The results show that our parameterized heuristic algorithm was able to accurately and automatically infer the majority of new join points in subsequent software versions that were not captured by the original pointcuts.},
  date         = {2012-05},
  doi          = {10.1109/TSE.2011.21},
  journaltitle = {{IEEE} Transactions on Software Engineering},
  keywords     = {aspect-oriented programming;AspectJ programs;aspect-oriented programming;aspect-oriented software;deep structural commonalities harnessing;join points;parameterized heuristic algorithm;pattern analysis;pointcut expression recovery;pointcut fragility;pointcut maintenance;pointcut rejuvenation;program elements;Fuels;Observers;Programming;Proposals;Robustness;Software;Software engineering;Software development environments;software maintenance;software tools.},
  owner        = {Raffi Khatchadourian},
  publisher    = {Institute of Electrical and Electronics Engineers ({IEEE})},
  timestamp    = {2017.07.10},
}

@InProceedings{Khatchadourian2017,
  author       = {Khatchadourian, Raffi and Masuhara, Hidehiko},
  title        = {Automated Refactoring of Legacy Java Software to Default Methods},
  booktitle    = icse,
  series       = {ICSE '17},
  pages        = {82--93},
  address      = {Piscataway, NJ, USA},
  organization = {ACM/IEEE},
  publisher    = {IEEE Press},
  abstract     = {Java 8 default methods, which allow interfaces to contain (instance) method implementations, are useful for the skeletal implementation software design pattern. However, it is not easy to transform existing software to exploit default methods as it requires analyzing complex type hierarchies, resolving multiple implementation inheritance issues, reconciling differences between class and interface methods, and analyzing tie-breakers (dispatch precedence) with overriding class methods to preserve type-correctness and confirm semantics preservation.  In this paper, we present an efficient, fully-automated, type constraint-based refactoring approach that assists developers in taking advantage of enhanced interfaces for their legacy Java software. The approach features an extensive rule set that covers various corner-cases where default methods cannot be used.  To demonstrate applicability, we implemented our approach as an Eclipse plug-in and applied it to 19 real-world Java projects, as well as submitted pull requests to popular GitHub repositories. The indication is that it is useful in migrating skeletal implementation methods to interfaces as default methods, sheds light onto the pattern's usage, and provides insight to language designers on how this new construct applies to existing software.},
  acmid        = {3097379},
  date         = {2017-05},
  doi          = {10.1109/ICSE.2017.16},
  isbn         = {978-1-5386-3868-2},
  keywords     = {Java, default methods, interfaces, refactoring},
  location     = {Buenos Aires, Argentina},
  numpages     = {12},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.05},
}

@InProceedings{Khatchadourian2017b,
  author       = {Khatchadourian, Raffi and Masuhara, Hidehiko},
  title        = {Proactive Empirical Assessment of New Language Feature Adoption via Automated Refactoring: The Case of {Java} 8 Default Methods},
  booktitle    = {submission to the International Conference on Automated Software Engineering},
  series       = {ASE '17},
  organization = {ACM/IEEE},
  date         = {2017-10},
  location     = {Urbana-Champaign, Illinois, USA},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.06},
}

@InProceedings{Khatchadourian2017c,
  author       = {Khatchadourian, Raffi and Masuhara, Hidehiko},
  title        = {Defaultification Refactoring: A Tool for Automatically Converting {Java} Methods to Default},
  booktitle    = ase,
  series       = {ASE '17},
  pages        = {984--989},
  address      = {Piscataway, NJ, USA},
  organization = {ACM/IEEE},
  publisher    = {IEEE Press},
  abstract     = {Enabling interfaces to declare (instance) method implementations, Java 8 default methods can be used as a substitute for the ubiquitous skeletal implementation software design pattern. Performing this transformation on legacy software manually, though, may be non-trivial. The refactoring requires analyzing complex type hierarchies, resolving multiple implementation inheritance issues, reconciling differences between class and interface methods, and analyzing tie-breakers (dispatch precedence) with overriding class methods. All of this is necessary to preserve type-correctness and confirm semantics preservation. We demonstrate an automated refactoring tool called MIGRATE Skeletal Implementation to Interface for transforming legacy Java code to use the new default construct. The tool, implemented as an Eclipse plug-in, is driven by an efficient, fully-automated, type constraint-based refactoring approach. It features an extensive rule set covering various corner-cases where default methods cannot be used. The resulting code is semantically equivalent to the original, more succinct, easier to comprehend, less complex, and exhibits increased modularity. A demonstration can be found at http://youtu.be/YZHIy0yePh8.},
  acmid        = {3155691},
  date         = {2017-10},
  doi          = {10.1109/ASE.2017.8115716},
  isbn         = {978-1-5386-2684-9},
  keywords     = {automated, default methods, evolution, integrated development environments, interfaces, java, refactoring, type constraints},
  location     = {Urbana-Champaign, IL, USA},
  numpages     = {6},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.03.22},
}

@InProceedings{Khatchadourian2016c,
  author    = {Khatchadourian, Raffi and Moore, Olivia and Masuhara, Hidehiko},
  title     = {Towards Improving Interface Modularity in Legacy {Java} Software Through Automated Refactoring},
  booktitle = {Companion Proceedings of the International Conference on Modularity},
  series    = {MODULARITY Companion 2016},
  pages     = {104--106},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2892681},
  date      = {2016-03},
  doi       = {10.1145/2892664.2892681},
  isbn      = {978-1-4503-4033-5},
  keywords  = {default methods, interfaces, java, refactoring},
  location  = {M\'alaga, Spain},
  numpages  = {3},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{Khatchadourian2010,
  author    = {Khatchadourian, Raffi and Muskalla, Benjamin},
  title     = {Enumeration Refactoring: A Tool for Automatically Converting {Java} Constants to Enumerated Types},
  booktitle = ase,
  series    = {ASE '10},
  pages     = {181--182},
  address   = {New York, NY, USA},
  publisher = {IEEE/ACM},
  abstract  = {Java 5 introduces several new features that offer significant improvements over older Java technology. We consider the new enum construct, which provides language support for enumerated types. Before Java 5, programmers needed to employ various patterns to compensate for the absence of enumerated types in Java. Unfortunately, these compensation patterns lack several highly desirable properties of the enum construct, most notably, type-safety. We demonstrate an automated refactoring tool called Convert Constants to Enum for transforming legacy Java code to use the new enumeration construct. An interprocedural type inferencing algorithm that tracks the flow of enumerated values drives the approach, and the tool is implemented as a seamless extension to existing refactoring support in Eclipse. The resulting code is semantically equivalent to the original, increasingly type-safe, easier to comprehend, less complex, and supports separate compilation.},
  acmid     = {1859036},
  date      = {2010-09},
  doi       = {10.1145/1858996.1859036},
  isbn      = {978-1-4503-0116-9},
  keywords  = {automated refactoring, enumerated types, java},
  location  = {Antwerp, Belgium},
  numpages  = {2},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.24},
}

@InProceedings{Khatchadourian2008,
  author    = {Khatchadourian, Raffi and Rashid, Awais},
  title     = {Rejuvenate Pointcut: A Tool for Pointcut Expression Recovery in Evolving Aspect-Oriented Software},
  booktitle = scam,
  pages     = {261--262},
  publisher = {IEEE},
  date      = {2008-09},
  keywords  = {aspect-oriented automated evolution fragile fragility pointcut programming},
  location  = {Beijing, China},
  owner     = {rk1424},
  timestamp = {2017.07.18},
}

@InProceedings{Khatchadourian2015a,
  author        = {Khatchadourian, Raffi and Rashid, Awais and Masuhara, Hidehiko and Watanabe, Takuya},
  title         = {Detecting Broken Pointcuts using Structural Commonality and Degree of Interest},
  booktitle     = {International Conference on Automated Software Engineering},
  series        = {ASE 2015},
  pages         = {641--646},
  address       = {New York, NY, USA},
  publisher     = {IEEE/ACM},
  date          = {2015-11},
  date-added    = {2015-02-12 22:04:09 +0000},
  date-modified = {2016-02-09 18:52:36 +0000},
  doi           = {10.1109/ASE.2015.80},
  keywords      = {aspect-oriented programming, program debugging, DOI model, Mylyn Eclipse IDE plug-in, aspect-oriented programming, broken pointcut detection, degree of interest model, pointcut fragility, structural characteristics, structural commonality, Java, Programming, Software, Software engineering, Aspect-Oriented programming, software evolution},
  location      = {Lincoln, NE, USA},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
}

@Article{Khatchadourian2017a,
  author       = {Raffi Khatchadourian and Awais Rashid and Hidehiko Masuhara and Takuya Watanabe},
  title        = {Detecting Broken Pointcuts Using Structural Commonality and Degree of Interest},
  issn         = {0167-6423},
  abstract     = {Pointcut fragility is a well-documented problem in Aspect-Oriented Programming; changes to the base-code can lead to join points incorrectly falling in or out of the scope of pointcuts. Deciding which pointcuts have broken due to base-code changes is a daunting venture, especially in large and complex systems. We present an automated approach that recommends pointcuts that are likely to require modification due to a particular base-code change, as well as ones that do not. Our hypothesis is that join points selected by a pointcut exhibit common structural characteristics. Patterns describing such commonality are used to recommend pointcuts that have potentially broken with a degree of confidence as the developer is typing. The approach is implemented as an extension to the popular Mylyn Eclipse IDE plug-in, which maintains focused contexts of entities relevant to the task at hand using a Degree of Interest (DOI) model. We show that it is accurate in revealing broken pointcuts by applying it to multiple versions of several open source projects and evaluating the quality of the recommendations produced against actual modifications. We found that our tool made broken pointcuts 2.14 times more interesting in the DOI model than unbroken ones, with a p-value under 0.1, indicating a significant difference in final DOI value between the two kinds of pointcuts (i.e., broken and unbroken).},
  date         = {2017-06},
  doi          = {10.1016/j.scico.2017.06.011},
  journaltitle = {Science of Computer Programming},
  keywords     = {Software development environments, Software maintenance, Software tools},
  owner        = {rk1424},
  publisher    = {Elsevier {BV}},
  timestamp    = {2017.07.18},
  url          = {http://academicworks.cuny.edu/hc_pubs/300},
}

@InProceedings{Khatchadourian2015b,
  author        = {Khatchadourian, Raffi and Rashid, Awais and Masuhara, Hidehiko and Watanabe, Takuya},
  title         = {Fraglight: Shedding Light on Broken Pointcuts in Evolving Aspect-oriented Software},
  booktitle     = {Companion Proceedings of the 2015 ACM SIGPLAN International Conference on Systems, Programming, Languages and Applications: Software for Humanity},
  series        = {SPLASH Companion 2015},
  pages         = {17--18},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  acmid         = {2814195},
  date          = {2015-10},
  date-added    = {2016-02-12 02:12:59 +0000},
  date-modified = {2016-02-12 02:39:24 +0000},
  doi           = {10.1145/2814189.2814195},
  isbn          = {978-1-4503-3722-9},
  keywords      = {Aspect-Oriented programming, software evolution},
  location      = {Pittsburgh, PA, USA},
  numpages      = {2},
  owner         = {rk1424},
  timestamp     = {2017.07.18},
  url           = {http://websupport1.citytech.cuny.edu/Faculty/rkhatchadourian/media/splashcomp15demo-demoid6-p-72a7a4c-26095-preprint.pdf},
}

@TechReport{khatchadourian07,
  author        = {Khatchadourian, Raffi and Sawin, Jason and Rountev, Atanas},
  title         = {Automated Refactoring of Legacy {J}ava Software to Enumerated Types},
  institution   = {Ohio State University},
  number        = {OSU-CISRC-4/07-TR26},
  date          = {2007-04},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Khatchadourian2007a,
  author    = {Khatchadourian, Raffi and Sawin, Jason and Rountev, Atanas},
  title     = {Automated Refactoring of Legacy {Java} Software to Enumerated Types},
  booktitle = icsm,
  series    = {ICSM '07},
  pages     = {224--233},
  publisher = {IEEE},
  date      = {2007-10},
  doi       = {10.1109/ICSM.2007.4362635},
  issn      = {1063-6773},
  keywords  = {Java;programming language semantics;software maintenance;Java 1.5;Java technology;enum construct;legacy Java code;legacy Java software;semantics-preserving approach;Algorithm design and analysis;Application software;Costs;Inference algorithms;Java;Programming profession;Robustness;Safety;Software maintenance;Software tools},
  location  = {Paris, France},
  owner     = {rk1424},
  timestamp = {2017.07.18},
}

@InProceedings{Khatchadourian2007,
  author    = {Khatchadourian, Raffi and Soundarajan, Neelam},
  title     = {Rely-guarantee Approach to Reasoning About Aspect-oriented Programs},
  booktitle = {Workshop on Software Engineering Properties of Languages and Aspect Technologies},
  series    = {SPLAT '07},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Over the last few years, the question of reasoning about aspect-oriented programs has been addressed by a number of authors. In this paper, we present a rely-guarantee approach to such reasoning. The rely-guarantee approach has proven extremely successful in reasoning about concurrent and distributed programs. We show that some of the key problems encountered in reasoning about aspectoriented programs are similar to those encountered in reasoning about concurrent programs; and that the rely-guarantee approach, appropriately modified, helps address these problems. We illustrate our approach with a simple example.},
  acmid     = {1233848},
  articleno = {5},
  date      = {2007-03},
  doi       = {10.1145/1233843.1233848},
  isbn      = {978-1-59593-656-1},
  keywords  = {aspect-oriented software, modular verification, rely-guarantee},
  location  = {Vancouver, British Columbia, Canada},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.21},
}

@Misc{Khatchadourian2018a,
  author    = {Raffi Khatchadourian and Yiming Tang and Mehdi Bagherzadeh and Syed Ahmed},
  title     = {Raw results for the {Optimize Java 8 Stream} refactoring evaluation},
  date      = {2018-04},
  doi       = {10.5281/zenodo.1219882},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-15},
}

@InProceedings{Khatchadourian2018b,
  author    = {Raffi Khatchadourian and Yiming Tang and Mehdi Bagherzadeh and Syed Ahmed},
  title     = {A Tool for Optimizing {Java} 8 Stream Software via Automated Refactoring},
  booktitle = {International Working Conference on Source Code Analysis and Manipulation},
  series    = {SCAM '18},
  publisher = {IEEE},
  note      = {Engineering track. To appear.},
  abstract  = {Streaming APIs are pervasive in mainstream Object-Oriented languages and platforms. For example, the Java 8 Stream API allows for functional-like, MapReduce-style operations in processing both finite, e.g., collections, and infinite data structures. However, using this API efficiently involves subtle considerations like determining when it is best for stream operations to run in parallel, when running operations in parallel can actually be less efficient, and when it is safe to run in parallel due to possible lambda expression side-effects. In this paper, we describe the engineering aspects of an open source automated refactoring tool called Optimize Streams that assists developers in writing optimal stream software in a semantics-preserving fashion. Based on a novel ordering and typestate analysis, the tool is implemented as a plug-in to the popular Eclipse IDE, using both the WALA and SAFE frameworks. The tool was evaluated on 11 Java projects consisting of ~642 thousand lines of code, where we found that 36.31\% of candidate streams were refactorable, and an average speedup of 1.55 on a performance suite was observed. We also describe experiences gained from integrating three very different static analysis frameworks to provide developers with an easy-to-use interface for optimizing their stream code to its full potential.},
  date      = {2018-09},
  keywords  = {refactoring, automatic parallelization, typestate analysis, ordering, Java 8, streams, eclipse, WALA, SAFE},
  location  = {Madrid, Spain},
  numpages  = {6},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-10},
}

@InProceedings{kiczales01,
  author        = {Kiczales, Gregor and Hilsdale, Erik and Hugunin, Jim and Kersten, Mik and Palm, Jeffrey and Griswold, William G.},
  title         = {An Overview of AspectJ},
  booktitle     = ecoop,
  date          = {2001},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{kiczales97,
  author        = {Kiczales, Gregor and Lamping, J. and Mendhekar, A. and Maeda, C. and Lopes, C. and Loingtier, J. and Irwin, J.},
  title         = {Aspect oriented programming},
  booktitle     = ecoop,
  date          = {1997},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{kiczales05,
  author        = {Kiczales, Gregor and Mezini, Mira},
  title         = {Aspect-oriented programming and modular reasoning},
  booktitle     = icse,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QQy4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3A0OS1raWV6YWxlcy5wZGbSFwsYGVdOUy5kYXRhTxEB1gAAAAAB1gACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAA0FwJJ0grAAAAJr/7EHA0OS1raWV6YWxlcy5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnKXXF4pFgAAAAAAAAAAAAAwAGAAAJIAAAAAAAAAAAAAAAAAAAAAdyZWxhdGVkAAAQAAgAANBcQWcAAAARAAgAAMXiyaAAAAABABwAJr/7ACaTeAAmhkEAG+OYABvcGgAbygsAApPVAAIAWk1hY2ludG9zaCBIRDpVc2VyczoAcmFmZmk6AERyb3Bib3g6AERvY3VtZW50czoAc2Nob29sOgA3ODhfYXUwNzoAcmVsYXRlZDoAcDQ5LWtpZXphbGVzLnBkZgAOACIAEABwADQAOQAtAGsAaQBlAHoAYQBsAGUAcwAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIARlVzZXJzL3JhZmZpL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3A0OS1raWV6YWxlcy5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgDUANkA4QK7Ar0CwgLNAtYC5ALoAu8C+AL9AwoDDQMfAyIDJwAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAMp},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/p49-kiezales.pdf},
}

@InProceedings{kiczales05a,
  author        = {Kiczales, Gregor and Mezini, Mira},
  title         = {Separation of Concerns with Procedures, Annotations, Advice and Pointcuts},
  booktitle     = ecoop,
  pages         = {195--213},
  abstract      = {There are numerous mechanisms for separation of concerns at the source code level. Three mechanisms that are the focus of recent attention -- metadata annotations, pointcuts and advice -- can be modeled together with good old-fashioned procedures as providing different kinds of bindings: procedure calls bind program points to operations, annotations bind attributes to program points; pointcuts bind sets of points to various descriptions of those sets; named pointcuts bind attributes to sets of points; and advice bind the implementation of an operation to sets of points. This model clarifies how the mechanisms work together to separate concerns, and yields guidelines to help developers use the mechanisms in practice.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIS4uLy4uLy4uL1BhcGVycy9LaWN6YWxlcy8yMDA1LnBkZtIXCxgZV05TLmRhdGFPEQGcAAAAAAGcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm8gIMjAwNS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqby8XikUAAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAACEtpY3phbGVzABAACAAAxqt79gAAABEACAAAxeLJgAAAAAEAGAAKm8gACps+AAqRpwAKkaQACAChAACQ5wACAENNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOktpY3phbGVzOjIwMDUucGRmAAAOABIACAAyADAAMAA1AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0tpY3phbGVzLzIwMDUucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsgC3AL8CXwJhAmYCcQJ6AogCjAKTApwCoQKuArECwwLGAssAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACzQ==},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1007/11531142_9},
}

@InProceedings{Kiezun2007,
  author    = {Kie{\.z}un, Adam and Ernst, Michael D. and Tip, Frank and Fuhrer, Robert M.},
  title     = {Refactoring for Parameterizing {Java} Classes},
  booktitle = icse,
  series    = {ICSE '07},
  pages     = {437--446},
  publisher = {IEEE Computer Society},
  acmid     = {1248876},
  date      = {2007-05},
  doi       = {10.1109/ICSE.2007.70},
  isbn      = {0-7695-2828-7},
  location  = {Washington, DC, USA},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{Kim2016,
  author    = {Kim, Jongwook and Batory, Don and Dig, Danny and Azanza, Maider},
  title     = {Improving Refactoring Speed by 10X},
  booktitle = icse,
  series    = {ICSE '16},
  pages     = {1145--1156},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2884802},
  date      = {2016},
  doi       = {10.1145/2884781.2884802},
  isbn      = {978-1-4503-3900-1},
  location  = {Austin, Texas},
  numpages  = {12},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{Kiselyov2017,
  author       = {Kiselyov, Oleg and Biboudis, Aggelos and Palladinos, Nick and Smaragdakis, Yannis},
  title        = {Stream Fusion, to Completeness},
  booktitle    = popl,
  series       = {POPL 2017},
  pages        = {285--299},
  address      = {New York, NY, USA},
  organization = {ACM SIGPLAN},
  publisher    = {ACM},
  acmid        = {3009880},
  date         = {2017},
  doi          = {10.1145/3009837.3009880},
  isbn         = {978-1-4503-4660-3},
  keywords     = {Code generation, multi-stage programming, optimization, stream fusion, streams},
  location     = {Paris, France},
  numpages     = {15},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.07.11},
}

@Article{Kish2002,
  author       = {Kish, Laszlo B},
  title        = {End of Moore's law: thermal (noise) death of integration in micro and nano electronics},
  volume       = {305},
  number       = {3},
  pages        = {144--149},
  date         = {2002},
  journaltitle = {Physics Letters A},
  owner        = {Raffi Khatchadourian},
  publisher    = {Elsevier},
  timestamp    = {2017.06.23},
}

@Article{kit06,
  author        = {Kit, Lo Kwun and Man, Chan Kwun and Baniassad, Elisa},
  title         = {Isolating and relating concerns in requirements using latent semantic analysis},
  volume        = {41},
  number        = {10},
  pages         = {383--396},
  issn          = {0362-1340},
  abstract      = {Aspect-oriented requirements analysis involves the identification of concerns that behaviorally influence other concerns. Such concerns are described in requirements called emphaspectual requirements: requirements that detail the influence of one concern over another. The current state of the art for aspect-oriented requirements analysis is Theme/Doc, which allows lexical analysis of requirements based on a set of developer-chosen keywords. It provides a graphical depiction of how concerns relate to requirements, and affords identification of potential aspectual requirements. In addition, clusters of requirements and concerns are identified to arrive at a more useful set of concerns than those initially identified.Because of the lexical nature of the Theme/Doc approach, aspectual requirements are missed, or wrongly identified. Additionally, requirements may be wrongly clustered if they contain ambiguous terms.In this work we explored whether the use of a statistical approach for textual analysis, Latent Semantic Analysis (LSA), would improve upon the lexical approach used by Theme/Doc. We found that LSA helps identify useful concern clusters, and helps reduce the number of falsely identified aspectual requirements.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHC4uLy4uLy4uL1BhcGVycy9LaXQvMjAwNi5wZGbSFwsYGVdOUy5kYXRhTxEBjgAAAAABjgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpvVCDIwMDYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm9bF4pFAAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAANLaXQAABAACAAAxqt79gAAABEACAAAxeLJgAAAAAEAGAAKm9UACps+AAqRpwAKkaQACAChAACQ5wACAD5NYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOktpdDoyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAxVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0tpdC8yMDA2LnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCtALIAugJMAk4CUwJeAmcCdQJ5AoACiQKOApsCngKwArMCuAAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAK6},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1167515.1167506},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1167515.1167506},
  journaltitle  = {SIGPLAN Not.},
  location      = {New York, NY, USA},
  publisher     = {ACM},
}

@InProceedings{klose05,
  author        = {Klose, Karl and Ostermann, Klaus},
  title         = {Back to the Future: Pointcuts as Predicates over Traces},
  booktitle     = foal,
  abstract      = {Pointcuts in aspect-oriented languages can be seen as predicates over events in the computation of a program. The ability to express temporal relations between such events is a key feature towards more expressive pointcut languages. In this paper, we describe the design and implementation of a pointcut language within which pointcuts are predicates over the complete execution trace of the program. In particular, pointcuts may refer to events that will happen in the future. In this model, advice application is an iterative process that stops once a fixed-point is reached. On the negative side, we do not have a ``killer example'' for these kinds of pointcuts, there are still some serious limitations, and our implementation strategy is not suitable for a practical language. However, we think that considering pointcuts as predicates over the whole computation and advice application as a fixed point problem is an interesting new perspective on pointcuts for the FOAL audience.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHi4uLy4uLy4uL1BhcGVycy9LbG9zZS8yMDA1LnBkZtIXCxgZV05TLmRhdGFPEQGUAAAAAAGUAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm9cIMjAwNS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqb2MXikUAAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAABUtsb3NlAAAQAAgAAMare/YAAAARAAgAAMXiyYAAAAABABgACpvXAAqbPgAKkacACpGkAAgAoQAAkOcAAgBATWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpLbG9zZToyMDA1LnBkZgAOABIACAAyADAAMAA1AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0tsb3NlLzIwMDUucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAK8AtAC8AlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{knuth67,
  author        = {Knuth, Donald E.},
  title         = {Semantics of context-free languages},
  volume        = {2},
  number        = {2},
  date          = {1967},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Theory of Computing Systems},
}

@InProceedings{kontogiannis98,
  author        = {Kontogiannis, K. and Martin, J. and Wong, K. and Gregory, R. and M\"{u}ller, H. and Mylopoulos, J.},
  title         = {Code migration through transformations: an experience report},
  booktitle     = {Conference of the Centre for Advanced Studies on Collaborative Research},
  pages         = {13},
  publisher     = {IBM Press},
  date          = {1998},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Toronto, Ontario, Canada},
}

@InProceedings{koppen04,
  author        = {Koppen, C. and Stoerzer, M.},
  title         = {{PCDiff}: Attacking the fragile pointcut problem.},
  booktitle     = {Eur. Int. Workshop on Aspects in Software},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Koschke2007,
  author    = {Rainer Koschke},
  title     = {Survey of Research on Software Clones},
  booktitle = {Duplication, Redundancy, and Similarity in Software},
  editor    = {Rainer Koschke and Ettore Merlo and Andrew Walenstein},
  number    = {06301},
  series    = {Dagstuhl Seminar Proceedings},
  publisher = {Internationales Begegnungs- und Forschungszentrum f{\"u}r Informatik (IBFI), Schloss Dagstuhl, Germany},
  abstract  = {This report summarizes my overview talk on software clone detection research. It first discusses the notion of software redundancy, cloning, duplication, and similarity. Then, it describes various categorizations of clone types, empirical studies on the root causes for cloning, current opinions and wisdom of consequences of cloning, empirical studies on the evolution of clones, ways to remove, to avoid, and to detect them, empirical evaluations of existing automatic clone detector performance (such as recall, precision, time and space consumption) and their fitness for a particular purpose, benchmarks for clone detector evaluations, presentation issues, and last but not least application of clone detection in other related fields. After each summary of a subarea, I am listing open research questions.},
  date      = {2007},
  issn      = {1862-4405},
  keywords  = {Software redundancy, code clone, software evolution, clone detector, empirical evaluation},
  location  = {Dagstuhl, Germany},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.05},
  url       = {http://drops.dagstuhl.de/opus/volltexte/2007/962},
}

@Online{Krill2016,
  author       = {Paul Krill},
  title        = {Functional languages: What they are, where they're going},
  year         = {2016},
  date         = {2016-02-17},
  journaltitle = {InfoWorld},
  organization = {IDG},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.12.14},
  url          = {http://www.infoworld.com/article/3033912/application-development/functional-languages-what-they-are-where-theyre-going.html},
  urldate      = {2018-05-30},
}

@InProceedings{krishnamurthi04,
  author        = {Krishnamurthi, S. and Fisler, K. and Greenberg, M.},
  title         = {Verifying aspect advice modularly},
  booktitle     = fse,
  pages         = {137--146},
  publisher     = {ACM},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InCollection{krulivs2016towards,
  author        = {Kruli{\v{s}}, Martin and Bedn{\'a}rek, David and Falt, Zbyn{\v{e}}k and Yaghob, Jakub and Zavoral, Filip},
  title         = {Towards Semi-automated Parallelization of Data Stream Processing},
  booktitle     = {Intelligent Distributed Computing IX},
  publisher     = {Springer},
  pages         = {235--245},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2016},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@InProceedings{kulesza06,
  author        = {Kulesza, Uira and Sant'Anna, Claudio and Garcia, Alessandro and Coelho, Roberta and von Staa, Arndt and Lucena, Carlos},
  title         = {Quantifying the Effects of Aspect-Oriented Programming: A Maintenance Study},
  booktitle     = icsm,
  bdsk-url-1    = {http://dx.doi.org/10.1109/ICSM.2006.48},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/ICSM.2006.48},
  isbn          = {0-7695-2354-4},
}

@InProceedings{Kumar2012,
  author       = {Kumar, Aditya and Sutton, Andrew and Stroustrup, Bjarne},
  title        = {Rejuvenating {C++} Programs Through Demacrofication},
  booktitle    = icsm,
  series       = {ICSM '12},
  pages        = {98--107},
  organization = {IEEE},
  publisher    = {IEEE Computer Society},
  acmid        = {2473565},
  date         = {2012},
  doi          = {10.1109/ICSM.2012.6405259},
  isbn         = {978-1-4673-2313-0},
  keywords     = {Libraries,Syntactics,Educational institutions,Intellectual property,Conferences,Software maintenance,demacrofication,source code rejuvenation,macros,C++11,refactoring},
  location     = {Washington, DC, USA},
  numpages     = {10},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.05.25},
}

@Article{Kwon2014,
  author        = {Kwon, Young-Woo and Tilevich, Eli},
  title         = {Cloud refactoring: automated transitioning to cloud-based services},
  date          = {2014},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = ase,
}

@Book{laddad03,
  title         = {AspectJ in Action},
  publisher     = {Manning},
  author        = {Laddad, R.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9MYWRkYWQvMjAwMy5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpvbCDIwMDMucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm9zF4pFBAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZMYWRkYWQAEAAIAADGq3v2AAAAEQAIAADF4smBAAAAAQAYAAqb2wAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6TGFkZGFkOjIwMDMucGRmAAAOABIACAAyADAAMAAzAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0xhZGRhZC8yMDAzLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Larsen2011,
  author    = {Larsen, Per and Ladelsky, Razya and Karlsson, Sven and Zaks, Ayal},
  title     = {Compiler driven code comments and refactoring},
  booktitle = {Fourth Workshop on Programmability Issues for Multi-Core Computers (MULTIPROG-2011)},
  pages     = {64},
  date      = {2011},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-13},
}

@InProceedings{larsen2012parallelizing,
  author        = {Larsen, Per and Ladelsky, Razya and Lidman, Jacob and McKee, Sally A and Karlsson, Sven and Zaks, Ayal},
  title         = {Parallelizing more loops with compiler guided refactoring},
  booktitle     = {Parallel Processing (ICPP), 2012 41\textsuperscript{st} International Conference on},
  pages         = {410--419},
  organization  = {IEEE},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2012},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@TechReport{larsen2011automatic,
  author        = {Larsen, Per and Ladelsky, Razya and Lidman, Jacob and McKee, Sally A and Karlsson, Sven and Zaks, Ayal},
  title         = {Automatic loop parallelization via compiler guided refactoring},
  institution   = {Technical University of Denmark},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2011},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Online{Lau2017,
  author       = {James Lau},
  title        = {Future of {Java} 8 Language Feature Support on {Android}},
  year         = {2017},
  date         = {2017-03-14},
  journaltitle = {Android Developers Blog},
  organization = {{Google Inc.}},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.12.14},
  url          = {http://android-developers.googleblog.com/2017/03/future-of-java-8-language-feature.html},
  urldate      = {2017-07-06},
}

@Online{EPFL2017,
  author     = {{\'{E}cole Polytechnique F\'{e}d\'{e}rale de Lausanne}},
  title      = {{Scala Standard Library 2.12.2 - scala.Option}},
  date       = {2017},
  owner      = {Raffi Khatchadourian},
  timestamp  = {2017.07.15},
  titleaddon = {Scala programming documentation},
  url        = {https://www.scala-lang.org/api/current/scala/Option.html},
  urldate    = {2017-07-05},
}

@Online{Lausanne2015,
  author    = {\'{E}cole Polytechnique F\'{e}d\'{e}rale de Lausanne},
  title     = {Collections--Mutable and Immutable Collections--Scala Documentation},
  date      = {2017},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
  url       = {https://www.scala-lang.org/api/2.12.3/scala/collection/index.html},
  urldate   = {2018-04-16},
}

@InProceedings{lazarescu2014energy,
  author        = {Lazarescu, Mihai T and Cohen, Albert and Guatto, Adrien and L{\^e}, Nhat Minn and Lavagno, Luciano and Pop, Antoniu and Prieto, Manuel and Terechko, Andrei and Sutii, Alexandru},
  title         = {Energy-aware parallelization flow and toolset for C code},
  booktitle     = {Proceedings of the 17\textsuperscript{th} International Workshop on Software and Compilers for Embedded Systems},
  pages         = {79--88},
  organization  = {ACM},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2014},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Article{Leavens2006,
  author       = {Leavens, Gary T. and Baker, Albert L. and Ruby, Clyde},
  title        = {Preliminary Design of {JML}: A Behavioral Interface Specification Language for Java},
  volume       = {31},
  number       = {3},
  pages        = {1--38},
  issn         = {0163-5948},
  acmid        = {1127884},
  date         = {2006-05},
  doi          = {10.1145/1127878.1127884},
  issue_date   = {May 2006},
  journaltitle = {SIGSOFT Softw. Eng. Notes},
  location     = {New York, NY, USA},
  numpages     = {38},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2018.05.28},
}

@InProceedings{Lee2000,
  author    = {Lee, Seungll and Yang, Byung-Sun and Kim, Suhyun and Park, Seongbae and Moon, Soo-Mook and Ebcio\u{g}lu, Kemal and Altman, Erik},
  title     = {Efficient Java Exception Handling in Just-in-time Compilation},
  booktitle = {Proceedings of the ACM 2000 Conference on Java Grande},
  series    = {JAVA '00},
  pages     = {1--8},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {337453},
  date      = {2000},
  doi       = {10.1145/337449.337453},
  isbn      = {1-58113-288-3},
  location  = {San Francisco, California, USA},
  numpages  = {8},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@TechReport{Leino1999,
  author      = {K. Rustan M. Leino and James B. Saxe and Raymie Stata},
  title       = {Checking Java programs via guarded commands},
  institution = {Fernuniversit\"{a}t Hagen},
  number      = {251},
  date        = {1999-05},
  owner       = {Raffi Khatchadourian},
  timestamp   = {2017.12.11},
}

@Article{letier02,
  author        = {Letier, Emmanuel and van Lamsweerde, Axel},
  title         = {Deriving operational software specifications from system goals},
  volume        = {27},
  number        = {6},
  pages         = {119--128},
  issn          = {0163-5948},
  abstract      = {Goal orientation is an increasingly recognized paradigm for eliciting, modeling, specifying and analyzing software requirements. Goals are statements of intent organized in AND/OR refinement structures; they range from high-level, strategic concerns to low-level, technical requirements on the software-to-be and assumptions on its environment. The operationalization of system goals into specifications of software services is a core aspect of the requirements elaboration process for which little systematic and constructive support is available. In particular, most formal methods assume such operational specifications to be given and focus on their a posteriori analysis.The paper considers a formal, constructive approach in which operational software specifications are built incrementally from higher-level goal formulations in a way that guarantees their correctness by construction. The operationalization process is based on formal derivation rules that map goal specifications to specifications of software operations; more specifically, these rules map real-time temporal logic specifications to sets of pre-, post- and trigger conditions. The rules define operationalization patterns that may be used for guiding and documenting the operationalization process while hiding all formal reasoning details; the patterns are formally proved correct once and for all. The catalog of operationalization patterns is structured according to a rich taxonomy of goal specification patterns.Our constructive approach to requirements elaboration requires a multiparadigm specification language that supports incremental reasoning about partial models. The paper also provides a formal semantics for goal operationalization and discusses several semantic features of our language that allow for such incremental reasoning.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9MZXRpZXIvMjAwMi5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpvgCDIwMDIucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKm+HF4pFBAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZMZXRpZXIAEAAIAADGq3v2AAAAEQAIAADF4smBAAAAAQAYAAqb4AAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6TGV0aWVyOjIwMDIucGRmAAAOABIACAAyADAAMAAyAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0xldGllci8yMDAyLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  bdsk-url-1    = {http://doi.acm.org.proxy.lib.ohio-state.edu/10.1145/605466.605485},
  date          = {2002},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/605466.605485},
  journaltitle  = {SIGSOFT Softw. Eng. Notes},
  location      = {New York, NY, USA},
  publisher     = {ACM},
}

@InProceedings{Leung2009,
  author        = {Leung, Alan and Lhot{\'a}k, Ond{\v{r}}ej and Lashari, Ghulam},
  title         = {Automatic parallelization for graphics processing units},
  booktitle     = {Principles and Practice of Programming in Java},
  pages         = {91--100},
  organization  = {ACM},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2009},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.11},
}

@InProceedings{Li2006,
  author    = {Li, Zhenmin and Tan, Lin and Wang, Xuanhui and Lu, Shan and Zhou, Yuanyuan and Zhai, Chengxiang},
  title     = {Have Things Changed Now?: An Empirical Study of Bug Characteristics in Modern Open Source Software},
  booktitle = {Workshop on Architectural and System Support for Improving Software Dependability},
  series    = {ASID '06},
  pages     = {25--33},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1181314},
  date      = {2006},
  doi       = {10.1145/1181309.1181314},
  isbn      = {1-59593-576-2},
  keywords  = {bug characteristics, bug detection, empirical study, open source, security},
  location  = {San Jose, California},
  numpages  = {9},
  owner     = {rk1424},
  timestamp = {2017.12.11},
}

@Article{lieberherr03,
  author        = {Lieberherr, K. and Lorenz, D. and Ovlinger, J.},
  title         = {Aspectual Collaborations: Combining Modules and Aspects},
  pages         = {542--565},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {The Computer Journal},
}

@InProceedings{lieberherr05,
  author        = {Lieberherr, Karl J. and Palm, Jeffrey and Sundaram, Ravi},
  title         = {Expressiveness and Complexity of Crosscut Languages},
  booktitle     = foal,
  abstract      = {Selector languages, or crosscut languages, play an important role in aspect-oriented programming. Examples of prominent selector languages include the pointcut language in AspectJ, traversal specifications in Demeter, XPath, and regular expressions. A selector language expression, also referred to as a selector, selects nodes on an instance graph (an execution tree or an ob ject tree) that satisfies a meta graph (a call graph or a class graph). The implementation of selector languages requires practically efficient algorithms for problems such as: Does a selector always (or never) select certain nodes Select-Always (Select-Never), does a selector ever select a node Select-Sat, does one selector imply another selector Select-Impl or may an edge in an instance graph lead to a node selected by the selector Select-Completion. 
We study these problems from the viewpoints of two important selector languages called SAJ, inspired by AspectJ, and SD, inspired by Demeter, and several of their sublanguages. We show a polynomial-time two-way reduction between SD and SAJ revealing interesting connections promoting transfer of algorithmic techniques from AspectJ to Demeter and vice-versa. We provide several practically useful polynomial-time algorithms for some of the problems and we show others to be NP-complete or co-NP-complete. We present a fixed parameter tractable (FPT) algorithm for one of the NP-complete problems. This early result indicates a line of attack for dealing with the intractability inherent in these problems.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIy4uLy4uLy4uL1BhcGVycy9MaWViZXJoZXJyLzIwMDUucGRm0hcLGBlXTlMuZGF0YU8RAaIAAAAAAaIAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqb5wgyMDA1LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpvoxeKRQQAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAKTGllYmVyaGVycgAQAAgAAMare/YAAAARAAgAAMXiyYEAAAABABgACpvnAAqbPgAKkacACpGkAAgAoQAAkOcAAgBFTWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpMaWViZXJoZXJyOjIwMDUucGRmAAAOABIACAAyADAAMAA1AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA4VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0xpZWJlcmhlcnIvMjAwNS5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgC0ALkAwQJnAmkCbgJ5AoICkAKUApsCpAKpArYCuQLLAs4C0wAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALV},
  date          = {2005-03},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Lin2015,
  author       = {Lin, Yu and Okur, Semih and Dig, Danny},
  title        = {Study and Refactoring of Android Asynchronous Programming},
  booktitle    = ase,
  series       = {ASE '15},
  pages        = {224--235},
  organization = {IEEE/ACM},
  publisher    = {IEEE Computer Society},
  acmid        = {2916252},
  date         = {2015},
  doi          = {10.1109/ASE.2015.50},
  isbn         = {978-1-5090-0025-8},
  location     = {Washington, DC, USA},
  numpages     = {12},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.07.11},
}

@InProceedings{lippert02,
  author        = {Lippert, M. and Lopes, C.},
  title         = {A study on exception detection and handling using {AOP}},
  booktitle     = icse,
  date          = {2002},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Liu2016,
  author    = {Liu, Hui and Liu, Qiurong and Staicu, Cristian-Alexandru and Pradel, Michael and Luo, Yue},
  title     = {Nomen Est Omen: Exploring and Exploiting Similarities Between Argument and Parameter Names},
  booktitle = icse,
  series    = {ICSE '16},
  pages     = {1063--1073},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2884841},
  date      = {2016},
  doi       = {10.1145/2884781.2884841},
  isbn      = {978-1-4503-3900-1},
  keywords  = {empirical study, identifier names, method arguments, name-based program analysis, static analysis},
  location  = {Austin, Texas},
  numpages  = {11},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Article{livshits05,
  author        = {Livshits, Benjamin and Zimmermann, Thomas},
  title         = {DynaMine: finding common error patterns by mining software revision histories},
  volume        = {30},
  number        = {5},
  pages         = {296--305},
  issn          = {0163-5948},
  abstract      = {A great deal of attention has lately been given to addressing software bugs such as errors in operating system drivers or security bugs. However, there are many other lesser known errors specific to individual applications or APIs and these violations of application-specific coding rules are responsible for a multitude of errors. In this paper we propose DynaMine, a tool that analyzes source code check-ins to find highly correlated method calls as well as common bug fixes in order to automatically discover application-specific coding patterns. Potential patterns discovered through mining are passed to a dynamic analysis tool for validation; finally, the results of dynamic analysis are presented to the user.The combination of revision history mining and dynamic analysis techniques leveraged in DynaMine proves effective for both discovering new application-specific patterns and for finding errors when applied to very large applications with many man-years of development and debugging effort behind them. We have analyzed Eclipse and jEdit, two widely-used, mature, highly extensible applications consisting of more than 3,600,000 lines of code combined. By mining revision histories, we have discovered 56 previously unknown, highly application-specific patterns. Out of these, 21 were dynamically confirmed as very likely valid patterns and a total of 263 pattern violations were found.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIS4uLy4uLy4uL1BhcGVycy9MaXZzaGl0cy8yMDA1LnBkZtIXCxgZV05TLmRhdGFPEQGcAAAAAAGcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm+kIMjAwNS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqb6sXikUEAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAACExpdnNoaXRzABAACAAAxqt79gAAABEACAAAxeLJgQAAAAEAGAAKm+kACps+AAqRpwAKkaQACAChAACQ5wACAENNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOkxpdnNoaXRzOjIwMDUucGRmAAAOABIACAAyADAAMAA1AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL0xpdnNoaXRzLzIwMDUucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsgC3AL8CXwJhAmYCcQJ6AogCjAKTApwCoQKuArECwwLGAssAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACzQ==},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1095430.1081754},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1095430.1081754},
  journaltitle  = {SIGSOFT Softw. Eng. Notes},
  location      = {New York, NY, USA},
  publisher     = {ACM},
}

@InProceedings{lopez-herrejon06,
  author        = {Lopez-Herrejon, R. and Batory, D. and Lengauer, C.},
  title         = {A disciplined approach to aspect composition},
  booktitle     = {ACM SIGPLAN symposium on partial evaluation and semantics-based program manipulation},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QRC4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3A0ODEtc3RlaW1hbm4ucGRm0hcLGBlXTlMuZGF0YU8RAdwAAAAAAdwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAANBcCSdIKwAAACa/+xFwNDgxLXN0ZWltYW5uLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ1fZxeKRYAAAAAAAAAAAAAMABgAACSAAAAAAAAAAAAAAAAAAAAAHcmVsYXRlZAAAEAAIAADQXEFnAAAAEQAIAADF4smgAAAAAQAcACa/+wAmk3gAJoZBABvjmAAb3BoAG8oLAAKT1QACAFtNYWNpbnRvc2ggSEQ6VXNlcnM6AHJhZmZpOgBEcm9wYm94OgBEb2N1bWVudHM6AHNjaG9vbDoANzg4X2F1MDc6AHJlbGF0ZWQ6AHA0ODEtc3RlaW1hbm4ucGRmAAAOACQAEQBwADQAOAAxAC0AcwB0AGUAaQBtAGEAbgBuAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBHVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvc2Nob29sLzc4OF9hdTA3L3JlbGF0ZWQvcDQ4MS1zdGVpbWFubi5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4A1QDaAOICwgLEAskC1ALdAusC7wL2Av8DBAMRAxQDJgMpAy4AAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADMA==},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1111542.1111554},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1111542.1111554},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/p481-steimann.pdf},
}

@InProceedings{Lu2008,
  author    = {Lu, Shan and Park, Soyeon and Seo, Eunsoo and Zhou, Yuanyuan},
  title     = {Learning from Mistakes: A Comprehensive Study on Real World Concurrency Bug Characteristics},
  booktitle = {International Conference on Architectural Support for Programming Languages and Operating Systems},
  series    = {ASPLOS XIII},
  pages     = {329--339},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1346323},
  date      = {2008},
  doi       = {10.1145/1346281.1346323},
  isbn      = {978-1-59593-958-6},
  keywords  = {bug characteristics, concurrency bug, concurrent program},
  location  = {Seattle, WA, USA},
  numpages  = {11},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.04.02},
}

@Online{Lueck2017,
  author    = {Nils L{\"u}ck},
  title     = {{GitHub--nlkl/Optional: A robust option type for C\#}},
  date      = {2017-07},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.15},
  url       = {http://github.com/nlkl/Optional},
  urldate   = {2017-07-15},
}

@Misc{Lundblad2016,
  author      = {Andreas Lundblad},
  title       = {Java: Do interfaces inherit from Object?},
  date        = {2016},
  lastchecked = {Tuesday, February 7, 2017},
  owner       = {Raffi Khatchadourian},
  timestamp   = {2017.07.06},
  url         = {http://programming.guide/java/do-interfaces-inherit-from-object.html},
  urldate     = {2016},
}

@Article{mahmoud04,
  author        = {Mahmoud, Qusay},
  title         = {The All-New Java 2 Platform, Standard Edition (J2SE) 5.0 Platform: Programming with the New Language Features in J2SE 5.0},
  note          = {\url{http://java.sun.com/developer/technicalArticles/releases/j2se15langfeat}},
  bdsk-url-1    = {http://java.sun.com/developer/technicalArticles/releases/j2se15langfeat/},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  publisher     = {Sun Developer Network},
  url           = {http://java.sun.com/developer/technicalArticles/releases/j2se15langfeat/},
}

@Book{manning08,
  title         = {Introduction to Information Retrieval},
  publisher     = {Cambridge University Press},
  author        = {Manning, Christopher D. and Raghavan, Prabhakar and Sch\"{u}tze, Hinrich},
  abstract      = {{Introduction to Information Retrieval is the first textbook with a coherent treatment of classical and web information retrieval, including web search and the related areas of text classification and text clustering. Written from a computer science perspective, it gives an up-to-date treatment of all aspects of the design and implementation of systems for gathering, indexing, and searching documents; methods for evaluating systems; and an introduction to the use of machine learning methods on text collections. Designed as the primary text for a graduate or advanced undergraduate course in information retrieval, the book will also interest researchers and professionals. A complete set of lecture slides and exercises that accompany the book are available on the web.}},
  bdsk-url-1    = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20%5C&amp;path=ASIN/0521865719},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{marin05,
  author        = {Marin, Marius and Moonen, Leon and van Deursen, Arie},
  title         = {An approach to aspect refactoring based on crosscutting concern types},
  booktitle     = {Workshop on Modeling and analysis of concerns in software},
  pages         = {1--5},
  address       = {New York, NY, USA},
  publisher     = {ACM Press},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1083125.1083140},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1083125.1083140},
  isbn          = {1-59593-119-8},
  location      = {St. Louis, Missouri},
}

@InProceedings{marin07,
  author        = {Marin, Marius and Moonen, Leon and van Deursen, Arie},
  title         = {An Integrated Crosscutting Concern Migration Strategy and its Application to {JH}ot{D}raw},
  booktitle     = scam,
  abstract      = {In this paper we propose a systematic strategy for migrating crosscutting concerns in existing object-oriented systems to aspect-based solutions. The proposed strategy consists of four steps: mining, exploration, documentation and refactoring of crosscutting concerns. We discuss in detail a new approach to aspect refactoring that is fully integrated with our strategy, and apply the whole strategy to an object-oriented system, namely the JHOTDRAW framework. The result of this migration is made available as an open-source project, which is the largest aspect refactoring available to date. We report on our experiences with conducting this case study and re- flect on the success and challenges of the migration process, as well as on the feasibility of automatic aspect refactoring.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHi4uLy4uLy4uL1BhcGVycy9NYXJpbi8yMDA3LnBkZtIXCxgZV05TLmRhdGFPEQGUAAAAAAGUAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm/AIMjAwNy5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqb8cXikUEAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAABU1hcmluAAAQAAgAAMare/YAAAARAAgAAMXiyYEAAAABABgACpvwAAqbPgAKkacACpGkAAgAoQAAkOcAAgBATWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpNYXJpbjoyMDA3LnBkZgAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL01hcmluLzIwMDcucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAK8AtAC8AlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  bdsk-url-1    = {http://dx.doi.org/10.1109/SCAM.2007.4},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Book{Martin1997,
  title     = {Pattern Languages of Program Design 3},
  publisher = addison,
  author    = {Martin, Robert C. and Riehle, Dirk and Buschmann, Frank},
  isbn      = {0-201-31011-2},
  date      = {1997},
  location  = {Boston, MA, USA},
  owner     = {rk1424},
  timestamp = {2017.12.11},
}

@InProceedings{masuhara03,
  author        = {Masuhara, H. and Kiczales, G. and Dutchyn, C.},
  title         = {A Compilation and Optimization Model for Aspect-Oriented Programs},
  booktitle     = cc,
  abstract      = {This paper presents a semantics-based compilation model for an aspect-oriented programming language based on its operational semantics. Using partial evaluation, the model can explain several issues in compilation processes, including how to find places in program text to insert aspect code and how to remove unnecessary run-time checks. It also illustrates optimization of calling-context sensitive pointcuts (cflow), implemented in real compilers.},
  bdsk-url-1    = {http://www.springerlink.com/content/w0mm6jdc12xptu1y/},
  bdsk-url-2    = {http://dx.doi.org/10.1007/3-540-36579-6_4},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1007/3-540-36579-6_4},
  isbn          = {978-3-540-00904-7},
  issn          = {0302-9743 (Print) 1611-3349 (Online)},
}

@Article{matsuoka93,
  author        = {Matsuoka, Satoshi and Yonezawa, Akinori},
  title         = {Analysis of inheritance anomaly in object-oriented concurrent programming languages},
  pages         = {107--150},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIS4uLy4uLy4uL1BhcGVycy9NYXRzdW9rYS8xOTkzLnBkZtIXCxgZV05TLmRhdGFPEQGcAAAAAAGcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKm/IIMTk5My5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqb88XikUEAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAACE1hdHN1b2thABAACAAAxqt79gAAABEACAAAxeLJgQAAAAEAGAAKm/IACps+AAqRpwAKkaQACAChAACQ5wACAENNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOk1hdHN1b2thOjE5OTMucGRmAAAOABIACAAxADkAOQAzAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL01hdHN1b2thLzE5OTMucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsgC3AL8CXwJhAmYCcQJ6AogCjAKTApwCoQKuArECwwLGAssAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACzQ==},
  book          = {Research directions in concurrent object-oriented programming},
  date          = {1993},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-262-01139-5},
  location      = {Cambridge, MA, USA},
  publisher     = {MIT Press},
}

@InProceedings{Mazinanian2017,
  author       = {Mazinanian, Davood and Ketkar, Ameya and Tsantalis, Nikolaos and Dig, Danny},
  title        = {Understanding the Use of Lambda Expressions in Java},
  volume       = {1},
  number       = {OOPSLA},
  pages        = {85:1--85:31},
  issn         = {2475-1421},
  acmid        = {3133909},
  articleno    = {85},
  date         = {2017-10},
  year         = {2017},
  month        = oct,
  doi          = {10.1145/3133909},
  issue_date   = {October 2017},
  journaltitle = oopsla,
  booktitle    = oopsla,
  keywords     = {Empirical Studies, Functional Programming, Java 8, Lambda Expressions, Multi-paradigm Programming, The Firehouse Interview Method},
  location     = {New York, NY, USA},
  numpages     = {31},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2018.07.11},
}

@InProceedings{Mazinanian2016,
  author    = {Mazinanian, Davood and Tsantalis, Nikolaos},
  title     = {Migrating Cascading Style Sheets to Preprocessors by Introducing Mixins},
  booktitle = ase,
  series    = {ASE 2016},
  pages     = {672--683},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2970348},
  date      = {2016},
  doi       = {10.1145/2970276.2970348},
  isbn      = {978-1-4503-3845-5},
  keywords  = {Cascading style sheets, duplication, migration, refactoring},
  location  = {Singapore, Singapore},
  numpages  = {12},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Article{mckenna2010genome,
  author        = {McKenna, Aaron and Hanna, Matthew and Banks, Eric and Sivachenko, Andrey and Cibulskis, Kristian and Kernytsky, Andrew and Garimella, Kiran and Altshuler, David and Gabriel, Stacey and Daly, Mark and others},
  title         = {The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data},
  volume        = {20},
  number        = {9},
  pages         = {1297--1303},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2010},
  journaltitle  = {Genome research},
  owner         = {Raffi Khatchadourian},
  publisher     = {Cold Spring Harbor Lab},
  timestamp     = {2017.12.08},
}

@InProceedings{McKinley1994,
  author        = {McKinley, Kathryn S},
  title         = {Evaluating automatic parallelization for efficient execution on shared-memory multiprocessors},
  booktitle     = {Proceedings of the 8\textsuperscript{th} international conference on Supercomputing},
  pages         = {54--63},
  organization  = {ACM},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {1994},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Electronic{McMahon2014,
  author        = {McMahon, Michael},
  title         = {JEP 110: HTTP/2 Client},
  note          = {\url{http://openjdk.java.net/jeps/110}},
  url           = {http://openjdk.java.net/jeps/110},
  date          = {2014},
  date-added    = {2016-01-20 00:17:06 +0000},
  date-modified = {2016-01-20 00:17:06 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
  urldate       = {May 12, 2014},
}

@InBook{mens08,
  pages              = {203--232},
  title              = {Evolution Issues in Aspect-Oriented Programming},
  publisher          = {Springer Berlin Heidelberg},
  author             = {Mens, Tom and Tourw{\'e}, Tom},
  isbn               = {978-3-540-76439-7 (Print) 978-3-540-76440-3 (Online)},
  abstract           = {This chapter identifies evolution-related issues and challenges in aspect-oriented programming. It can serve as a guideline for adopters of aspect technology to get a better idea of the evolution issues they may confront sooner or later, of the risks involved, and of the state-of-the-art in the techniques currently available to help them in addressing these issues. We focus in particular on the programming level, although some of the issues and challenges addressed may apply to earlier software development life-cycle phases as well. The discussed issues range from the exploration of crosscutting concerns in legacy code, via the migration of this code to an aspect-oriented solution, to the maintenance and evolution of the final aspect-oriented program over time. We discuss state-of-the-art techniques which address the issues of aspect exploration, extraction and evolution, and point out several issues for which no adequate solutions exist yet. We conclude that, even though some promising techniques are currently being investigated, due to the relative immaturity of the research domain many of the techniques are not out of the lab as yet.},
  bdsk-url-1         = {http://www.springerlink.com/content/r52h861qx6175xu5/},
  bdsk-url-2         = {http://dx.doi.org/10.1007/978-3-540-76440-3_9},
  booktitle          = {Software Evolution},
  date               = {2008},
  date-added         = {2015-09-24 11:37:33 +0000},
  date-modified      = {2015-09-24 11:37:33 +0000},
  doi                = {10.1007/978-3-540-76440-3_9},
  subject_collection = {Computer Science},
  url                = {http://www.springerlink.com/content/r52h861qx6175xu5/},
}

@Article{mick07,
  author        = {Mick, Colin K. and Lindsey, Georg N. and Callahan, Daniel},
  title         = {Toward usable user studies},
  volume        = {31},
  number        = {5},
  pages         = {347--356},
  date          = {2007-03},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Journal of the American Society for Information Science},
}

@Online{Microsoft2018,
  author    = {Microsoft},
  title     = {{LINQ}:~.{NET} Language Integrated Query},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
  url       = {http://msdn.microsoft.com/en-us/library/bb308959.aspx},
  urldate   = {2018-04-16},
}

@Electronic{sun-microsystemsa,
  author        = {{Sun Microsystems}},
  title         = {J{}ava 2 {P}latform {SE} 5.0 {API} {S}pecification},
  note          = {Last checked: September 28, 2009},
  url           = {http://java.sun.com/j2se/1.5.0/docs/api},
  bdsk-url-1    = {http://java.sun.com/j2se/1.5.0/docs/api},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{milicia04,
  author        = {Milicia, Giuseppe and Sassone, Vladimiro},
  title         = {The inheritance anomaly: ten years after},
  booktitle     = {SAC '04: Proceedings of the 2004 ACM symposium on Applied computing},
  pages         = {1267--1274},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9NaWxpY2lhLzIwMDQucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqcAQgyMDA0LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpwCxeKRQQAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHTWlsaWNpYQAAEAAIAADGq3v2AAAAEQAIAADF4smBAAAAAQAYAAqcAQAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6TWlsaWNpYToyMDA0LnBkZgAOABIACAAyADAAMAA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL01pbGljaWEvMjAwNC5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  bdsk-url-1    = {http://doi.acm.org.proxy.lib.ohio-state.edu/10.1145/967900.968159},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/967900.968159},
  isbn          = {1-58113-812-1},
  location      = {Nicosia, Cyprus},
}

@Www{MSR2018,
  author       = {{International Conference on Mining Software Repositories (MSR) 2018}},
  title        = {{MSR 2018 Mining Challenge}},
  date         = {2018},
  editor       = {Sebastian Proksch and Sven Amann and Sarah Nadi},
  organization = {ACM/IEEE},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018-07-14},
  url          = {http://2018.msrconf.org/track/msr-2018-Mining-Challenge},
  urldate      = {2018-07-14},
}

@Article{Minsky2008,
  author       = {Yaron Minsky and Stephen Weeks},
  title        = {Caml trading {\textendash} experiences with functional programming on Wall Street},
  volume       = {18},
  number       = {04},
  date         = {2008-04},
  doi          = {10.1017/s095679680800676x},
  journaltitle = {Journal of Functional Programming},
  owner        = {Raffi Khatchadourian},
  publisher    = {Cambridge University Press ({CUP})},
  timestamp    = {2017.07.07},
}

@InProceedings{mirarab07,
  author               = {Mirarab, S. and Hassouna, A. and Tahvildari, L.},
  title                = {Using Bayesian Belief Networks to Predict Change Propagation in Software Systems},
  booktitle            = {International Conference on Program Comprehension},
  pages                = {177--188},
  publisher            = {IEEE Computer Society},
  abstract             = {During software evolution, developers modify various modules to handle new requirements or to fix existing bugs. Such changes usually propagate to related modules throughout the system. Program comprehension techniques are able to predict this change propagation phenomenon. In this paper, we introduce a novel approach that predicts the possible affected system modules, given a change in the system. We use Bayesian Belief Networks as a probabilistic tool to make such predictions in a systematic way. This novel technique mainly relies on two sources of information: dependency metrics (calculated using static analysis) and change history extracted from a version control repository. We evaluate our approach by examining all significant revisions of Azureusl, an open-source Java system. The results show that the predicted change probabilities reflect actual module changes even in the early stages of the software development.},
  bdsk-url-1           = {http://dx.doi.org/10.1109/ICPC.2007.41},
  citeulike-article-id = {1429510},
  citeulike-linkout-0  = {http://portal.acm.org/citation.cfm?id=1270394.1271358},
  citeulike-linkout-1  = {http://dx.doi.org/10.1109/ICPC.2007.41},
  citeulike-linkout-2  = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4268252},
  date                 = {2007},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {10.1109/ICPC.2007.41},
  keywords             = {change, propagation},
  location             = {Washington, DC, USA},
  posted-at            = {2009-07-20 15:43:20},
}

@InProceedings{Mishne2012,
  author    = {Mishne, Alon and Shoham, Sharon and Yahav, Eran},
  title     = {Typestate-based Semantic Code Search over Partial Programs},
  booktitle = oopsla,
  series    = {OOPSLA '12},
  pages     = {997--1016},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2384689},
  date      = {2012},
  doi       = {10.1145/2384616.2384689},
  isbn      = {978-1-4503-1561-6},
  keywords  = {code search engine, ranking code samples, specification mining, static analysis, typestate},
  location  = {Tucson, Arizona, USA},
  numpages  = {20},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
}

@Article{misra81,
  author        = {Misra, J. and Chandy, K. M.},
  title         = {Proofs of Networks of Processes},
  volume        = {7},
  number        = {4},
  pages         = {417--426},
  issn          = {0098-5589},
  bdsk-url-1    = {http://portal.acm.org/ft_gateway.cfm?id=1313770&type=external&coll=GUIDE&dl=GUIDE&CFID=58532386&CFTOKEN=67594986},
  bdsk-url-2    = {http://dx.doi.org/10.1109/TSE.1981.230844},
  date          = {1981},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/TSE.1981.230844},
  journaltitle  = tse,
  location      = {Piscataway, NJ, USA},
  publisher     = {IEEE Press},
}

@InProceedings{Mongiovi2011,
  author    = {Mongiovi, Melina},
  title     = {Safira: A Tool for Evaluating Behavior Preservation},
  booktitle = {Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion},
  series    = {OOPSLA '11},
  pages     = {213--214},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2048213},
  date      = {2011},
  doi       = {10.1145/2048147.2048213},
  isbn      = {978-1-4503-0942-4},
  keywords  = {refactoring, testing},
  location  = {Portland, Oregon, USA},
  numpages  = {2},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{Moore1996,
  author    = {Moore, Ivan},
  title     = {Automatic Inheritance Hierarchy Restructuring and Method Refactoring},
  booktitle = oopsla,
  series    = {OOPSLA '96},
  pages     = {235--250},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Most, object-oriented programs have imperfectly designed inheritance hierarchies and imperfectly factored methods, and these imperfections tend to increase with maintenance. Hence, even object-oriented programs are more expensive to maintain, harder to understand and larger than necessary. Automatic restructuring of inheritance hierarchies and refactoring of methods can improve the design of inheritance hierarchies, and the factoring of methods. This results in programs being smaller, having better code re-use and being more consistent. This paper describes Guru, a prototype tool for automatic inheritance hierarchy restructuring and method refactoring of Self programs. Results from realistic applications of the tool are presented.},
  acmid     = {236361},
  date      = {1996},
  doi       = {10.1145/236337.236361},
  isbn      = {0-89791-788-X},
  location  = {San Jose, California, USA},
  numpages  = {16},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Article{morita2007automatic,
  author        = {Morita, Kazutaka and Morihata, Akimasa and Matsuzaki, Kiminori and Hu, Zhenjiang and Takeichi, Masato},
  title         = {Automatic inversion generates divide-and-conquer parallel programs},
  volume        = {42},
  number        = {6},
  pages         = {146--155},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2007},
  journaltitle  = {ACM SIGPLAN Notices},
  owner         = {Raffi Khatchadourian},
  publisher     = {ACM},
  timestamp     = {2017.12.08},
}

@Book{Naftalin2014,
  title     = {Mastering Lambdas: Java Programming in a Multicore World},
  publisher = {McGraw-Hill Education Group},
  year      = {2014},
  author    = {Naftalin, Maurice},
  edition   = {1\textsuperscript{st}},
  isbn      = {0071829628},
  date      = {2014-09-11},
  ean       = {9780071829625},
  owner     = {rk1424},
  timestamp = {2017.07.13},
}

@InProceedings{Nanda2009,
  author    = {Nanda, Mangala Gowri and Sinha, Saurabh},
  title     = {Accurate Interprocedural Null-Dereference Analysis for Java},
  booktitle = icse,
  series    = {ICSE '09},
  pages     = {133--143},
  publisher = {IEEE Computer Society},
  acmid     = {1555029},
  date      = {2009},
  doi       = {10.1109/ICSE.2009.5070515},
  isbn      = {978-1-4244-3453-4},
  location  = {Washington, DC, USA},
  numpages  = {11},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.11},
}

@Online{MDN2016,
  author    = {{Microsoft Developer Network}},
  title     = {Exceptions and Performance},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
  url       = {https://msdn.microsoft.com/en-us/library/ms229009(v=vs.110).aspx},
  urldate   = {2018-05-30},
}

@InProceedings{Nicolay2011,
  author    = {Nicolay, Jens and de Roover, Coen and de Meuter, Wolfgang and Jonckers, Viviane},
  title     = {Automatic Parallelization of Side-Effecting Higher-Order Scheme Programs},
  booktitle = {International Working Conference on Source Code Analysis and Manipulation},
  series    = {SCAM '11},
  pages     = {185--194},
  publisher = {IEEE Computer Society},
  abstract  = {The multi-core revolution heralds a challenging era for software maintainers. Manually parallelizing large sequential code bases is often infeasible. In this paper, we present a program transformation that automatically parallelizes real-life Scheme programs. The transformation has to be instantiated with an interprocedural dependence analysis that exposes parallelization opportunities in a sequential program. To this end, we extended a state-of-the art analysis that copes with higher-order procedures and side effects. Our parallelizing transformation exploits all opportunities for parallelization that are exposed by the dependence analysis. Experiments demonstrate that this brute-force approach realizes scalable speedups in certain benchmarks, while others would benefit from a more selective parallelization.},
  acmid     = {2068012},
  date      = {2011},
  doi       = {10.1109/SCAM.2011.13},
  isbn      = {978-0-7695-4347-5},
  keywords  = {parallelization, static analysis, program transformation},
  location  = {Washington, DC, USA},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
}

@Article{Nielebock2018,
  author       = {Nielebock, Sebastian and Heum{\"u}ller, Robert and Ortmeier, Frank},
  title        = {Programmers do not favor lambda expressions for concurrent object-oriented code},
  issn         = {1573-7616},
  abstract     = {Lambda expressions have long been state-of-the-art in the functional programming paradigm. Especially with regard to the use of higher-order functions, they provide developers with a means of defining predicate or projection functions locally, which greatly increases the comprehensibility of the resulting source code. This benefit has motivated language designers to also incorporate lambda expressions into object-oriented (OO) programming languages. In particular, they are claimed to facilitate concurrent programming. One likely reason for this assumption is their purity: pure lambda expressions are free of side effects, and therefore cannot cause, e.g., race conditions. In this paper, we present the first empirical analysis of whether or not this claim is true for OO projects. For this purpose, we investigated the application of lambda expressions in 2923 open-source projects, implemented in one of the most common OO programming languages: C{\#}, C++, and Java. We present three major findings. First, the majority of lambda expressions are not applied in concurrent code and most concurrent code does not make use of lambda expressions. Second, for all three of the languages, we observed that developers compromise their code by applying a significantly higher number of impure, capturing lambda expressions, which are capable of causing race conditions. Finally, we explored further use cases of lambda expressions and found out that testing, algorithmic implementation, and UI are far more common use-cases for the application of lambda expressions. Our results encourage to investigate in more detail the reasons that hinder programmers to apply lambda expressions in concurrent programming and to support developers, e.g., by providing automatic refactorings.},
  date         = {2018-05},
  year         = {2018},
  month        = may,
  day          = {02},
  doi          = {10.1007/s10664-018-9622-9},
  journaltitle = {Empirical Software Engineering},
  journal      = {Empirical Software Engineering},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018-07-14},
}

@Book{Nielson1999,
  title     = {Principles of Program Analysis},
  publisher = springer,
  author    = {Nielson, Flemming and Nielson, Hanne R. and Hankin, Chris},
  edition   = {2},
  isbn      = {3540654100},
  date      = {2004},
  location  = {Secaucus, NJ, USA},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.04.16},
}

@Book{Odersky2016,
  title     = {Programming in Scala},
  publisher = {Artima Press},
  author    = {Odersky, M. and Spoon, L. and Venners, B.},
  edition   = {3},
  date      = {2016-05},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{Ogasawara2001,
  author    = {Ogasawara, Takeshi and Komatsu, Hideaki and Nakatani, Toshio},
  title     = {A Study of Exception Handling and Its Dynamic Optimization in Java},
  booktitle = oopsla,
  series    = {OOPSLA '01},
  pages     = {83--95},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {504289},
  date      = {2001},
  doi       = {10.1145/504282.504289},
  isbn      = {1-58113-335-9},
  location  = {Tampa Bay, FL, USA},
  numpages  = {13},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{ohearn01,
  author               = {O'Hearn, Peter W. and Reynolds, John C. and Yang, Hongseok},
  title                = {Local Reasoning about Programs that Alter Data Structures},
  booktitle            = {International Workshop on Computer Science Logic},
  pages                = {1--19},
  publisher            = {Springer-Verlag},
  bdsk-file-1          = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9PJ0hlYXJuLzIwMDEucHPSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpwMBzIwMDEucHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnA7F4pFBAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAdPJ0hlYXJuAAAQAAgAAMare/YAAAARAAgAAMXiyYEAAAABABgACpwMAAqbPgAKkacACpGkAAgAoQAAkOcAAgBBTWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpPJ0hlYXJuOjIwMDEucHMAAA4AEAAHADIAMAAwADEALgBwAHMADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL08nSGVhcm4vMjAwMS5wcwATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  bdsk-file-2          = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9PJ0hlYXJuLzIwMDEucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqcDAgyMDAxLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpwNxeKRQQAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHTydIZWFybgAAEAAIAADGq3v2AAAAEQAIAADF4smBAAAAAQAYAAqcDAAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6TydIZWFybjoyMDAxLnBkZgAOABIACAAyADAAMAAxAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL08nSGVhcm4vMjAwMS5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  bdsk-url-1           = {http://portal.acm.org/citation.cfm?id=647851.737404},
  citeulike-article-id = {2485142},
  date                 = {2001},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  isbn                 = {3540425543},
  keywords             = {logic, reasoning, separation},
  location             = {London, UK},
  posted-at            = {2008-12-06 03:54:18},
}

@PhdThesis{Opdyke1992,
  author        = {Opdyke, William F.},
  title         = {Refactoring object-oriented frameworks},
  school        = {University of Illinois at Urbana-Champaign},
  date          = {1992},
  year          = {1992},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  institution   = {University of Illinois at Urbana-Champaign},
  location      = {Champaign, IL, USA},
  timestamp     = {2017.07.05},
}

@Online{OracleCorporation2017,
  author       = {Oracle},
  title        = {{java.util.stream (Java SE 9 \& JDK 9)}--Classes to support functional-style operations on streams of elements, such as map-reduce transformations on collections.},
  date         = {2017},
  lastaccessed = {April 3, 2018},
  location     = {500 Oracle Parkway, Redwood Shores, CA 94065 USA},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.04.05},
  url          = {http://docs.oracle.com/javase/9/docs/api/java/util/stream/package-summary.html},
}

@Online{Oracle2017d,
  author       = {Oracle},
  title        = {Thread Interference (The Java\texttrademark~Tutorials > Essential Classes > Concurrency)},
  date         = {2017},
  lastaccessed = {April 16, 2018},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.04.16},
  url          = {http://docs.oracle.com/javase/tutorial/essential/concurrency/interfere.html},
}

@Online{Oracle2017b,
  author       = {Oracle},
  title        = {Spliterator (Java SE 9 \& JDK 9)},
  date         = {2017},
  lastaccessed = {April 10, 2018},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.04.10},
  url          = {https://docs.oracle.com/javase/9/docs/api/java/util/Spliterator.html},
}

@Online{Oracle2017c,
  author       = {Oracle},
  title        = {Spliterator (Java SE 9 \& JDK 9)--Characteristics},
  date         = {2017},
  lastaccessed = {April 10, 2018},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.04.10},
  url          = {https://docs.oracle.com/javase/9/docs/api/java/util/Spliterator.html#characteristics--},
}

@InProceedings{ostermann07,
  author        = {Ostermann, Klaus},
  title         = {Aspects and modular reasoning in nonmonotonic logic},
  booktitle     = foal,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QQC4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL09zdGVybWFubi5wZGbSFwsYGVdOUy5kYXRhTxEBzAAAAAABzAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAA0FwJJ0grAAAAJr/7DU9zdGVybWFubi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnDjPF4pFgAAAAAAAAAAAAAwAGAAAJIAAAAAAAAAAAAAAAAAAAAAdyZWxhdGVkAAAQAAgAANBcQWcAAAARAAgAAMXiyaAAAAABABwAJr/7ACaTeAAmhkEAG+OYABvcGgAbygsAApPVAAIAV01hY2ludG9zaCBIRDpVc2VyczoAcmFmZmk6AERyb3Bib3g6AERvY3VtZW50czoAc2Nob29sOgA3ODhfYXUwNzoAcmVsYXRlZDoAT3N0ZXJtYW5uLnBkZgAADgAcAA0ATwBzAHQAZQByAG0AYQBuAG4ALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAENVc2Vycy9yYWZmaS9Ecm9wYm94L0RvY3VtZW50cy9zY2hvb2wvNzg4X2F1MDcvcmVsYXRlZC9Pc3Rlcm1hbm4ucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOANEA1gDeAq4CsAK1AsACyQLXAtsC4gLrAvAC/QMAAxIDFQMaAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAxw=},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1233833.1233841},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1233833.1233841},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/Ostermann.pdf},
}

@InProceedings{ostermann08,
  author        = {Ostermann, Klaus},
  title         = {Reasoning about Aspects With Common Sense},
  booktitle     = aosd,
  abstract      = {There has been a lot of debate about the modularity of aspect-oriented programs, and in particular the ability to reason about such programs in a modular way, although it has never been defined precisely what modular reasoning means. This work analyzes what it means to reason about a program, and separates ``modular reasoning'' into several well-defined properties of a reasoning model. A comparison of an OO language semantics with an AO language semantics with respect to these properties reveals that explanations of AOP that are based on weaving are a major obstacle to reasoning about AO programs in a modular way. We argue that a more modular semantics that is easier to reason about can be given to AO programs if we renounce the monotonicity of the corresponding reasoning system - a sacrifice that is well-known in artificial intelligence to model ``common sense'' reasoning. More generally, we claim that AOP should be understood as a form of nonmonotonic knowledge representation.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIi4uLy4uLy4uL1BhcGVycy9Pc3Rlcm1hbm4vMjAwOC5wZGbSFwsYGVdOUy5kYXRhTxEBoAAAAAABoAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpwXCDIwMDgucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnBjF+CtEUERGIAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAlPc3Rlcm1hbm4AABAACAAAxqt79gAAABEACAAAxfhjhAAAAAEAGAAKnBcACps+AAqRpwAKkaQACAChAACQ5wACAERNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOk9zdGVybWFubjoyMDA4LnBkZgAOABIACAAyADAAMAA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA3VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL09zdGVybWFubi8yMDA4LnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCzALgAwAJkAmYCawJ2An8CjQKRApgCoQKmArMCtgLIAssC0AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALS},
  bdsk-url-1    = {http://www.daimi.au.dk/~ko/papers/aosd08.pdf},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{ostermann05,
  author        = {Ostermann, Klaus and Mezini, Mira and Bockisch, C.},
  title         = {Expressive Pointcuts for Increased Modularity},
  booktitle     = ecoop,
  abstract      = {In aspect-oriented programming, pointcuts are used to describe crosscutting structure. Pointcuts that abstract over irrelevant implementation details are clearly desired to better support maintainability and modular reasoning. We present an analysis which shows that current pointcut languages support localization of crosscutting concerns but are problematic with respect to information hiding. To cope with the problem, we present a pointcut language that exploits information from different models of program semantics, such as the execution trace, the syntax tree, the heap, static type system, etc., and supports abstraction mechanisms analogous to functional abstraction. We show how this raises the abstraction level and modularity of pointcuts and present first steps toward an efficient implementation by means of a static analysis technique.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QKy4uLy4uLy4uLy4uLy4uLy4uL1BhcGVycy9Pc3Rlcm1hbm4vMjAwNS5wZGbSFwsYGVdOUy5kYXRhTxEBjAAAAAABjAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxGcFMkgrAAAAEaSJCDIwMDUucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARpIrDcio/UERGIAAAAAAABgADAAAJIAAAAAAAAAAAAAAAAAAAAAlPc3Rlcm1hbm4AABAACAAAxGc9cgAAABEACAAAw3JwjwAAAAEAFAARpIkAEaQ8ABF9UAARYxEAEV4IAAIAPE1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEb2N1bWVudHM6UGFwZXJzOk9zdGVybWFubjoyMDA1LnBkZgAOABIACAAyADAAMAA1AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAvVXNlcnMvcmFmZmkvRG9jdW1lbnRzL1BhcGVycy9Pc3Rlcm1hbm4vMjAwNS5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AvADBAMkCWQJbAmACawJ0AoIChgKNApYCmwKoAqsCvQLAAsUAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACxw==},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1007/11531142_10},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/ecoop05paper.pdf},
}

@Www{StackOverflow2018,
  author    = {{Stack Overflow}},
  title     = {Newest 'java-stream' Questions},
  date      = {2018-02},
  owner     = {rk1424},
  timestamp = {2018.03.06},
  url       = {http://stackoverflow.com/questions/tagged/java-stream},
  urldate   = {2018-03-06},
}

@Article{owicki76,
  author        = {Owicki, S. and Gries, D.},
  title         = {An axiomatic proof technique for parallel programs},
  volume        = {6},
  number        = {1},
  pages         = {319--340},
  date          = {1976},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Acta Informatica},
}

@InProceedings{Padovani2018,
  author    = {Luca Padovani},
  title     = {Deadlock-Free Typestate-Oriented Programming},
  booktitle = {International Conference on the Art, Science, and Engineering of Programming},
  series    = {Programming '18},
  publisher = {AOSA},
  abstract  = {Context. TypeState-Oriented Programming (TSOP) is a paradigm intended to help developers in the implementation and use of mutable objects whose public interface depends on their private state. Under this paradigm, well-typed programs are guaranteed to conform with the protocol of the objects they use.

Inquiry. Previous works have investigated TSOP for both sequential and concurrent objects. However, an important difference between the two settings still remains. In a sequential setting, a well-typed program either progresses indefinitely or terminates eventually. In a concurrent setting, protocol conformance is no longer enough to avoid deadlocks, a situation in which the execution of the program halts because two or more objects are involved in mutual dependencies that prevent any further progress.

Approach. In this work, we put forward a refinement of TSOP for concurrent objects guaranteeing that well-typed programs not only conform with the protocol of the objects they use, but are also deadlock free. The key ingredients of the type system are behavioral types, used to specify and enforce object protocols, and dependency relations, used to represent abstract descriptions of the dependencies between objects and detect circularities that might cause deadlocks.

Knowledge. The proposed approach stands out for two features. First, the approach is fully compositional and therefore scalable: the objects of a large program can be type checked in isolation; deadlock freedom of an object composition solely depends on the types of the objects being composed; any modification/refactoring of an object that does not affect its public interface does not affect other objects either. Second, we provide the first deadlock analysis technique for join patterns, a high-level concurrency abstraction with which programmers can express complex synchronizations in a succinct and declarative form.

Grounding. We detail the proposed typing discipline for a core programming language blending concurrent objects, asynchronous message passing and join patterns. We prove that the type system is sound and give non-trivial examples of programs that can be successfully analyzed. A Haskell implementation of the type system that demonstrates the feasibility of the approach is publicly available.

Importance. The static analysis technique described in this work can be used to certify programs written in a core language for concurrent TSOP with proven correctness guarantees. This is an essential first step towards the integration and application of the technique in a real-world developer toolchain, making programming of such systems more productive and less frustrating.},
  date      = {2018-04},
  doi       = {10.22152/programming-journal.org/2018/2/15},
  location  = {Nice, France},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.05.28},
}

@Book{Palsberg1994,
  title     = {Object-Oriented Type Systems (Wiley Professional Computing)},
  publisher = {John Wiley \& Sons Ltd.},
  author    = {Palsberg, Jens and Schwartzbach, Michael I.},
  isbn      = {0-471-94128-X},
  date      = {1994},
  location  = {Chichester, UK},
}

@Www{Pasareanu2018,
  author    = {Corina Pasareanu and Alessandro Garcia},
  title     = {ESEC/FSE 2018 Call for Research Papers},
  note      = {Section entitled "Topics of Interest"},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018.07.11},
  url       = {https://2018.fseconference.org/track/fse-2018-research-papers#content},
  urldate   = {2018-07-11},
}

@Article{Pawlowski2012,
  author       = {Jan M. Pawlowski and Markus Bick},
  title        = {Open Educational Resources},
  volume       = {4},
  number       = {4},
  pages        = {209--212},
  date         = {2012-06},
  doi          = {10.1007/s12599-012-0219-3},
  journaltitle = {Business {\&} Information Systems Engineering},
  owner        = {Raffi Khatchadourian},
  publisher    = {Springer Nature},
  timestamp    = {2017.07.07},
}

@InProceedings{perez-toledano07,
  author        = {Perez-Toledano, Miguel A. and Navasa, Amparo and Murillo, Juan M. and Canal, Carlos},
  title         = {TITAN: a Framework for Aspect Oriented System Evolution},
  booktitle     = {Software Engineering Advances},
  abstract      = {Aspect Oriented Software Development provides a suitable support for software system evolution. The system properties are better encapsulated resulting in easier manipulation. Besides, new properties or changes can be added to the systems as new aspects, reducing cost, effort and time. However, adding new aspects to an existing AO system could produce unexpected behaviour. In particular, when there is an aspect already operating in the same joint point that the new one, the two aspects may interfere each other. In this context, TITAN is a framework that supports system evolution through aspect oriented techniques, allowing to verify whether the added behaviour produces the expected results. The starting point is the UML specification of both the initial system and the aspects. From that point, the specification is validated generating a CCS algebraic description of the system. Next, extended (finite) state machines are automatically generated to verify, simulate, and test the modelled system behaviour. Additionally, the result of that process can also be compared with the behaviour of the new running system.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QJy4uLy4uLy4uL1BhcGVycy9QZXJlei1Ub2xlZGFuby8yMDA3LnBkZtIXCxgZV05TLmRhdGFPEQGuAAAAAAGuAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKnCAIMjAwNy5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqcIcXikUIAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAADlBlcmV6LVRvbGVkYW5vABAACAAAxqt79gAAABEACAAAxeLJggAAAAEAGAAKnCAACps+AAqRpwAKkaQACAChAACQ5wACAElNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOlBlcmV6LVRvbGVkYW5vOjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA8VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1BlcmV6LVRvbGVkYW5vLzIwMDcucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AuAC9AMUCdwJ5An4CiQKSAqACpAKrArQCuQLGAskC2wLeAuMAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAAC5Q==},
  bdsk-url-1    = {http://dx.doi.org/10.1109/ICSEA.2007.77},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Book{pierce02,
  title         = {Types and programming languages},
  publisher     = {MIT Press},
  author        = {Pierce, Benjamin C.},
  date          = {2002},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Pinto2015,
  author       = {Pinto, Gustavo and Soares-Neto, Francisco and Castor, Fernando},
  title        = {Refactoring for Energy Efficiency: A Reflection on the State of the Art},
  booktitle    = {International Workshop on Green and Sustainable Software},
  series       = {GREENS '15},
  pages        = {29--35},
  address      = {Piscataway, NJ, USA},
  organization = {IEEE/ACM},
  publisher    = {IEEE Press},
  acmid        = {2820165},
  date         = {2015-05},
  doi          = {10.1109/GREENS.2015.12},
  keywords     = {concurrency (computers);energy consumption;program testing;safety-critical software;software engineering;source code (software);code extensibility;code reusability;code testability;concurrent programming;premiere software engineering venue;refactoring research;refactoring tool;software characteristics;software energy consumption;software energy efficiency;software system;Computer languages;Energy consumption;Engines;Graphics processing units;Programming},
  location     = {Florence, Italy},
  numpages     = {7},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.07.11},
}

@Electronic{Poirier2015,
  author        = {Poirier, Yolande},
  title         = {The Java Source},
  url           = {http://blogs.oracle.com/java/entry/java_9_schedule_is_out},
  date          = {2015},
  date-added    = {2016-01-20 00:17:06 +0000},
  date-modified = {2016-01-20 00:17:06 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
  urldate       = {May 12, 2015},
}

@Online{QOS.ch2017,
  author    = {{QOS.ch}},
  title     = {{Simple Logging Facade for Java (SLF4J)}},
  date      = {2017},
  owner     = {rk1424},
  timestamp = {2017.07.17},
  url       = {http://www.slf4j.org},
  urldate   = {2017-07-17},
}

@InProceedings{Radoi2014,
  author        = {Radoi, Cosmin and Fink, Stephen J. and Rabbah, Rodric and Sridharan, Manu},
  title         = {Translating Imperative Code to {MapReduce}},
  booktitle     = oopsla,
  organization  = {ACM},
  date          = {2014},
  date-added    = {2016-09-27 20:46:30 +0000},
  date-modified = {2016-09-27 20:46:51 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
}

@InProceedings{rajan08,
  author               = {Rajan, Hridesh and Leavens, Gary},
  title                = {Ptolemy: A Language with Quantified, Typed Events},
  booktitle            = ecoop,
  bdsk-url-1           = {http://dx.doi.org/10.1007/978-3-540-70592-5%5C_8},
  citeulike-article-id = {3576175},
  date                 = {2008},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {http://dx.doi.org/10.1007/978-3-540-70592-5\_8},
  journaltitle         = {ECOOP 2008 -- Object-Oriented Programming},
  keywords             = {aspect-oriented, reasoning},
  posted-at            = {2008-11-19 03:12:07},
}

@InProceedings{ramalingam99,
  author        = {Ramalingam, G. and Field, John and Tip, Frank},
  title         = {Aggregate structure identification and its application to program analysis},
  booktitle     = popl,
  pages         = {119--132},
  address       = {New York, NY, USA},
  publisher     = {ACM Press},
  bdsk-url-1    = {http://doi.acm.org/10.1145/292540.292553},
  date          = {1999},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/292540.292553},
  isbn          = {1-58113-095-3},
  location      = {San Antonio, Texas, United States},
}

@InProceedings{ramesh95,
  author        = {Ramesh, B. and Powers, T. and Stubbs, C. and Edwards, M.},
  title         = {Implementing requirements traceability: a case study},
  booktitle     = req,
  bdsk-url-1    = {http://doi.ieeecomputersociety.org/10.1109/ISRE.1995.512549},
  date          = {1995},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/ISRE.1995.512549},
  isbn          = {0-8186-7017-7},
}

@Article{Ravishankar2014,
  author       = {Ravishankar, Mahesh and Eisenlohr, John and Pouchet, Louis-No\"{e}l and Ramanujam, J. and Rountev, Atanas and Sadayappan, P.},
  title        = {Automatic Parallelization of a Class of Irregular Loops for Distributed Memory Systems},
  volume       = {1},
  number       = {1},
  pages        = {7:1--7:37},
  issn         = {2329-4949},
  acmid        = {2660251},
  articleno    = {7},
  date         = {2014-10},
  doi          = {10.1145/2660251},
  issue_date   = {September 2014},
  journaltitle = topm,
  keywords     = {Distributed-memory systems, inspector-executor, irregular applications, parallelization},
  location     = {New York, NY, USA},
  numpages     = {37},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2017.12.14},
}

@InProceedings{Raza2009,
  author        = {Raza, Mohammad and Calcagno, Cristiano and Gardner, Philippa},
  title         = {Automatic Parallelization with Separation Logic.},
  booktitle     = {ESOP},
  volume        = {9},
  pages         = {348--362},
  organization  = {Springer},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2009},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Electronic{Reinhold2014,
  author        = {Reinhold, Mark},
  title         = {JEP 201: Modular Source Code},
  url           = {http://openjdk.java.net/jeps/201},
  date          = {2014},
  date-added    = {2016-01-20 00:17:06 +0000},
  date-modified = {2016-01-20 00:17:06 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
  urldate       = {July 22, 2014},
}

@Electronic{report2015,
  author        = {{U.S. News \& World Report}},
  title         = {Campus Ethnic Diversity, Regional Colleges (North)},
  note          = {\url{http://colleges.usnews.rankingsandreviews.com/best-colleges/rankings/regional-colleges-north/campus-ethnic-diversity}},
  url           = {http://colleges.usnews.rankingsandreviews.com/best-colleges/rankings/regional-colleges-north/campus-ethnic-diversity},
  date          = {2015},
  date-added    = {2015-09-29 21:09:16 +0000},
  date-modified = {2015-09-29 21:59:30 +0000},
}

@InProceedings{rinard04,
  author        = {Rinard, Martin and Salcianu, Alexandru and Bugrara, Suhabe},
  title         = {A classification system and analysis for aspect-oriented programs},
  booktitle     = fse,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1029894.1029917},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1029894.1029917},
  location      = {Newport Beach, CA, USA},
}

@Article{del2016assessing,
  author        = {del Rio Astorga, David and Sotomayor, Rafael and Sanchez, Luis Miguel and Blas, Javier Garcia and Calderon, Alejandro and Fernandez, Javier},
  title         = {Assessing and discovering parallelism in C++ code for heterogeneous platforms},
  pages         = {1--16},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2016},
  journaltitle  = {The Journal of Supercomputing},
  owner         = {Raffi Khatchadourian},
  publisher     = {Springer},
  timestamp     = {2017.12.08},
}

@InProceedings{robillard06,
  author        = {Robillard, Martin P.},
  title         = {Tracking Concerns in Evolving Source Code: An Empirical Study},
  booktitle     = icsm,
  abstract      = {The association between the description of a concern (e.g., a feature) and the code that implements it is valuable information that can degrade as the code of a system evolves. We present a study of the evolution of the implementation of a concern in 33 versions of an open-source text editor. We represented the implementation of the concern using concern graphs, a model that was designed to be resilient to source code evolution. The study showed how the concern graph model supports tracking a concern's implementation in an evolving system, as well as inferring high-level past changes and assessing the stability of the concern's implementation.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIi4uLy4uLy4uL1BhcGVycy9Sb2JpbGxhcmQvMjAwNi5wZGbSFwsYGVdOUy5kYXRhTxEBoAAAAAABoAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpwpCDIwMDYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnC3F4pFCAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAlSb2JpbGxhcmQAABAACAAAxqt79gAAABEACAAAxeLJggAAAAEAGAAKnCkACps+AAqRpwAKkaQACAChAACQ5wACAERNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOlJvYmlsbGFyZDoyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA3VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1JvYmlsbGFyZC8yMDA2LnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCzALgAwAJkAmYCawJ2An8CjQKRApgCoQKmArMCtgLIAssC0AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALS},
  bdsk-url-1    = {http://dx.doi.org/10.1109/ICSM.2006.70},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{robillard02,
  author        = {Robillard, Martin P. and Murphy, Gail C.},
  title         = {Concern graphs: finding and describing concerns using structural program depend.},
  booktitle     = icse,
  abstract      = {Many maintenance tasks address concerns, or features, that are not well modularized in the source code comprising a system. Existing approaches available to help software developers locate and manage scattered concerns use a representation based on lines of source code, complicating the analysis of the concerns. In this paper, we introduce the Concern Graph representation that abstracts the implementation details of a concern and makes explicit the relationships between different parts of the concern. The abstraction used in a Concern Graph has been designed to allow an obvious and inexpensive mapping back to the corresponding source code. To investigate the practical tradeoffs related to this approach, we have built the Feature Exploration and Analysis tool (FEAT) that allows a developer to manipulate a concern representation extracted from a Java system, and to analyze the relationships of that concern to the code base. We have used this tool to find and describe concerns related to software change tasks. We have performed case studies to evaluate the feasibility, usability, and scalability of the approach. Our results indicate that Concern Graphs can be used to document a concern for change, that developers unfamiliar with Concern Graphs can use them effectively, and that the underlying technology scales to industrial-sized programs.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIi4uLy4uLy4uL1BhcGVycy9Sb2JpbGxhcmQvMjAwMi5wZGbSFwsYGVdOUy5kYXRhTxEBoAAAAAABoAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpwpCDIwMDIucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnCrGI5qfUERGIAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAlSb2JpbGxhcmQAABAACAAAxqt79gAAABEACAAAxiPS3wAAAAEAGAAKnCkACps+AAqRpwAKkaQACAChAACQ5wACAERNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOlJvYmlsbGFyZDoyMDAyLnBkZgAOABIACAAyADAAMAAyAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA3VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1JvYmlsbGFyZC8yMDAyLnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCzALgAwAJkAmYCawJ2An8CjQKRApgCoQKmArMCtgLIAssC0AAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAALS},
  bdsk-url-1    = {http://doi.acm.org/10.1145/581339.581390},
  date          = {2002},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Roy2009,
  author       = {Roy, Chanchal K. and Cordy, James R. and Koschke, Rainer},
  title        = {Comparison and Evaluation of Code Clone Detection Techniques and Tools: A Qualitative Approach},
  volume       = {74},
  number       = {7},
  pages        = {470--495},
  issn         = {0167-6423},
  acmid        = {1531101},
  date         = {2009-05},
  doi          = {10.1016/j.scico.2009.02.007},
  issue_date   = {May, 2009},
  journaltitle = {Science of Computer Programming},
  keywords     = {Clone detection, Comparison, Scenario-based evaluation, Software clone},
  location     = {Amsterdam, The Netherlands, The Netherlands},
  numpages     = {26},
  owner        = {Raffi Khatchadourian},
  publisher    = {Elsevier North-Holland, Inc.},
  timestamp    = {2017.07.05},
}

@InProceedings{royce87,
  author        = {Royce, W. W.},
  title         = {Managing the development of large software systems: concepts and techniques},
  booktitle     = icse,
  pages         = {328--338},
  address       = {Los Alamitos, CA, USA},
  publisher     = {IEEE Computer Society Press},
  date          = {1987},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-89791-216-0},
  location      = {Monterey, California, United States},
}

@InProceedings{Rugina1999,
  author       = {Rugina, Radu and Rinard, Martin},
  title        = {Automatic Parallelization of Divide and Conquer Algorithms},
  booktitle    = {Symposium on Principles and Practice of Parallel Programming},
  series       = {PPoPP '99},
  pages        = {72--83},
  address      = {New York, NY, USA},
  organization = {ACM SIGPLAN},
  publisher    = {ACM},
  acmid        = {301111},
  date         = {1999},
  doi          = {10.1145/301104.301111},
  isbn         = {1-58113-100-3},
  location     = {Atlanta, Georgia, USA},
  numpages     = {12},
}

@InProceedings{rugina2000symbolic,
  author        = {Rugina, Radu and Rinard, Martin},
  title         = {Symbolic bounds analysis of pointers, array indices, and accessed memory regions},
  booktitle     = {ACM Sigplan Notices},
  volume        = {35},
  number        = {5},
  pages         = {182--195},
  organization  = {ACM},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {2000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@InProceedings{sackmann2011model,
  author        = {Sackmann, Margarete and Ebraert, Peter and Janssens, Dirk},
  title         = {A Model-Driven Approach for Software Parallelization.},
  booktitle     = {MoDELS Workshops},
  pages         = {276--290},
  organization  = {Springer},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2011},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@InProceedings{Sakkinen1989,
  author        = {Sakkinen, Markku},
  title         = {Disciplined Inheritance},
  booktitle     = ecoop,
  date          = {1989},
  date-added    = {2016-08-20 22:20:07 +0000},
  date-modified = {2016-08-26 20:33:45 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
}

@InProceedings{sakurai08,
  author        = {Sakurai, Kouhei and Masuhara, Hidehiko},
  title         = {Test-based pointcuts for robust and fine-grained join point specification},
  booktitle     = {AOSD '08: Proceedings of the 7\textsuperscript{th} international conference on Aspect-oriented software development},
  pages         = {96--107},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1353482.1353494},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1353482.1353494},
  isbn          = {978-1-60558-044-9},
  location      = {Brussels, Belgium},
}

@InProceedings{Sato2011,
  author    = {Sato, Shigeyuki and Iwasaki, Hideya},
  title     = {Automatic Parallelization via Matrix Multiplication},
  booktitle = pldi,
  series    = {PLDI '11},
  pages     = {470--479},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {1993554},
  date      = {2011},
  doi       = {10.1145/1993498.1993554},
  isbn      = {978-1-4503-0663-8},
  keywords  = {automatic parallelization, linear recurrence equation, loop, matrix multiplication, reduction, scan, semiring},
  location  = {San Jose, California, USA},
  numpages  = {10},
}

@InProceedings{sato2012whole,
  author        = {Sato, Yukinori and Inoguchi, Yasushi and Nakamura, Tadao},
  title         = {Whole program data dependence profiling to unveil parallel regions in the dynamic execution},
  booktitle     = {Workload Characterization (IISWC), 2012 IEEE International Symposium on},
  pages         = {69--80},
  organization  = {IEEE},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2012},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Article{Sawin2009,
  author       = {Sawin, Jason and Rountev, Atanas},
  title        = {Improving static resolution of dynamic class loading in java using dynamically gathered environment information},
  volume       = {16},
  number       = {2},
  pages        = {357--381},
  date         = {2009},
  doi          = {10.1007/s10515-009-0049-9},
  journaltitle = {Automated Software Engineering},
  owner        = {rk1424},
  publisher    = {Springer},
  timestamp    = {2017.07.13},
}

@Article{Schafer2012,
  author       = {Schafer, Max and Thies, Andreas and Steimann, Friedrich and Tip, Frank},
  title        = {A Comprehensive Approach to Naming and Accessibility in Refactoring Java Programs},
  volume       = {38},
  number       = {6},
  pages        = {1233--1257},
  issn         = {0098-5589},
  acmid        = {2420788},
  date         = {2012-11},
  doi          = {10.1109/TSE.2012.13},
  issue_date   = {November 2012},
  journaltitle = tse,
  keywords     = {Java,Access control,Feature extraction,Reverse engineering,Object oriented programming,Shadow mapping,Program processors,Java,Restructuring,reverse engineering,and reengineering,object-oriented languages},
  location     = {Piscataway, NJ, USA},
  numpages     = {25},
  owner        = {Raffi Khatchadourian},
  publisher    = {IEEE Press},
  timestamp    = {2017.07.06},
}

@InProceedings{seiter07,
  author        = {Seiter, Linda M.},
  title         = {Role annotations and adaptive aspect frameworks},
  booktitle     = late,
  abstract      = {This paper presents a model for improving the adaptiveness of AOP frameworks. While a metadata pointcut can be an effective tool for encapsulating and consuming the program events related to a crosscutting concern, AOP languages do not provide a succinct mechanism for binding certain types of crosscutting object references used in advice. We present a design pattern for writing adaptive aspects that consume role-based annotations, enabling a framework to be written in a manner that diminishes the occurrence of the fragile pointcut problem.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9TZWl0ZXIvMjAwNy5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpw9CDIwMDcucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnD7F4pFCAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZTZWl0ZXIAEAAIAADGq3v2AAAAEQAIAADF4smCAAAAAQAYAAqcPQAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6U2VpdGVyOjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1NlaXRlci8yMDA3LnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1275672.1275675},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Online{Seppaelae2017,
  author    = {Ilkka Sepp\"{a}l\"{a}},
  title     = {Design patterns implemented in {Java}},
  date      = {2017-12},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.09},
  url       = {http://java-design-patterns.com},
  urldate   = {2017-12-09},
}

@InProceedings{sereni03,
  author        = {Sereni, Damien and de Moor, Oege},
  title         = {Static analysis of aspects},
  booktitle     = aosd,
  pages         = {30--39},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  abstract      = {Aspects are a novel programming language feature, to express concerns in program design that crosscut traditional abstraction boundaries. The focus of this paper are dynamic aspects. Such aspects are specified as pointcut designators (patterns in the call stack), coupled with advice (code whose execution is triggered by the given pattern). We propose a more primitive syntax for pointcut designators, based on regular expressions. This primitive syntax facilitates a new static analysis that in turn enables a more efficient implementation of aspects.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9TZXJlbmkvMjAwMy5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpw/CDIwMDMucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnEDF4pFCAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZTZXJlbmkAEAAIAADGq3v2AAAAEQAIAADF4smCAAAAAQAYAAqcPwAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6U2VyZW5pOjIwMDMucGRmAAAOABIACAAyADAAMAAzAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1NlcmVuaS8yMDAzLnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  bdsk-url-1    = {http://doi.acm.org/10.1145/643603.643607},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/643603.643607},
  isbn          = {1-58113-660-9},
  location      = {Boston, Massachusetts},
}

@InProceedings{shankar-pajela-16,
  author    = {Shankar, Subash and Pajela, Gilbert},
  title     = {A Tool Integrating Model Checking into a {C} Verification Toolset},
  booktitle = {International Symposium on Model Checking of Software},
  date      = {2016},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.06.23},
}

@Www{fsharp,
  author  = {Mikhail Shilkov},
  title   = {Introducing Stream Processing in F\#},
  date    = {2016-11-29},
  url     = {http://mikhail.io/2016/11/introducing-stream-processing-in-fsharp},
  urldate = {2018-07-18},
}

@PhdThesis{Shivers1991,
  author      = {Shivers, Olin Grigsby},
  title       = {Control-flow Analysis of Higher-order Languages of Taming Lambda},
  type        = phdthesis,
  note        = {UMI Order No. GAX91-26964},
  abstract    = {Programs written in powerful, higher-order languages like Scheme, ML, and Common Lisp should run as fast as their FORTRAN and C counterparts. They should, but they don't. A major reason is the level of optimisation applied to these two classes of languages. Many FORTRAN and C compilers employ an arsenal of sophisticated global optimisations that depend upon data-flow analysis: common-subexpression elimination, loop-invariant detection, induction-variable elimination, and many, many more. Compilers for higher-order languages do not provide these optimisations. Without them, Scheme, LISP and ML compilers are doomed to produce code that runs slower than their FORTRAN and C counterparts.
The problem is the lack of an explicit control-flow graph at compile time, something which traditional data-flow analysis techniques require. In this dissertation, I present a technique for recovering the control-flow graph of a Scheme program at compile time. I give examples of how this information can be used to perform several data-flow analysis optimisations, including copy propagation, induction-variable elimination, useless-variable elimination, and type recovery.

The analysis is defined in terms of a non-standard semantic interpretation. The denotational semantics is carefully developed, and several theorems establishing the correctness of the semantics and the implementing algorithms are proven.},
  date        = {1991},
  institution = {Carnegie Mellon University},
  location    = {Pittsburgh, PA, USA},
  owner       = {Raffi Khatchadourian},
  timestamp   = {2018.04.16},
}

@Article{sihman03,
  author        = {Sihman, Marcelo and Katz, Shmuel},
  title         = {Superimpositions and Aspect-oriented Programming},
  volume        = {46},
  number        = {5},
  pages         = {529--541},
  date          = {2003-09},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {The Computer Journal},
}

@InProceedings{sillito04,
  author        = {Sillito, Jonathan and Dutchyn, Christopher and Eisenberg, Andrew David and Volder, Kris De},
  title         = {Use Case Level Pointcuts},
  booktitle     = ecoop,
  abstract      = {Software developers create a variety of artifacts that model the behaviour of applications at different levels of abstraction; e.g. use cases, sequence diagrams, and source code. Aspect-oriented programming languages, such as AspectJ, support the modularization of crosscutting concerns at the source code level. However, crosscutting concerns also arise in other behavioural models of software systems. We provide a new aspect language, AspectU, which supports modularization of crosscutting concerns in the use-case model. Further, we provide a prototype tool that partially translates AspectU aspects into AspectJ aspects. To facilitate this translation we introduce a third aspect language, AspectSD, which targets the sequence-diagram model. AspectU together with our translation tool allows developers to express advice using use case level concepts while still affecting the runtime behaviour of a system, yielding a natural and intensional expression of some concerns.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIC4uLy4uLy4uL1BhcGVycy9TaWxsaXRvLzIwMDQucGRm0hcLGBlXTlMuZGF0YU8RAZoAAAAAAZoAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqcQQgyMDA0LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpxCxeKRQgAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAHU2lsbGl0bwAAEAAIAADGq3v2AAAAEQAIAADF4smCAAAAAQAYAAqcQQAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQk1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6U2lsbGl0bzoyMDA0LnBkZgAOABIACAAyADAAMAA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA1VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1NpbGxpdG8vMjAwNC5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsQC2AL4CXAJeAmMCbgJ3AoUCiQKQApkCngKrAq4CwALDAsgAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACyg==},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Singh1995,
  author       = {Singh, Ghan Bir},
  title        = {Single Versus Multiple Inheritance in Object Oriented Programming},
  volume       = {6},
  number       = {1},
  pages        = {30--39},
  issn         = {1055-6400},
  acmid        = {209871},
  date         = {1995-01},
  doi          = {10.1145/209866.209871},
  issue_date   = {Jan. 1995},
  journaltitle = {SIGPLAN OOPS Mess.},
  location     = {New York, NY, USA},
  numpages     = {10},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2017.07.06},
}

@Article{Singh1992,
  author        = {Singh, Jaswinder Pal and Hennessy, John L},
  title         = {An empirical investigation of the effectiveness and limitations of automatic parallelization},
  pages         = {203--207},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {1992},
  journaltitle  = {Shared Memory Multiprocessing},
  owner         = {Raffi Khatchadourian},
  publisher     = {MIT Press},
  timestamp     = {2017.12.14},
}

@Electronic{Smith2013,
  author        = {Smith, Dan},
  title         = {'synchronized' interface methods},
  url           = {http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-January/000165.html},
  date          = {2013-01},
  date-added    = {2016-07-28 20:06:04 +0000},
  date-modified = {2016-07-28 20:08:37 +0000},
  institution   = {Oracle Corporation},
  lastchecked   = {July 28, 2016},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
  urldate       = {January 8, 2013},
}

@Article{Soares2013,
  author       = {Soares, Gustavo and Gheyi, Rohit and Massoni, Tiago},
  title        = {Automated Behavioral Testing of Refactoring Engines},
  volume       = {39},
  number       = {2},
  pages        = {147--162},
  issn         = {0098-5589},
  acmid        = {2478700},
  date         = {2013-02},
  doi          = {10.1109/TSE.2012.19},
  issue_date   = {February 2013},
  journaltitle = tse,
  keywords     = {Java,Metals,Engines,Computer bugs,Testing,Automatic programming,Unified modeling language,program generation,Refactoring,automated testing},
  location     = {Piscataway, NJ, USA},
  numpages     = {16},
  owner        = {Raffi Khatchadourian},
  publisher    = {IEEE Press},
  timestamp    = {2017.07.06},
}

@Article{soares06,
  author        = {Soares, S\'{e}rgio and Borba, Paulo and Laureano, Eduardo},
  title         = {Distribution and persistence as aspects},
  volume        = {36},
  number        = {7},
  pages         = {711--759},
  issn          = {0038-0644},
  bdsk-url-1    = {http://dx.doi.org/10.1002/spe.v36:7},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1002/spe.v36:7},
  journaltitle  = {Softw. Pract. Exper.},
  location      = {New York, NY, USA},
  publisher     = {John Wiley \& Sons, Inc.},
}

@InProceedings{Song2009,
  author        = {Song, Myoungkyu and Tilevich, Eli and Tansey, Wesley},
  title         = {Trailblazer: a tool for automated annotation refactoring},
  booktitle     = oopsla,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1639950.1640028},
  date          = {2009},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Soundarajan2011a,
  author    = {Soundarajan, Neelam and Bronish, Derek and Khatchadourian, Raffi},
  title     = {Formalizing Reusable Aspect-Oriented Concurrency Control},
  booktitle = {Proceedings of the 23\textsuperscript{rd} International Conference on Software Engineering {\&} Knowledge Engineering (SEKE '11)},
  pages     = {111--114},
  publisher = {Knowledge Systems Institute Graduate School},
  date      = {2011-07},
  owner     = {rk1424},
  timestamp = {2017.07.18},
}

@InProceedings{Soundarajan2009,
  author        = {Soundarajan, Neelam and Khatchadourian, Raffi},
  title         = {Specifying Reusable Aspects},
  booktitle     = {Proceedings of the 5\textsuperscript{th} Asian Workshop on Aspect-Oriented and Modular Software Development (AOAsia '09) at the 24\textsuperscript{th} International Conference on Automated Software Engineering (ASE '09)},
  date          = {2009-11},
  date-added    = {2009-10-18 21:19:48 -0400},
  date-modified = {2014-01-07 06:06:23 +0000},
  location      = {Auckland, New Zealand},
  owner         = {rk1424},
  timestamp     = {2017.07.18},
}

@InProceedings{Soundarajan2007a,
  author    = {Soundarajan, Neelam and Khatchadourian, Raffi and Dovland, Johan},
  title     = {Reasoning about the Behavior of Aspect-Oriented Programs},
  booktitle = {Proceedings of the 11\textsuperscript{th} IASTED International Conference on Software Engineering and Applications},
  editor    = {Smith, J.},
  series    = {SEA '07},
  pages     = {198--202},
  address   = {Anaheim, CA, USA},
  publisher = {ACTA Press},
  abstract  = {Aspect-oriented programming (AOP) has become increasingly popular over the last few years. At the same time, reasoning about the behavior of these programs poses serious challenges. In this paper, we present a rely-guaranteeapproach to such reasoning. The rely-guarantee approach has proven useful in reasoning about concurrent and distributed programs. We show that some of the key problems encountered in reasoning about aspect-oriented programs are similar to those encountered in reasoning about concurrent programs; and that the rely-guarantee approach, appropriately modified, helps address these problems.  We illustrate our approach with a simple example.},
  acmid     = {1647670},
  date      = {2007-11},
  isbn      = {978-0-88986-706-2},
  keywords  = {Aspect-oriented programs, Behavioral reasoning},
  location  = {Cambridge, Massachusetts},
  numpages  = {5},
  owner     = {rk1424},
  timestamp = {2017.07.18},
}

@Www{SpotBugs2018,
  author    = {{SpotBugs}},
  title     = {{SpotBugs} static analaysis tool},
  note      = {Formally FindBugs.},
  date      = {2018},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-18},
  url       = {http://spotbugs.github.io},
  urldate   = {2018-07-18},
}

@Book{springsource,
  title         = {Spring Framework},
  author        = {{SpringSource}},
  note          = {\url{http://www.springframework.org}},
  bdsk-url-1    = {http://www.springframework.org},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Steensgaard1996,
  author       = {Steensgaard, Bjarne},
  title        = {Points-to analysis in almost linear time},
  booktitle    = popl,
  pages        = {32--41},
  organization = {ACM},
  publisher    = {ACM},
  date         = {1996},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.12.14},
}

@InProceedings{Steffan1998,
  author        = {Steffan, J Gregory and Mowry, Todd C},
  title         = {The potential for using thread-level data speculation to facilitate automatic parallelization},
  booktitle     = {International Symposium on High-Performance Computer Architecture},
  pages         = {2--13},
  organization  = {IEEE},
  __markedentry = {[Raffi Khatchadourian:]},
  date          = {1998},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
}

@InProceedings{steimann06a,
  author        = {Steimann, F.},
  title         = {The paradoxical success of aspect-oriented programming},
  booktitle     = oopsla,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QRC4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3A0ODEtc3RlaW1hbm4ucGRm0hcLGBlXTlMuZGF0YU8RAdwAAAAAAdwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAANBcCSdIKwAAACa/+xFwNDgxLXN0ZWltYW5uLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ1fZxeKRYAAAAAAAAAAAAAMABgAACSAAAAAAAAAAAAAAAAAAAAAHcmVsYXRlZAAAEAAIAADQXEFnAAAAEQAIAADF4smgAAAAAQAcACa/+wAmk3gAJoZBABvjmAAb3BoAG8oLAAKT1QACAFtNYWNpbnRvc2ggSEQ6VXNlcnM6AHJhZmZpOgBEcm9wYm94OgBEb2N1bWVudHM6AHNjaG9vbDoANzg4X2F1MDc6AHJlbGF0ZWQ6AHA0ODEtc3RlaW1hbm4ucGRmAAAOACQAEQBwADQAOAAxAC0AcwB0AGUAaQBtAGEAbgBuAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgBHVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvc2Nob29sLzc4OF9hdTA3L3JlbGF0ZWQvcDQ4MS1zdGVpbWFubi5wZGYAABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4A1QDaAOICwgLEAskC1ALdAusC7wL2Av8DBAMRAxQDJgMpAy4AAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAADMA==},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1167473.1167514},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1167473.1167514},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/p481-steimann.pdf},
}

@Article{Steimann2018,
  author       = {Steimann, Friedrich},
  title        = {Constraint-Based Refactoring},
  volume       = {40},
  number       = {1},
  pages        = {2:1--2:40},
  issn         = {0164-0925},
  acmid        = {3156016},
  articleno    = {2},
  date         = {2018-01},
  doi          = {10.1145/3156016},
  issue_date   = {January 2018},
  journaltitle = toplas,
  keywords     = {Refactoring, constraint-based repair},
  location     = {New York, NY, USA},
  numpages     = {40},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2018.07.11},
}

@InProceedings{steimann06,
  author        = {Steimann, Friedrich and Mayer, Philip and Mei{\ss}ner, Andreas},
  title         = {Decoupling classes with inferred interfaces},
  booktitle     = {ACM Symposium on Applied Computing},
  pages         = {1404--1408},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Steimann2012,
  author    = {Steimann, Friedrich and von Pilgrim, Jens},
  title     = {Constraint-Based Refactoring with Foresight},
  booktitle = ecoop,
  series    = {ECOOP'12},
  pages     = {535--559},
  address   = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid     = {2367197},
  date      = {2012},
  doi       = {10.1007/978-3-642-31057-7_24},
  isbn      = {978-3-642-31056-0},
  location  = {Beijing, China},
  numpages  = {25},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{steimann03,
  author        = {Steimann, Friedrich and Siberski, Wolf and K\"{u}hne, Thomas},
  title         = {Towards the systematic use of interfaces in JAVA programming},
  booktitle     = {International Conference on Principles and Practice of Programming in Java},
  pages         = {13--17},
  address       = {New York, NY, USA},
  publisher     = {Computer Science Press, Inc.},
  date          = {2003},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-9544145-1-9},
  location      = {Kilkenny City, Ireland},
}

@InProceedings{Steimann2009,
  author    = {Steimann, Friedrich and Thies, Andreas},
  title     = {From Public to Private to Absent: Refactoring Java Programs Under Constrained Accessibility},
  booktitle = ecoop,
  series    = {ECOOP'09},
  pages     = {419--443},
  address   = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid     = {1615210},
  date      = {2009},
  doi       = {10.1007/978-3-642-03013-0_19},
  isbn      = {978-3-642-03012-3},
  location  = {Genoa, Italy},
  numpages  = {25},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{stoerzer05,
  author        = {Stoerzer, M. and Graf, J.},
  title         = {Using pointcut delta analysis to support evolution of aspect-oriented software},
  booktitle     = icsm,
  abstract      = {Aspect oriented programming has been proposed as a way to improve modularity of software systems by allowing encapsulation of cross-cutting concerns. To do so, aspects specify where new functionality should apply using pointcuts. Unfortunately expressions written using todays mainstream pointcut languages are fragile, as non-local changes may easily change pointcut semantics. This is a major obstacle for evolution of aspect oriented software. In this paper we introduce a delta analysis to lighten these problems.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QIS4uLy4uLy4uL1BhcGVycy9TdG9lcnplci8yMDA1LnBkZtIXCxgZV05TLmRhdGFPEQGcAAAAAAGcAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKnEgIMjAwNS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqcScXikUIAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAACFN0b2VyemVyABAACAAAxqt79gAAABEACAAAxeLJggAAAAEAGAAKnEgACps+AAqRpwAKkaQACAChAACQ5wACAENNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOlN0b2VyemVyOjIwMDUucGRmAAAOABIACAAyADAAMAA1AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1N0b2VyemVyLzIwMDUucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AsgC3AL8CXwJhAmYCcQJ6AogCjAKTApwCoQKuArECwwLGAssAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACzQ==},
  bdsk-url-1    = {http://dx.doi.org/10.1109/ICSM.2005.99},
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Strom1986,
  author       = {Strom, Robert E and Yemini, Shaula},
  title        = {Typestate: A programming language concept for enhancing software reliability},
  volume       = {{SE}-12},
  number       = {1},
  pages        = {157--171},
  date         = {1986-01},
  doi          = {10.1109/tse.1986.6312929},
  journaltitle = tse,
  owner        = {Raffi Khatchadourian},
  publisher    = {IEEE},
  timestamp    = {2017.12.11},
}

@InProceedings{sullivan05,
  author        = {Sullivan, Kevin and Griswold, W. and Song, Y. and Cai, Y. and Shonle, M. and Tewari, N. and Rajan, H.},
  title         = {Information hiding interfaces for aspect-oriented design},
  booktitle     = fse,
  date          = {2005},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Lisbon, Portugal},
}

@Book{sun,
  title         = {Java Platform, Enterprise Edition (Java EE)},
  author        = {{Sun}},
  note          = {\url{http://java.sun.com/products/ejb}},
  bdsk-url-1    = {http://java.sun.com/products/ejb},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Tang2018,
  author       = {Tang, Yiming and Khatchadourian, Raffi and Bagherzadeh, Mehdi and Ahmed, Syed},
  title        = {Towards Safe Refactoring for Intelligent Parallelization of Java 8 Streams},
  booktitle    = {International Conference on Software Engineering: Companion Proceeedings},
  series       = {ICSE '18},
  pages        = {206--207},
  address      = {New York, NY, USA},
  organization = {ACM/IEEE},
  publisher    = {ACM},
  abstract     = {The Java 8 Stream API sets forth a promising new programming model that incorporates functional-like, MapReduce-style features into a mainstream programming language. However, using streams correctly and efficiently may involve subtle considerations. In this poster, we present our ongoing work and preliminary results towards an automated refactoring approach that assists developers in writing optimal stream code. The approach, based on ordering and typestate analysis, determines when it is safe and advantageous to convert streams to parallel and optimize parallel streams.},
  acmid        = {3195098},
  date         = {2018-05},
  year         = {2018},
  month        = may,
  doi          = {10.1145/3183440.3195098},
  isbn         = {978-1-4503-5663-3},
  keywords     = {Java 8, parallelization, refactoring, streams, typestate analysis},
  location     = {Gothenburg, Sweden},
  numpages     = {2},
  owner        = {Raffi Khatchadourian},
  poster       = {http://academicworks.cuny.edu/hc_pubs/394},
  timestamp    = {2018-07-15},
}

@InProceedings{Tansey2008,
  author        = {Tansey, Wesley and Tilevich, Eli},
  title         = {Annotation refactoring: inferring upgrade transformations for legacy applications},
  booktitle     = oopsla,
  abstract      = {Since annotations were added to the Java language, many frameworks have moved to using annotated Plain Old Java Objects (POJOs) in their newest releases. Legacy applications are thus forced to undergo extensive restructuring in order to migrate from old framework versions to new versions based on annotations ( Version Lock-in ). Additionally, because annotations are embedded in the application code, changing between framework vendors may also entail largescale manual changes ( Vendor Lock-in ).},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHy4uLy4uLy4uL1BhcGVycy9UYW5zZXkvMjAwOC5wZGbSFwsYGVdOUy5kYXRhTxEBlgAAAAABlgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpxNCDIwMDgucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnE7GiLJ4AAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZUYW5zZXkAEAAIAADGq3v2AAAAEQAIAADGiOq4AAAAAQAYAAqcTQAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6VGFuc2V5OjIwMDgucGRmAAAOABIACAAyADAAMAA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1RhbnNleS8yMDA4LnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOALAAtQC9AlcCWQJeAmkCcgKAAoQCiwKUApkCpgKpArsCvgLDAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsU=},
  bdsk-url-1    = {http://dx.doi.org/10.1145/1449764.1449788},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Misc{technology-cuny-office-of-the-president2014,
  author        = {{New York City College of Technology (CUNY) Office of the President}},
  title         = {Facts 2016--2017},
  note          = {(Accessed 7/7/2017)},
  date          = {2017},
  date-added    = {2015-09-24 13:58:27 +0000},
  date-modified = {2015-09-29 21:53:44 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.07},
  url           = {http://www.citytech.cuny.edu/about-us/docs/facts.pdf},
}

@TechReport{tip04,
  author        = {Tip, Frank and Fuhrer, Robert and Dolby, Julian and Kie{\.z}un, Adam},
  title         = {Refactoring techniques for migrating applications to generic {Java} container classes},
  institution   = {IBM T.~J.~Watson Research Center},
  number        = {RC 23238},
  date          = {2004-02},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{Tip2011,
  author       = {Tip, Frank and Fuhrer, Robert M. and Kie\.{z}un, Adam and Ernst, Michael D. and Balaban, Ittai and De Sutter, Bjorn},
  title        = {Refactoring Using Type Constraints},
  volume       = {33},
  number       = {3},
  pages        = {91--947},
  issn         = {0164-0925},
  acmid        = {1961205},
  articleno    = {9},
  date         = {2011-05},
  doi          = {10.1145/1961204.1961205},
  issue_date   = {April 2011},
  journaltitle = toplas,
  keywords     = {Refactoring, program transformation, type constraints},
  location     = {New York, NY, USA},
  numpages     = {47},
  owner        = {Raffi Khatchadourian},
  publisher    = {ACM},
  timestamp    = {2017.07.06},
}

@InProceedings{Tip2003,
  author        = {Tip, Frank and Kie{\.z}un, Adam and B{\"a}umer, Dirk},
  title         = {Refactoring for generalization using type constraints},
  booktitle     = oopsla,
  pages         = {13--26},
  date          = {2003-11},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{tourwe04,
  author        = {Tourw{\'e}, Tom and Kellens, Andy and Vanderperren, Wim and Vannieuwenhuyse, Frederik},
  title         = {Inductively Generated Pointcuts to Support Refactoring to Aspects},
  booktitle     = {Software Engineering Properties of Languages for Aspect Technologies},
  abstract      = {In this paper, we show that the basic pointcut languages offered by current aspect-oriented programming languages impact important software engineering properties, such as evolvability and comprehensibility, in a negative way. We discuss this impact by means of detailed examples, and propose an advanced pointcut managing environment, based on machine learning techniques, to overcome the problem.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YW8QIAAuAC4ALwAuAC4ALwAuAC4ALwBQAGEAcABlAHIAcwAvAFQAbwB1AHIAdwBlAwEALwAyADAAMAA0AC4AcABkAGbSFwsYGVdOUy5kYXRhTxEBmAAAAAABmAACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAxqtDtkgrAAAACpxQCDIwMDQucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKnFHF4pFCAAAAAAAAAAAAAwADAAAJIAAAAAAAAAAAAAAAAAAAAAZUb3Vyd44AEAAIAADGq3v2AAAAEQAIAADF4smCAAAAAQAYAAqcUAAKmz4ACpGnAAqRpAAIAKEAAJDnAAIAQU1hY2ludG9zaCBIRDpVc2VyczpyYWZmaTpEcm9wYm94OkRvY3VtZW50czpQYXBlcnM6VG91cneOOjIwMDQucGRmAAAOABIACAAyADAAMAA0AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA2VXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1RvdXJ3ZcyBLzIwMDQucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4A0QDWAN4CegJ8AoECjAKVAqMCpwKuArcCvALJAswC3gLhAuYAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAAC6A==},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Tsantalis2017,
  author    = {Tsantalis, Nikolaos and Mazinanian, Davood and Rostami, Shahriar},
  title     = {Clone Refactoring with Lambda Expressions},
  booktitle = icse,
  series    = {ICSE '17},
  pages     = {60--70},
  address   = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  abstract  = {Lambda expressions have been introduced in Java 8 to support functional programming and enable behavior parameterization by passing functions as parameters to methods. The majority of software clones (duplicated code) are known to have behavioral differences (i.e., Type-2 and Type-3 clones). However, to the best of our knowledge, there is no previous work to investigate the utility of Lambda expressions for parameterizing such behavioral differences in clones. In this paper, we propose a technique that examines the applicability of Lambda expressions for the refactoring of clones with behavioral differences. Moreover, we empirically investigate the applicability and characteristics of the Lambda expressions introduced to refactor a large dataset of clones. Our findings show that Lambda expressions enable the refactoring of a significant portion of clones that could not be refactored by any other means.},
  acmid     = {3097377},
  date      = {2017},
  doi       = {10.1109/ICSE.2017.14},
  isbn      = {978-1-5386-3868-2},
  keywords  = {code duplication, lambda expressions, refactoring},
  location  = {Buenos Aires, Argentina},
  numpages  = {11},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.05},
}

@InProceedings{Tufano2015,
  author    = {M. Tufano and F. Palomba and G. Bavota and R. Oliveto and M. Di Penta and A. De Lucia and D. Poshyvanyk},
  title     = {When and Why Your Code Starts to Smell Bad},
  booktitle = icse,
  volume    = {1},
  pages     = {403--414},
  date      = {2015-05},
  year      = {2015},
  month     = may,
  doi       = {10.1109/ICSE.2015.59},
  issn      = {0270-5257},
  keywords  = {recommender systems;software maintenance;software quality;code quality;recommendation systems;smell refactoring activities;smell-introducing commits identification;software ecosystems;technical debt management;Androids;Ecosystems;History;Humanoid robots;Maintenance engineering;Measurement;Software;bad code smells;empirical study;mining software repositories},
  owner     = {Raffi Khatchadourian},
  timestamp = {2018-07-09},
}

@InProceedings{unkel08,
  author        = {Unkel, Christopher and Lam, Monica S.},
  title         = {Automatic inference of stationary fields: a generalization of java's final fields},
  booktitle     = popl,
  pages         = {183--195},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  abstract      = {Java programmers can document that the relationship between two objects is unchanging by declaring the field that encodes that relationship to be final. This information can be used in program understanding and detection of errors in new code additions. Unfortunately, few fields in programs are actually declared final. Programs often contain fields that could be final, but are not declared so. Moreover, the definition of final has restrictions on initialization that limit its applicability.
We introduce stationary fields as a generalization of final. A field in a program is stationary if, for every object that contains it, all writes to the field occur before all the reads. Unlike the definition of final fields, there can be multiple writes during initialization, and initialization can span multiple methods.
We have developed an efficient algorithm for inferring which fields are stationary in a program, based on the observation that many fields acquire their value very close to object creation. We presume that an object's initialization phase has concluded when its reference is saved in some heap object. We perform precise analysis only regarding recently created objects. Applying our algorithm to real-world Java programs demonstrates that stationary fields are more common than final fields: 44-59% vs. 11-17% respectively in our benchmarks.
These surprising results have several significant implications. First, substantial portions of Java programs appear to be written in a functional style. Second, initialization of these fields occurs very close to object creation, when very good alias information is available. These results open the door for more accurate and efficient pointer alias analysis.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHi4uLy4uLy4uL1BhcGVycy9VbmtlbC8yMDA4LnBkZtIXCxgZV05TLmRhdGFPEQGUAAAAAAGUAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKnFUIMjAwOC5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqcVsXikUIAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAABVVua2VsAAAQAAgAAMare/YAAAARAAgAAMXiyYIAAAABABgACpxVAAqbPgAKkacACpGkAAgAoQAAkOcAAgBATWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpVbmtlbDoyMDA4LnBkZgAOABIACAAyADAAMAA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1Vua2VsLzIwMDgucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAK8AtAC8AlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1328438.1328463},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1328438.1328463},
  isbn          = {978-1-59593-689-9},
  location      = {San Francisco, California, USA},
}

@Misc{DoI2015,
  author       = {{US Department of the Interior Office of Civil Rights: Policy, Management and Budget}},
  title        = {Minority Serving Institutions Program},
  year         = {2015},
  note         = {(Accessed on 07/11/2017)},
  date         = {2015-07-01},
  organization = {{US Department of the Interior}},
  owner        = {rk1424},
  timestamp    = {2017.07.11},
  url          = {http://www.doi.gov/pmb/eeo/doi-minority-serving-institutions-program},
}

@Article{vajdahints,
  author        = {Vajda, Andr{\'a}s and Stenstr{\"o}m, Per},
  title         = {Hints based Speculative Execution for Exploiting Probabilistic Parallelism},
  __markedentry = {[Raffi Khatchadourian:6]},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@InProceedings{Vallee-Rai1999,
  author        = {Vall{\'e}e-Rai, Raja and Co, Phong and Gagnon, Etienne and Hendren, Laurie and Lam, Patrick and Sundaresan, Vijay},
  title         = {Soot-a Java bytecode optimization framework},
  booktitle     = {Conference of the Centre for Advanced Studies on Collaborative Research},
  date          = {1999},
  date-added    = {2016-02-24 03:40:07 +0000},
  date-modified = {2016-02-24 03:42:16 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.07.06},
}

@InProceedings{vallee-rai00,
  author        = {Vall\'{e}e-Rai, Raja and Gagnon, Etienne and Hendren, Laurie J. and Lam, Patrick and Pominville, Patrice and Sundaresan, Vijay},
  title         = {Optimizing Java Bytecode Using the Soot Framework: Is It Feasible?},
  booktitle     = cc,
  pages         = {18--34},
  publisher     = {Springer-Verlag},
  date          = {2000},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {3-540-67263-X},
  location      = {London, UK},
}

@InProceedings{vallee-rai99,
  author        = {Vall\'ee-Rai, Raja and Hendren, Laurie and Sundaresan, Vijay and Lam, Patrick and Gagnon, Etienne and Co, Phong},
  title         = {Soot - a {J}ava Optimization Framework},
  booktitle     = {Proceedings of CASCON 1999},
  pages         = {125--135},
  date          = {1999},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@TechReport{vallee-rai98,
  author        = {Vall\'{e}e-Rai, Raja and Hendren, Laurie J.},
  title         = {Jimple: Simplifying Java Bytecode for Analyses and Transformations},
  institution   = {McGill University},
  number        = {1998-4},
  date          = {1998-07},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  location      = {Montreal, Quebec, Canada},
}

@InProceedings{Vandierendonck2011,
  author        = {Vandierendonck, Hans and De Bosschere, Koen},
  title         = {Automatic parallelization in the paralax compiler},
  booktitle     = {International Workshop on Software and Compilers for Embedded Systems},
  series        = {SCOPES '11},
  pages         = {56--63},
  organization  = {Association for Computing Machinery (ACM)},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2011},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
}

@Article{vandierendonck2012techniques,
  author        = {Vandierendonck, Hans and Mens, Tom},
  title         = {Techniques and tools for parallelizing software},
  volume        = {29},
  number        = {2},
  pages         = {22--25},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2012},
  journaltitle  = {IEEE software},
  owner         = {Raffi Khatchadourian},
  publisher     = {IEEE},
  timestamp     = {2017.12.08},
}

@InProceedings{Vandierendonck2010,
  author        = {Vandierendonck, Hans and Rul, Sean and De Bosschere, Koen},
  title         = {The Paralax infrastructure: automatic parallelization with a helping hand},
  booktitle     = {International Conference on Parallel Architectures and Compilation Techniques},
  series        = {PACT '10},
  pages         = {389--399},
  organization  = {IEEE},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2010},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
}

@InProceedings{Wadler1990,
  author    = {Wadler, Philip},
  title     = {Linear types can change the world},
  booktitle = {IFIP TC},
  volume    = {2},
  pages     = {347--359},
  date      = {1990},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@Online{Wagner2017,
  author       = {Bill Wagner},
  title        = {{Lambda Expressions (C\# Programming Guide) | Microsoft Docs}},
  year         = {2017},
  date         = {2017-03-03},
  organization = {Microsoft},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2017.07.05},
  url          = {https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions},
  urldate      = {2017-07-05},
}

@Book{Warburton2014,
  title     = {Java 8 Lambdas: Pragmatic Functional Programming},
  publisher = {O'Reilly Media},
  year      = {2014},
  author    = {Warburton, Richard},
  edition   = {1},
  isbn      = {1449370772},
  date      = {2014-04-07},
  ean       = {9781449370770},
  language  = {English},
  owner     = {rk1424},
  pages     = {182},
  timestamp = {2017.07.12},
}

@Misc{Wikipedia2017,
  author    = {Wikipedia},
  title     = {Functional programming --- Wikipedia{,} The Free Encyclopedia},
  note      = {[Online; accessed 3-July-2017]},
  date      = {2017},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.03},
  url       = {https://en.wikipedia.org/w/index.php?title=Functional_programming&oldid=788471601},
}

@Misc{Wikipedia2017a,
  author    = {Wikipedia},
  title     = {Imperative programming --- Wikipedia{,} The Free Encyclopedia},
  note      = {[Online; accessed 3-July-2017 ]},
  date      = {2017},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.03},
  url       = {https://en.wikipedia.org/w/index.php?title=Imperative_programming&oldid=780445653},
}

@InProceedings{wloka06,
  author        = {Wloka, Jan},
  title         = {Towards Tool-supported Update of Pointcuts in AO Refactoring},
  booktitle     = late,
  abstract      = {Aspect-oriented programming (AOP) is often introduced as an extension to a programming language. The new modularization mechanisms are provided by new language constructs, such as the pointcut and the advice. Pointcuts specify where and when an advice is executed and thereby refer to other program elements and structures to express the execution conditions. During the evolution of a program these referenced structures might be changed and hence the advice is not invoked as intended. In this paper we present an approach for assessing the impact of source code changes on pointcuts and a program analysis that supports the identification of broken pointcuts. We elaborate how a refactoring tool can determine reasons and how an equivalent pointcut update can be calculated.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHi4uLy4uLy4uL1BhcGVycy9XbG9rYS8yMDA2LnBkZtIXCxgZV05TLmRhdGFPEQGUAAAAAAGUAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKnGIIMjAwNi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqcY8XikUIAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAABVdsb2thAAAQAAgAAMare/YAAAARAAgAAMXiyYIAAAABABgACpxiAAqbPgAKkacACpGkAAgAoQAAkOcAAgBATWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpXbG9rYToyMDA2LnBkZgAOABIACAAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1dsb2thLzIwMDYucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAK8AtAC8AlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  date          = {2006},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{wloka08,
  author        = {Wloka, Jan and Hirschfeld, Robert and H\"{a}nsel, Joachim},
  title         = {Tool-supported refactoring of aspect-oriented programs},
  booktitle     = aosd,
  abstract      = {Aspect-oriented programming languages provide new composition mechanisms for improving the modularity of crosscutting concerns. Implementations of such language support use advanced program representations, like abstract syntax trees or stack traces, to enable an indirect specification (pointcut) of executions of program elements at which aspect code (advice) is invoked. During the evolution of a program, this representations will change and, hence, advice may not be executed as intended by the developer.
In this paper we present a tool-supported refactoring approach that addresses this evolution problem by automating the detection of change effects on pointcuts and the generation of pointcut updates. A new model for decomposing pointcuts into simpler expressions is used as the base for deriving the change impact on pointcuts. Based on this model, we show how program analysis can detect affected or even broken pointcuts, how suitable pointcut adjustments can be derived, and when developer feedback is unavoidable.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHi4uLy4uLy4uL1BhcGVycy9XbG9rYS8yMDA4LnBkZtIXCxgZV05TLmRhdGFPEQGUAAAAAAGUAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKnGIIMjAwOC5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqcZMXikUIAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAABVdsb2thAAAQAAgAAMare/YAAAARAAgAAMXiyYIAAAABABgACpxiAAqbPgAKkacACpGkAAgAoQAAkOcAAgBATWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpXbG9rYToyMDA4LnBkZgAOABIACAAyADAAMAA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1dsb2thLzIwMDgucGRmAAATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAK8AtAC8AlQCVgJbAmYCbwJ9AoECiAKRApYCowKmArgCuwLAAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsI=},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1353482.1353499},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1353482.1353499},
}

@Article{Wolfe1996,
  author       = {Wolfe, Michael},
  title        = {Parallelizing Compilers},
  volume       = {28},
  number       = {1},
  pages        = {261--262},
  issn         = {0360-0300},
  acmid        = {234417},
  date         = {1996-03},
  doi          = {10.1145/234313.234417},
  issue_date   = {March 1996},
  journaltitle = {ACM Comput. Surv.},
  location     = {New York, NY, USA},
  numpages     = {2},
  owner        = {rk1424},
  publisher    = {ACM},
  timestamp    = {2017.12.07},
}

@InCollection{wu05,
  author               = {Wu, Pengcheng and Lieberherr, Karl},
  title                = {Shadow Programming: Reasoning About Programs Using Lexical Join Point Information},
  booktitle            = {Generative Programming and Component Engineering},
  publisher            = {Springer},
  volume               = {3676/2005},
  pages                = {141--156},
  abstract             = {The expressiveness of AspectJ's dynamic join point model has been shown in many useful applications, while the static join point model (also called lexical shadows) has been studied less. We propose a notion of shadow programming that exposes a program's adapted lexical shadow information to compile time language constructs to enable customized static analysis and more expressive join point selection mechanisms. In particular, within the framework of the AspectJ language and compiler, we have designed and implemented two compile time language constructs, called Statically Executable Advice and Pointcut Evaluator respectively, to show how the lexical shadow information can be used.},
  bdsk-url-1           = {http://dx.doi.org/10.1007/11561347%5C_11},
  citeulike-article-id = {3802266},
  date                 = {2005},
  date-added           = {2015-09-24 11:37:33 +0000},
  date-modified        = {2015-09-24 11:37:33 +0000},
  doi                  = {http://dx.doi.org/10.1007/11561347\_11},
  keywords             = {aspect-oriented, constructs, programming},
  posted-at            = {2008-12-17 22:08:12},
  url                  = {http://dx.doi.org/10.1007/11561347\_11},
}

@InProceedings{deng02,
  author        = {X.~Deng and M.~Dwyer and J.~Hatcliff and M.~Mizuno},
  title         = {{SyncGen}: An {AOP} framework for synchronization},
  booktitle     = {Int. Conf. on Tools and Alg. for Construction and Analysis of Sys.},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{Xiao2014,
  author    = {Xiao, Tian and Zhang, Jiaxing and Zhou, Hucheng and Guo, Zhenyu and McDirmid, Sean and Lin, Wei and Chen, Wenguang and Zhou, Lidong},
  title     = {Nondeterminism in {MapReduce} Considered Harmful? An Empirical Study on Non-commutative Aggregators in {MapReduce} Programs},
  booktitle = icse,
  publisher = {ACM},
  acmid     = {2591177},
  date      = {2014},
  doi       = {10.1145/2591062.2591177},
  keywords  = {MapReduce, bug, comutativity, nondeterminism},
  location  = {Hyderabad, India},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.12.14},
}

@InProceedings{xu07,
  author        = {Xu, Guoqing and Rountev, Atanas},
  title         = {Regression Test Selection for AspectJ Software},
  booktitle     = icse,
  bdsk-url-1    = {http://dx.doi.org/10.1109/ICSE.2007.72},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/ICSE.2007.72},
  isbn          = {0-7695-2828-7},
}

@InProceedings{xu08,
  author        = {Xu, Guoqing and Rountev, Atanas},
  title         = {{AJA}na: a general framework for source-code-level interprocedural dataflow analysis of {A}spect{J} software},
  booktitle     = aosd,
  bdsk-url-1    = {http://doi.acm.org/10.1145/1353482.1353488},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1353482.1353488},
  isbn          = {978-1-60558-044-9},
}

@InProceedings{xu04,
  author        = {Xu, J. and Rajan, H. and Sullivan, K.},
  title         = {Aspect Reasoning by Reduction to Implicit Invocation},
  booktitle     = foal,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QSC4uLy4uLy4uL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3h1LXJhamFuLXN1bGxpdmFuLnBkZtIXCxgZV05TLmRhdGFPEQHsAAAAAAHsAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADQXAknSCsAAAAmv/sVeHUtcmFqYW4tc3VsbGl2YW4ucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACeDicXikWAAAAAAAAAAAAADAAYAAAkgAAAAAAAAAAAAAAAAAAAAB3JlbGF0ZWQAABAACAAA0FxBZwAAABEACAAAxeLJoAAAAAEAHAAmv/sAJpN4ACaGQQAb45gAG9waABvKCwACk9UAAgBfTWFjaW50b3NoIEhEOlVzZXJzOgByYWZmaToARHJvcGJveDoARG9jdW1lbnRzOgBzY2hvb2w6ADc4OF9hdTA3OgByZWxhdGVkOgB4dS1yYWphbi1zdWxsaXZhbi5wZGYAAA4ALAAVAHgAdQAtAHIAYQBqAGEAbgAtAHMAdQBsAGwAaQB2AGEAbgAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAS1VzZXJzL3JhZmZpL0Ryb3Bib3gvRG9jdW1lbnRzL3NjaG9vbC83ODhfYXUwNy9yZWxhdGVkL3h1LXJhamFuLXN1bGxpdmFuLnBkZgAAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgDZAN4A5gLWAtgC3QLoAvEC/wMDAwoDEwMYAyUDKAM6Az0DQgAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAANE},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  local-url     = {file://localhost/Users/raffi/Documents/school/788_au07/related/xu-rajan-sullivan.pdf},
}

@Article{xu97,
  author        = {Xu, Q. and de Roever, W. and He, J.},
  title         = {Rely-Guarantee Method for Verifying Shared Variable Concurrent Programs},
  volume        = {9},
  number        = {2},
  pages         = {149--174},
  date          = {1997-03},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Formal Aspects of Computing},
}

@Misc{Yahav2018,
  author       = {Eran Yahav},
  title        = {{SAFE} static analysis tools},
  howpublished = {GitHub repository},
  date         = {2018-08},
  owner        = {Raffi Khatchadourian},
  timestamp    = {2018.03.29},
  url          = {https://github.com/tech-srl/safe},
}

@InProceedings{Yang2010,
  author    = {Yang, Fan and Su, Wen and Zhu, Huibiao and Li, Qin},
  title     = {Formalizing {MapReduce} with {CSP}},
  booktitle = {Engineering of Computer-Based Systems},
  pages     = {358--367},
  publisher = {IEEE},
  acmid     = {1796985},
  date      = {2010},
  doi       = {10.1109/ECBS.2010.50},
  isbn      = {978-0-7695-4005-4},
  keywords  = {CSP, MapReduce, Cloud Computing},
  numpages  = {10},
  owner     = {Raffi Khatchadourian},
  timestamp = {2017.07.06},
}

@InProceedings{yang07,
  author        = {Yang, Zifu and Zhao, Tian},
  title         = {Improve pointcut definitions with program views},
  booktitle     = {SPLAT '07: Proceedings of the 5\textsuperscript{th} workshop on Software engineering properties of languages and aspect technologies},
  pages         = {9},
  address       = {New York, NY, USA},
  publisher     = {ACM},
  abstract      = {Aspect-oriented programming languages select join points using pointcut constructs that depend on the syntactic structure of the base program. As the base program evolves, the pointcuts may no longer capture the intended set of join points. Also, pointcuts may select join points so that aspects can observe program behavior protected by encapsulation and this makes local reasoning difficult.
This work presents an approach for defining pointcuts based on program views, which are the abstractions of the classes and methods of the base program. Pointcuts are defined based on these views and syntactic changes in the base program will not affect the pointcuts if the base program is consistent with the views. A view also includes constraints to limit the set of join points that pointcuts can select and to help maintain modularity.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHS4uLy4uLy4uL1BhcGVycy9ZYW5nLzIwMDcucGRm0hcLGBlXTlMuZGF0YU8RAZAAAAAAAZAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqcawgyMDA3LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpxsxeKRQwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAEWWFuZwAQAAgAAMare/YAAAARAAgAAMXiyYMAAAABABgACpxrAAqbPgAKkacACpGkAAgAoQAAkOcAAgA/TWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpZYW5nOjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAyVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1lhbmcvMjAwNy5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCuALMAuwJPAlECVgJhAmoCeAJ8AoMCjAKRAp4CoQKzArYCuwAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAK9},
  bdsk-url-1    = {http://doi.acm.org/10.1145/1233843.1233852},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1145/1233843.1233852},
  isbn          = {1-59593-656-1},
  location      = {Vancouver, British Columbia, Canada},
}

@Article{yau93,
  author        = {Yau, S. S. and Collofello, J. S. and MacGregor, T. M.},
  title         = {Ripple effect analysis of software maintenance},
  pages         = {71--82},
  book          = {Software engineering metrics I: measures and validations},
  date          = {1993},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  isbn          = {0-07-707410-6},
  location      = {New York, NY, USA},
  publisher     = {McGraw-Hill, Inc.},
}

@MastersThesis{ye07,
  author        = {Ye, Lingdong},
  title         = {Tool Support For Understanding and Diagnosing Pointcut Expressions},
  abstract      = {Writing correct AspectJ pointcuts is hard. This is partly because of the complexity of the pointcut language and partly because it requires understanding how a pointcut matches across the entire code base. In this thesis, we present algorithms that compute two kinds of useful information that can help AspectJ developers diagnose and fix potential problems with their pointcuts. First, we present an algorithm to compute almost matched join points. Second we present algorithms to compute explanations of why a pointcut does not match (or does match) a specific join point. We implemented two tools using these algorithms. The first is an offline tool that analyzes a code base and produces a comprehensive report. Using this tool, we were able to find several real problems in existing, medium-sized AspectJ code bases. The second tool is an Eclipse plugin called PointcutDoctor. Pointcut-Doctor is a natural extension of AJDT, the mainstream IDE for AspectJ. It provides developers easy access to the same information from within their already familiar development environment.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QGy4uLy4uLy4uL1BhcGVycy9ZZS8yMDA3LnBkZtIXCxgZV05TLmRhdGFPEQGKAAAAAAGKAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKnG0IMjAwNy5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqcbsXikUMAAAAAAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAAAlllABAACAAAxqt79gAAABEACAAAxeLJgwAAAAEAGAAKnG0ACps+AAqRpwAKkaQACAChAACQ5wACAD1NYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOlllOjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAwVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1llLzIwMDcucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4ArACxALkCRwJJAk4CWQJiAnACdAJ7AoQCiQKWApkCqwKuArMAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACtQ==},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  institution   = {University Of British Columbia},
}

@InProceedings{ye08,
  author        = {Ye, Lingdong and Volder, Kris De},
  title         = {Tool Support For Understanding and Diagnosing Pointcut Expressions},
  booktitle     = aosd,
  abstract      = {In this paper, we present algorithms that compute two kinds of information that can help AspectJ developers diagnose and fix potential problems with their pointcuts. First, we present an algorithm to compute almost matched joinpoints. Second, we present algorithms to compute explanations of why a pointcut does not match (or does match) a specific joinpoint. We implemented two tools using these algorithms. The first is an offline tool that analyzes a code base and produces a comprehensive report about the pointcuts in the code. Using this tool, we were able to find several real problems in existing, medium-sized AspectJ code bases. The second tool is an Eclipse plug-in called PointcutDoctor. PointcutDoctor is a natural extension of AJDT that provides developers easy access to the same information from within their already familiar development environment.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QGy4uLy4uLy4uL1BhcGVycy9ZZS8yMDA4LnBkZtIXCxgZV05TLmRhdGFPEQGKAAAAAAGKAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAADGq0O2SCsAAAAKnG0IMjAwOC5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqcb8YyfSVQREYgAAAAAAADAAMAAAkgAAAAAAAAAAAAAAAAAAAAAlllABAACAAAxqt79gAAABEACAAAxjK1ZQAAAAEAGAAKnG0ACps+AAqRpwAKkaQACAChAACQ5wACAD1NYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RHJvcGJveDpEb2N1bWVudHM6UGFwZXJzOlllOjIwMDgucGRmAAAOABIACAAyADAAMAA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAwVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1llLzIwMDgucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4ArACxALkCRwJJAk4CWQJiAnACdAJ7AoQCiQKWApkCqwKuArMAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACtQ==},
  date          = {2008},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{yi2011optimizing,
  author        = {Yi, Qing},
  title         = {Optimizing and tuning scientific codes},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2011},
  journaltitle  = {Scalable computing and communications: Theory and Practice},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@Article{ying04,
  author        = {Ying, Annie T. T. and Ng, Raymond and Chu-Carroll, Mark C.},
  title         = {Predicting Source Code Changes by Mining Change History},
  volume        = {30},
  number        = {9},
  pages         = {574--586},
  issn          = {0098-5589},
  bdsk-url-1    = {http://dx.doi.org/10.1109/TSE.2004.52},
  date          = {2004},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  doi           = {10.1109/TSE.2004.52},
  journaltitle  = tse,
  location      = {Piscataway, NJ, USA},
  publisher     = {IEEE Press},
}

@InProceedings{youn07,
  author        = {Youn, So-Jeong and Oh, Kyung-Whan},
  title         = {Intention Recognition using a Graph Representation},
  booktitle     = {World Academy of Science, Engineering and Technology},
  abstract      = {The human friendly interaction is the key function of a human-centered system. Over the years, it has received much attention to develop the convenient interaction through intention recognition. Intention recognition processes multimodal inputs including speech, face images, and body gestures. In this paper, we suggest a novel approach of intention recognition using a graph representation called Intention Graph. A concept of valid intention is proposed, as a target of intention recognition. Our approach has two phases: goal recognition phase and intention recognition phase. In the goal recognition phase, we generate an action graph based on the observed actions, and then the candidate goals and their plans are recognized. In the intention recognition phase, the intention is recognized with relevant goals and user profile. We show that the algorithm has polynomial time complexity. The intention graph is applied to a simple briefcase domain to test our model.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QHS4uLy4uLy4uL1BhcGVycy9Zb3VuLzIwMDcucGRm0hcLGBlXTlMuZGF0YU8RAZAAAAAAAZAAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMarQ7ZIKwAAAAqccggyMDA3LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACpxzxeKRQwAAAAAAAAAAAAMAAwAACSAAAAAAAAAAAAAAAAAAAAAEWW91bgAQAAgAAMare/YAAAARAAgAAMXiyYMAAAABABgACpxyAAqbPgAKkacACpGkAAgAoQAAkOcAAgA/TWFjaW50b3NoIEhEOlVzZXJzOnJhZmZpOkRyb3Bib3g6RG9jdW1lbnRzOlBhcGVyczpZb3VuOjIwMDcucGRmAAAOABIACAAyADAAMAA3AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAyVXNlcnMvcmFmZmkvRHJvcGJveC9Eb2N1bWVudHMvUGFwZXJzL1lvdW4vMjAwNy5wZGYAEwABLwAAFQACAAz//wAAgAbSGxwdHlokY2xhc3NuYW1lWCRjbGFzc2VzXU5TTXV0YWJsZURhdGGjHR8gVk5TRGF0YVhOU09iamVjdNIbHCIjXE5TRGljdGlvbmFyeaIiIF8QD05TS2V5ZWRBcmNoaXZlctEmJ1Ryb290gAEACAARABoAIwAtADIANwBAAEYATQBVAGAAZwBqAGwAbgBxAHMAdQB3AIQAjgCuALMAuwJPAlECVgJhAmoCeAJ8AoMCjAKRAp4CoQKzArYCuwAAAAAAAAIBAAAAAAAAACgAAAAAAAAAAAAAAAAAAAK9},
  date          = {2007},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@Article{yu2016mathrm,
  author        = {Yu, Hairong and Li, Guohui and Shu, LihChyun},
  title         = {$\{\backslash$mathrm $\{$DS$\}\}$ \_ $\{\backslash$mathrm $\{$spirit$\}\}$: a data dependence and stride reference patterns profiling infrastructure},
  volume        = {72},
  number        = {2},
  pages         = {770--788},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2016},
  journaltitle  = {The Journal of Supercomputing},
  owner         = {Raffi Khatchadourian},
  publisher     = {Springer},
  timestamp     = {2017.12.08},
}

@Article{yu2012risky,
  author        = {Yu, Ying and others},
  title         = {Risky Thread Extraction: An Infrastructure For Aggressive Programmer Assisted Parallelization.},
  __markedentry = {[Raffi Khatchadourian:6]},
  date          = {2012},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.08},
}

@InProceedings{Yuan2012,
  author    = {Yuan, Ding and Park, Soyeon and Zhou, Yuanyuan},
  title     = {Characterizing Logging Practices in Open-source Software},
  booktitle = icse,
  series    = {ICSE '12},
  pages     = {102--112},
  address   = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  abstract  = {Software logging is a conventional programming practice. As its efficacy is often important for users and developers to understand what have happened in production run, yet software logging is often done in an arbitrarily manner. So far, there have been little study for understanding logging practices in real world software. This paper makes the first attempt (to the best of our knowledge) to provide quantitative characteristic study of the current log messages within four pieces of large open-source software. First, we quantitatively show that software logging is pervasive. By examining developers{\textquoteright} own modifications to logging code in revision history, we find that they often do not make the log messages right in their first attempts, and thus need to spend significant amount of efforts to modify the log messages as after-thoughts. Our study further provides several interesting findings on where developers spend most of their efforts in modifying the log messages, which can give insights for programmers, tool developers, and language and compiler designers to improve the current logging practice. To demonstrate the benefit of our study, we built a simple checker based on one of our findings and effectively detected 138 new problematic logging code from studied software (24 of them are already confirmed and fixed by developers).},
  acmid     = {2337236},
  date      = {2012},
  isbn      = {978-1-4673-1067-3},
  location  = {Zurich, Switzerland},
  numpages  = {11},
  owner     = {rk1424},
  timestamp = {2017.07.17},
  url       = {http://dl.acm.org/citation.cfm?id=2337223.2337236},
}

@InProceedings{Zaharia2008,
  author        = {Zaharia, Matei and Konwinski, Andy and Joseph, Anthony D. and Katz, Randy and Stoica, Ion},
  title         = {Improving {MapReduce} Performance in Heterogeneous Environments},
  booktitle     = {Operating Systems Design and Implementation},
  acmid         = {1855744},
  date          = {2008},
  date-added    = {2016-10-18 16:24:42 +0000},
  date-modified = {2016-10-18 16:24:44 +0000},
  location      = {San Diego, California},
  numpages      = {14},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.12.14},
  url           = {http://dl.acm.org/citation.cfm?id=1855741.1855744},
}

@InProceedings{zhao02,
  author        = {Zhao, Jianjun},
  title         = {Change impact analysis for aspect-oriented software evolution},
  booktitle     = {Principles of Software Evolution},
  abstract      = {Change impact analysis is an usefid technique for software evolution. Many techniques have been proposed for supporting change impact analysis of procedural or object-oriented software, but no effort has been made for change impact analysis of aspect-oriented software. In this paper, we present an approach to supporting change impact analysis of aspect-oriented software based on a program slicing technique. The main feature of our approach is to assess the effect of changes in an aspect-oriented program by analyzing its source code, and therefore, the process of change impact analysis can be automated completely.},
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QJi4uLy4uLy4uLy4uLy4uLy4uL1BhcGVycy9aaGFvLzIwMDIucGRm0hcLGBlXTlMuZGF0YU8RAXwAAAAAAXwAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAMRnBTJIKwAAABGkuQgyMDAyLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEaS6w+lPGAAAAAAAAAAAAAYAAwAACSAAAAAAAAAAAAAAAAAAAAAEWmhhbwAQAAgAAMRnPXIAAAARAAgAAMPplWgAAAABABQAEaS5ABGkPAARfVAAEWMRABFeCAACADdNYWNpbnRvc2ggSEQ6VXNlcnM6cmFmZmk6RG9jdW1lbnRzOlBhcGVyczpaaGFvOjIwMDIucGRmAAAOABIACAAyADAAMAAyAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAqVXNlcnMvcmFmZmkvRG9jdW1lbnRzL1BhcGVycy9aaGFvLzIwMDIucGRmABMAAS8AABUAAgAM//8AAIAG0hscHR5aJGNsYXNzbmFtZVgkY2xhc3Nlc11OU011dGFibGVEYXRhox0fIFZOU0RhdGFYTlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVkQXJjaGl2ZXLRJidUcm9vdIABAAgAEQAaACMALQAyADcAQABGAE0AVQBgAGcAagBsAG4AcQBzAHUAdwCEAI4AtwC8AMQCRAJGAksCVgJfAm0CcQJ4AoEChgKTApYCqAKrArAAAAAAAAACAQAAAAAAAAAoAAAAAAAAAAAAAAAAAAACsg==},
  bdsk-url-1    = {http://doi.acm.org/10.1145/512035.512060},
  date          = {2002},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
}

@InProceedings{zhong2009,
  author        = {Zhong, Hao and Zhang, Lu and Xie, Tao and Mei, Hong},
  title         = {Inferring Resource Specifications from Natural Language API Documentation},
  booktitle     = ase,
  bdsk-file-1   = {YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFyY2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJXTlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAFgAdccmVsYXRpdmVQYXRoWWFsaWFzRGF0YV8QLi4uLy4uLy4uLy4uL0dvb2dsZSBEcml2ZS9QYXBlcnMvWmhvbmcvMjAwOS5wZGbSFwsYGVdOUy5kYXRhTxEBigAAAAABigACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAA0FwJJ0grAAAEyuB0CDIwMDkucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATK4FrUDxFTAAAAAAAAAAAABAAEAAAJIAAAAAAAAAAAAAAAAAAAAAVaaG9uZwAAEAAIAADQXEFnAAAAEQAIAADUD0mTAAAAAQAUBMrgdAAr8cMAG+Z5ABvKCwACk9UAAgBATWFjaW50b3NoIEhEOlVzZXJzOgByYWZmaToAR29vZ2xlIERyaXZlOgBQYXBlcnM6AFpob25nOgAyMDA5LnBkZgAOABIACAAyADAAMAA5AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAuVXNlcnMvcmFmZmkvR29vZ2xlIERyaXZlL1BhcGVycy9aaG9uZy8yMDA5LnBkZgATAAEvAAAVAAIADP//AACABtIbHB0eWiRjbGFzc25hbWVYJGNsYXNzZXNdTlNNdXRhYmxlRGF0YaMdHyBWTlNEYXRhWE5TT2JqZWN00hscIiNcTlNEaWN0aW9uYXJ5oiIgXxAPTlNLZXllZEFyY2hpdmVy0SYnVHJvb3SAAQAIABEAGgAjAC0AMgA3AEAARgBNAFUAYABnAGoAbABuAHEAcwB1AHcAhACOAL8AxADMAloCXAJhAmwCdQKDAocCjgKXApwCqQKsAr4CwQLGAAAAAAAAAgEAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAsg=},
  date          = {2009},
  date-added    = {2016-09-26 20:42:44 +0000},
  date-modified = {2016-09-26 20:42:54 +0000},
  owner         = {Raffi Khatchadourian},
  timestamp     = {2017.06.23},
}

@Article{zou01,
  author        = {Zou, Ying and Kontogiannis, Kostas},
  title         = {A Framework for Migrating Procedural Code to Object-Oriented Platforms},
  volume        = {0},
  pages         = {390},
  bdsk-url-1    = {http://doi.ieeecomputersociety.org/10.1109/APSEC.2001.991506},
  date          = {2001},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  journaltitle  = {Asia-Pacific Software Engineering Conference},
  publisher     = {IEEE},
}

@Proceedings{91,
  title         = {IEE Colloquium on Tools and Techniques for Maintaining Traceability During Design},
  number        = {180},
  abstract      = {The following topics were dealt with: requirements traceability; keyphrase based traceability scheme; workbench providing traceability in real-time system development; traceability in integrating tools; use of quality function deployment in software development; case study in traceability; tracing back from requirements; maintenance of design history in AI-based design; requirements and traceability management; development framework; and design maintenance systems},
  date          = {1991-12},
  date-added    = {2015-09-24 11:37:33 +0000},
  date-modified = {2015-09-24 11:37:33 +0000},
  keywords      = {DP management, project engineering, software engineering, software tools AI-based design, design maintenance systems, development framework, keyphrase based traceability, quality function, real-time system development, requirements, requirements traceability, software development, tools, traceability management, workbench},
  location      = {London, UK},
}

@Comment{jabref-meta: databaseType:bibtex;}
